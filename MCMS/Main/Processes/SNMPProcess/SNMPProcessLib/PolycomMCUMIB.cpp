/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.old-api.conf 14476 2006-04-18 17:36:51Z hardaker $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

// ADDED: Following includes are not part of auto-generated file
#include <header_generic.h>
#include <header_simple_table.h>

#include "PolycomMCUMIB.h"

#include "Trace.h"
#include "TraceStream.h"
#include "SNMPDefines.h"
#include "SNMPAgentTask.h"


/* 
 * polycom_variables_oid:
 *   this is the top level oid that we want to register under.  This
 *   is essentially a prefix, with the suffix appearing in the
 *   variable below.
 */

oid polycom_variables_oid[] = { 1,3,6,1,4,1,13885 };

/* 
 * variable4 polycom_variables:
 *   this variable defines function callbacks and type return information 
 *   for the polycom mib section 
 */

struct variable7 polycom_variables[] = {
/*  magic number        , variable type , ro/rw , callback fn  , L, oidsuffix */
#define IDENTITYSOFTWAREINFO		1
{IDENTITYSOFTWAREINFO,  ASN_OCTET_STR,  RONLY ,  var_polycom, 4,  { 110,1,1,1 }},
#define IDENTITYBUILDDATE		2
{IDENTITYBUILDDATE,  ASN_OCTET_STR,  RONLY ,  var_polycom, 4,  { 110,1,1,2 }},
#define IDENTITYDEVICETYPE		3
{IDENTITYDEVICETYPE,  ASN_OCTET_STR,  RONLY ,  var_polycom, 4,  { 110,1,1,3 }},
#define IDENTITYSTATUS		4
{IDENTITYSTATUS,  ASN_INTEGER,  RONLY ,  var_polycom, 4,  { 110,1,1,6 }},
#define IDENTITYDEBUGMODE		5
{IDENTITYDEBUGMODE,  ASN_INTEGER,  RONLY ,  var_polycom, 4,  { 110,1,1,7 }},
#define IDENTITYCONSOLEACCESS		6
{IDENTITYCONSOLEACCESS,  ASN_INTEGER,  RONLY ,  var_polycom, 4,  { 110,1,1,8 }},
#define SERVICEH323STATUS		7
{SERVICEH323STATUS,  ASN_INTEGER,  RONLY ,  var_polycom, 5,  { 110,1,2,7,1 }},
#define SERVICESIPSTATUS		8
{SERVICESIPSTATUS,  ASN_INTEGER,  RONLY ,  var_polycom, 5,  { 110,1,2,8,1 }},
#define SERVICEISDNSTATUS		9
{SERVICEISDNSTATUS,  ASN_INTEGER,  RONLY ,  var_polycom, 5,  { 110,1,2,9,1 }},
#define SERVICESECURITYPROFILE		10
{SERVICESECURITYPROFILE,  ASN_OCTET_STR,  RONLY ,  var_polycom, 5,  { 110,1,2,10,1 }},
#define SERVICECONFERENCESERVERTOTALPORTS		11
{SERVICECONFERENCESERVERTOTALPORTS,  ASN_UNSIGNED,  RONLY ,  var_polycom, 5,  { 110,1,2,17,1 }},
#define SERVICECONFERENCESERVERTOTALVOICEPORTS		12
{SERVICECONFERENCESERVERTOTALVOICEPORTS,  ASN_UNSIGNED,  RONLY ,  var_polycom, 5,  { 110,1,2,17,2 }},
#define SERVICECONFERENCESERVERTOTALVIDEOPORTS		13
{SERVICECONFERENCESERVERTOTALVIDEOPORTS,  ASN_UNSIGNED,  RONLY ,  var_polycom, 5,  { 110,1,2,17,3 }},
#define SERVICECONFERENCESERVERTOTALPORTSUSED		14
{SERVICECONFERENCESERVERTOTALPORTSUSED,  ASN_UNSIGNED,  RONLY ,  var_polycom, 5,  { 110,1,2,17,4 }},
#define SERVICECONFERENCESERVERPORTSUSEDPERCENTAGE		15
{SERVICECONFERENCESERVERPORTSUSEDPERCENTAGE,  ASN_UNSIGNED,  RONLY ,  var_polycom, 5,  { 110,1,2,17,5 }},
#define SERVICECONFERENCESERVERTOTALVOICEPORTSUSED		16
{SERVICECONFERENCESERVERTOTALVOICEPORTSUSED,  ASN_UNSIGNED,  RONLY ,  var_polycom, 5,  { 110,1,2,17,6 }},
#define SERVICECONFERENCESERVERVOICEPORTSUSEDPERCENTAGE		17
{SERVICECONFERENCESERVERVOICEPORTSUSEDPERCENTAGE,  ASN_UNSIGNED,  RONLY ,  var_polycom, 5,  { 110,1,2,17,7 }},
#define SERVICECONFERENCESERVERTOTALVIDEOPORTSUSED		18
{SERVICECONFERENCESERVERTOTALVIDEOPORTSUSED,  ASN_UNSIGNED,  RONLY ,  var_polycom, 5,  { 110,1,2,17,8 }},
#define SERVICECONFERENCESERVERVIDEOPORTSUSEDPERCENTAGE		19
{SERVICECONFERENCESERVERVIDEOPORTSUSEDPERCENTAGE,  ASN_UNSIGNED,  RONLY ,  var_polycom, 5,  { 110,1,2,17,9 }},
#define SERVICECONFERENCESERVERTOTALNUMBERACTIVEPARTICIPANTS		20
{SERVICECONFERENCESERVERTOTALNUMBERACTIVEPARTICIPANTS,  ASN_UNSIGNED,  RONLY ,  var_polycom, 5,  { 110,1,2,17,10 }},
#define HARDWAREOVERALLSTATUS		21
{HARDWAREOVERALLSTATUS,  ASN_INTEGER,  RONLY ,  var_polycom, 4,  { 110,1,3,1 }},
#define HARDWAREFANSTATUS		22
{HARDWAREFANSTATUS,  ASN_INTEGER,  RONLY ,  var_polycom, 5,  { 110,1,3,2,1 }},
#define HARDWAREPOWERSUPPLYSTATUS		23
{HARDWAREPOWERSUPPLYSTATUS,  ASN_INTEGER,  RONLY ,  var_polycom, 5,  { 110,1,3,3,1 }},
#define HARDWAREINTEGRATEDBOARDSTATUS		24
{HARDWAREINTEGRATEDBOARDSTATUS,  ASN_INTEGER,  RONLY ,  var_polycom, 5,  { 110,1,3,4,1 }},
#define CALLNEWCALLSLASTMINTOTAL		25
{CALLNEWCALLSLASTMINTOTAL,  ASN_UNSIGNED,  RONLY ,  var_polycom, 5,  { 110,1,4,2,1 }},
#define CALLNEWCALLSLASTMINSUCCESS		26
{CALLNEWCALLSLASTMINSUCCESS,  ASN_UNSIGNED,  RONLY ,  var_polycom, 5,  { 110,1,4,2,2 }},
#define CALLNEWCALLSLASTMINFAILED		27
{CALLNEWCALLSLASTMINFAILED,  ASN_UNSIGNED,  RONLY ,  var_polycom, 5,  { 110,1,4,2,3 }},
#define CALLNEWCALLSLASTMINSUCCESSRATIO		28
{CALLNEWCALLSLASTMINSUCCESSRATIO,  ASN_UNSIGNED,  RONLY ,  var_polycom, 5,  { 110,1,4,2,4 }},
#define CALLENDEDCALLSLASTMINSUCCESSRATIO		29
{CALLENDEDCALLSLASTMINSUCCESSRATIO,  ASN_UNSIGNED,  RONLY ,  var_polycom, 5,  { 110,1,4,3,1 }},
#define CALLENDEDCALLSLASTMINTOTAL		30
{CALLENDEDCALLSLASTMINTOTAL,  ASN_UNSIGNED,  RONLY ,  var_polycom, 5,  { 110,1,4,3,2 }},
#define CALLENDEDCALLSLASTMINSUCCESS		31
{CALLENDEDCALLSLASTMINSUCCESS,  ASN_UNSIGNED,  RONLY ,  var_polycom, 5,  { 110,1,4,3,3 }},
#define CALLENDEDCALLSLASTMINFAILED		32
{CALLENDEDCALLSLASTMINFAILED,  ASN_UNSIGNED,  RONLY ,  var_polycom, 5,  { 110,1,4,3,4 }},
#define CALLACTIVECALLSSUMMARYVOICETOTALCALLS		33
{CALLACTIVECALLSSUMMARYVOICETOTALCALLS,  ASN_UNSIGNED,  RONLY ,  var_polycom, 6,  { 110,1,4,4,1,1 }},
#define CALLACTIVECALLSSUMMARYVIDEOTOTALCALLS		34
{CALLACTIVECALLSSUMMARYVIDEOTOTALCALLS,  ASN_UNSIGNED,  RONLY ,  var_polycom, 6,  { 110,1,4,4,2,1 }},
#define CONFERENCENUMBERACTIVECONFERENCES		35
{CONFERENCENUMBERACTIVECONFERENCES,  ASN_UNSIGNED,  RONLY ,  var_polycom, 4,  { 110,1,5,1 }},

};
/*    (L = length of the oidsuffix) */

// ADDED: the function is not part of auto-generated file
#define CASE(magic, type) case magic: return type

static eTelemetryType get_type_by_magic(int magic)
{
  switch (magic)
  {
    CASE(IDENTITYSOFTWAREINFO                                 , eTT_IdentitySoftwareInfo);
    CASE(IDENTITYBUILDDATE                                    , eTT_IdentityBuildDate);
    CASE(IDENTITYDEVICETYPE                                   , eTT_IdentityDeviceType);
    CASE(IDENTITYSTATUS                                       , eTT_SystemStatus);
    CASE(IDENTITYDEBUGMODE                                    , eTT_MCUDebug);
    CASE(IDENTITYCONSOLEACCESS                                , eTT_IdentityConsoleAccess);

    CASE(SERVICEH323STATUS                                    , eTT_H323Status);
    CASE(SERVICESIPSTATUS                                     , eTT_SIPStatus);
    CASE(SERVICEISDNSTATUS                                    , eTT_ISDNStatus);
    CASE(SERVICESECURITYPROFILE                               , eTT_UltraSecureMode);

    CASE(SERVICECONFERENCESERVERTOTALPORTS                    , eTT_Unknown/*eTT_NumPorts*/);  // Should be removed after
    CASE(SERVICECONFERENCESERVERTOTALVOICEPORTS               , eTT_NumVoicePorts);            // file MIB change.
    CASE(SERVICECONFERENCESERVERTOTALVIDEOPORTS               , eTT_NumVideoPorts);
    CASE(SERVICECONFERENCESERVERTOTALPORTSUSED                , eTT_Unknown/*eTT_NumPortsUsed*/);
    CASE(SERVICECONFERENCESERVERPORTSUSEDPERCENTAGE           , eTT_Unknown/*eTT_RatioPortsUsed*/);
    CASE(SERVICECONFERENCESERVERTOTALVOICEPORTSUSED           , eTT_NumVoicePortsUsed);
    CASE(SERVICECONFERENCESERVERVOICEPORTSUSEDPERCENTAGE      , eTT_NumVoicePortsUsedPercentage);
    CASE(SERVICECONFERENCESERVERTOTALVIDEOPORTSUSED           , eTT_NumVideoPortsUsed);
    CASE(SERVICECONFERENCESERVERVIDEOPORTSUSEDPERCENTAGE      , eTT_NumVideoPortsUsedPercentage);
    CASE(SERVICECONFERENCESERVERTOTALNUMBERACTIVEPARTICIPANTS , eTT_ActiveParticipant);

    CASE(HARDWAREOVERALLSTATUS                                , eTT_HardwareOverallStatus);
    CASE(HARDWAREFANSTATUS                                    , eTT_HardwareFanStatus);
    CASE(HARDWAREPOWERSUPPLYSTATUS                            , eTT_HardwarePowerSupplyStatus);
    CASE(HARDWAREINTEGRATEDBOARDSTATUS                        , eTT_HardwareIntegratedBoardStatus);

    CASE(CALLNEWCALLSLASTMINTOTAL                             , eTT_NewCalls);
    CASE(CALLNEWCALLSLASTMINSUCCESS                           , eTT_SuccessfulNewCalls);
    CASE(CALLNEWCALLSLASTMINFAILED                            , eTT_FailedNewCalls);
    CASE(CALLNEWCALLSLASTMINSUCCESSRATIO                      , eTT_RatioSuccessfulNewCalls);
    CASE(CALLENDEDCALLSLASTMINSUCCESSRATIO                    , eTT_RatioSuccessfulEndCalls);
    CASE(CALLENDEDCALLSLASTMINTOTAL                           , eTT_EndCalls);
    CASE(CALLENDEDCALLSLASTMINSUCCESS                         , eTT_SuccessfulEndCalls);
    CASE(CALLENDEDCALLSLASTMINFAILED                          , eTT_FailedEndCalls);

    CASE(CALLACTIVECALLSSUMMARYVOICETOTALCALLS                , eTT_VoiceParticipants);
    CASE(CALLACTIVECALLSSUMMARYVIDEOTOTALCALLS                , eTT_VideoParticipants);
    CASE(CONFERENCENUMBERACTIVECONFERENCES                    , eTT_ActiveConf);

    // Following parameters currently are not part of the MIB
//    CASE(POLYCOMREALPRESENCEMONITORINGMCUINCOMINGCALLSREQRGK    , eTT_IncomingCallsReqrGK);
//    CASE(POLYCOMREALPRESENCEMONITORINGMCUOUTGOINGCALLSREQRGK    , eTT_OutgoingCallsReqrGK);
//    CASE(POLYCOMREALPRESENCEMONITORINGMCUHDBITRATETHRSHLD       , eTT_HDBitrateThrshld);
//    CASE(POLYCOMREALPRESENCEMONITORINGMCUMAXCPRSLTN             , eTT_MaxCPRstln);
//    CASE(POLYCOMREALPRESENCEMONITORINGMCUMAXCPRSLTNCFG          , eTT_MaxCPRstlnCfg);
//    CASE(POLYCOMREALPRESENCEMONITORINGMCUMCUENDPOINTDISPLAYNAME , eTT_MCUDisplayName);
//    CASE(POLYCOMREALPRESENCEMONITORINGMCUPALNTSC                , eTT_PalNtsc);
//    CASE(POLYCOMREALPRESENCEMONITORINGMCURRQFIRST               , eTT_RRQFirst);
//    CASE(POLYCOMREALPRESENCEMONITORINGMCURSRCALLOCMODE          , eTT_RsrcAllocMode);

  default:
    FPASSERTSTREAM(true,
      "Illegal magic number " << magic << ", check MIB template");
  }

  return eTT_Unknown;
}

/** Initializes the polycom module */
void
init_polycom(void)
{
    DEBUGMSGTL(("polycom", "Initializing\n"));
    FTRACEINTO << "Initializing of Polycom MIB";

    // ADDED: variable7 is replace of variable4 from auto-generated file
    /* register ourselves with the agent to handle our mib tree */
    REGISTER_MIB("polycom", polycom_variables, variable7,
               polycom_variables_oid);

    /* place any other initialization junk you need here */
}

/*
 * var_polycom():
 *   This function is called every time the agent gets a request for
 *   a scalar variable that might be found within your mib section
 *   registered above.  It is up to you to do the right thing and
 *   return the correct value.
 *     You should also correct the value of "var_len" if necessary.
 *
 *   Please see the documentation for more information about writing
 *   module extensions, and check out the examples in the examples
 *   and mibII directories.
 */
unsigned char *
var_polycom(struct variable *vp, 
                oid     *name, 
                size_t  *length, 
                int     exact, 
                size_t  *var_len, 
                WriteMethod **write_method)
{
  if (header_generic(vp,name,length,exact,var_len,write_method) == MATCH_FAILED)
    return NULL;

  return CSNMPAgentTask::ReadTelemetry(get_type_by_magic(vp->magic), var_len);
}

