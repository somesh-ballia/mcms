/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.create-dataset.conf,v 5.4 2004/02/02 19:06:53 rstory Exp $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include <iostream>
#include <vector>
using namespace std;


#include "alarmActiveTable.h"
#include "SystemFunctions.h"
#include "StructTm.h"
#include "NStream.h"
#include "HlogElement.h"
#include "FaultsContainer.h"


netsnmp_table_row * CreateInitRow(CLogFltElement *ptrAlarm, const string &strMngmntIp);
netsnmp_table_data_set *CreateRegistrateTable();
netsnmp_table_data_set *GetSigletonAlarmTable();
void CleanNetSnmpTable(netsnmp_table_data_set *dataTable);




/** handles requests for the alarmActiveTable table, if anything else needs to be done */
int
alarmActiveTable_handler(netsnmp_mib_handler *handler,
                         netsnmp_handler_registration *reginfo,
                         netsnmp_agent_request_info *reqinfo,
                         netsnmp_request_info *requests)
{
    /*
     * perform anything here that you need to do.  The requests have
     * already been processed by the master table_dataset handler, but
     * this gives you chance to act on the request in some other way
     * if need be. 
     */
    return SNMP_ERR_NOERROR;
}








///////////////////////////////////////////////////////////////////////////////
void UpdateSnmpAlarmTable(CFaultList * alarmVector, const string & strMngmntIp)
{
    netsnmp_table_data_set *dataTable = GetSigletonAlarmTable();
    
    CleanNetSnmpTable(dataTable);
    
    CLogFltElement *currentAlarm = alarmVector->GetFirstFaultElement();
    while(NULL != currentAlarm)
    {   
        netsnmp_table_row *row = CreateInitRow(currentAlarm, strMngmntIp);
        netsnmp_table_dataset_add_row(dataTable, row);
        
        currentAlarm = alarmVector->GetNextFaultElement();
    }
}

///////////////////////////////////////////////////////////////////////////////
void InitSnmpAlarmTable()
{
    netsnmp_table_data_set *table = GetSigletonAlarmTable();
    FPASSERT(table == NULL);
}

///////////////////////////////////////////////////////////////////////////////
netsnmp_table_data_set *GetSigletonAlarmTable()
{
    static netsnmp_table_data_set *dataTable = NULL;
    if(NULL == dataTable)
    {
        dataTable = CreateRegistrateTable();
    }
    return dataTable;
}

///////////////////////////////////////////////////////////////////////////////
netsnmp_table_row * CreateInitRow(CLogFltElement *ptrAlarm, const string &strMngmntIp)
{
    // init params
    const int errorCode = ptrAlarm->GetCode();
    const int uniqueIndex = ptrAlarm->GetIndex();
    
    string description;
    ptrAlarm->GetCleanDescription(description);
    
    CStructTm creationTime = ptrAlarm->GetTime();
    COstrStream ostrCreationTime;
    creationTime.SerializeSNMP(ostrCreationTime);

    // allocate row
    netsnmp_table_row *row = netsnmp_create_table_data_row();
    
    // just name
    netsnmp_table_row_add_index(row, ASN_OCTET_STR, ALARM_LIST_NAME, strlen(ALARM_LIST_NAME));

    // creation time
    netsnmp_table_row_add_index(row, ASN_OCTET_STR, ostrCreationTime.str().c_str(), ostrCreationTime.str().length());

    // index
    netsnmp_table_row_add_index(row, ASN_UNSIGNED, &uniqueIndex, sizeof(int));

   
    // Mngmnt ip
    netsnmp_set_row_column(row, COLUMN_ALARMACTIVEENGINEADDRESS, ASN_OCTET_STR,
                           strMngmntIp.c_str(), strMngmntIp.length());

    // notification type
    oid notification_oid[] =   { 1, 3 , 6 , 1 ,4 , 1, 13885 ,9 ,1 ,1 ,2 ,2 ,0, 999};
    size_t notification_oid_len = OID_LENGTH(notification_oid);
    notification_oid[13] = errorCode; // replace the 999 with the runtime errorcode
    
    netsnmp_set_row_column(row, COLUMN_ALARMACTIVENOTIFICATIONID , ASN_OBJECT_ID,
                           (const char*)notification_oid, sizeof(oid) * notification_oid_len);

    // alarm desc.
    netsnmp_set_row_column(row, COLUMN_ALARMACTIVEDESCRIPTION , ASN_OCTET_STR,
                           description.c_str(), description.length());

    // Defaults
    u_int zero = 0;
    oid empty_oid[] = { 0 , 0  };
    size_t empty_oid_len = OID_LENGTH(empty_oid);
    oid alarmActiveTable_oid[] = { 1, 3, 6, 1, 2, 1, 118, 1, 2, 2 };
    size_t alarmActiveTable_oid_len = OID_LENGTH(alarmActiveTable_oid);
    
    netsnmp_set_row_column(row, COLUMN_ALARMACTIVEENGINEADDRESSTYPE, ASN_INTEGER, (const char*)&zero, sizeof(u_int));
    netsnmp_set_row_column(row, COLUMN_ALARMACTIVECONTEXTNAME , ASN_OCTET_STR, "", strlen("")); // community string
    netsnmp_set_row_column(row, COLUMN_ALARMACTIVEVARIABLES , ASN_INTEGER, (const char*)&zero, sizeof(u_int));
    netsnmp_set_row_column(row, COLUMN_ALARMACTIVERESOURCEID , ASN_OBJECT_ID, (const char*)empty_oid,sizeof(oid) * empty_oid_len);
    netsnmp_set_row_column(row, COLUMN_ALARMACTIVELOGPOINTER , ASN_OBJECT_ID, (const char*)empty_oid,sizeof(oid) * empty_oid_len);    
    netsnmp_set_row_column(row, COLUMN_ALARMACTIVEMODELPOINTER , ASN_OBJECT_ID, (const char*)empty_oid,sizeof(oid) * empty_oid_len);
    netsnmp_set_row_column(row, COLUMN_ALARMACTIVESPECIFICPOINTER , ASN_OBJECT_ID, (const char*)empty_oid,sizeof(oid) * empty_oid_len);
    netsnmp_set_row_column(row, COLUMN_ALARMACTIVEENGINEID, ASN_OCTET_STR, "", strlen(""));
    
    return row;
}

///////////////////////////////////////////////////////////////////////////////
netsnmp_table_data_set *CreateRegistrateTable()
{   
    const char *tableName = "alarmActiveTable";
    
    netsnmp_table_data_set *table_set = netsnmp_create_table_data_set(tableName);
    
    //comment this out or delete if you don't support creation of new rows
    table_set->allow_creation = 1;

    //Adding indexes
    netsnmp_table_set_add_indexes(table_set,
                                  ASN_OCTET_STR,     // index: alarmListName 
                                  ASN_OCTET_STR,     // index: alarmActiveDateAndTime 
                                  ASN_UNSIGNED,      // index: alarmActiveIndex
                                  0);
    netsnmp_table_set_multi_add_default_row(table_set,
                                            COLUMN_ALARMACTIVEENGINEID,
                                            ASN_OCTET_STR, 0, NULL, 0,
                                            COLUMN_ALARMACTIVEENGINEADDRESSTYPE,
                                            ASN_INTEGER, 0, NULL, 0,
                                            COLUMN_ALARMACTIVEENGINEADDRESS,
                                            ASN_OCTET_STR, 0, NULL, 0,
                                            COLUMN_ALARMACTIVECONTEXTNAME,
                                            ASN_OCTET_STR, 0, NULL, 0,
                                            COLUMN_ALARMACTIVEVARIABLES,
                                            ASN_UNSIGNED, 0, NULL, 0,
                                            COLUMN_ALARMACTIVENOTIFICATIONID,
                                            ASN_OBJECT_ID, 0, NULL, 0,
                                            COLUMN_ALARMACTIVERESOURCEID,
                                            ASN_OBJECT_ID, 0, NULL, 0,
                                            COLUMN_ALARMACTIVEDESCRIPTION,
                                            ASN_OCTET_STR, 0, NULL, 0,
                                            COLUMN_ALARMACTIVELOGPOINTER,
                                            ASN_OBJECT_ID, 0, NULL, 0,
                                            COLUMN_ALARMACTIVEMODELPOINTER,
                                            ASN_OBJECT_ID, 0, NULL, 0,
                                            COLUMN_ALARMACTIVESPECIFICPOINTER,
                                            ASN_OBJECT_ID, 0, NULL, 0, 0);
    
    oid alarmActiveTable_oid[] = { 1, 3, 6, 1, 2, 1, 118, 1, 2, 2 };
    size_t alarmActiveTable_oid_len = OID_LENGTH(alarmActiveTable_oid);

    netsnmp_handler_registration *pHandler = netsnmp_create_handler_registration(tableName,
                                                                                 alarmActiveTable_handler,
                                                                                 alarmActiveTable_oid,
                                                                                 alarmActiveTable_oid_len,
                                                                                 HANDLER_CAN_RWRITE);
    netsnmp_register_table_data_set(pHandler, table_set, NULL);
    netsnmp_register_auto_data_table(table_set, NULL);
    
    return table_set;
}

///////////////////////////////////////////////////////////////////////////////
void CleanNetSnmpTable(netsnmp_table_data_set *dataTable)
{
//     netsnmp_table_data_set_storage *data;
//     netsnmp_table_dataset_delete_all_data (dataTable);
    
    vector<netsnmp_table_row*> rowsToClean;
    netsnmp_table_row *currentRow = netsnmp_table_data_set_get_first_row(dataTable);
    while(NULL != currentRow)
    {
        rowsToClean.push_back(currentRow);
        currentRow = netsnmp_table_data_set_get_next_row(dataTable, currentRow);
    }
    
    for(vector<netsnmp_table_row*>::iterator iTer = rowsToClean.begin();
        iTer != rowsToClean.end();
        iTer++)
    {
        currentRow = *iTer;
        netsnmp_table_dataset_remove_and_delete_row (dataTable, currentRow);
    }
}
