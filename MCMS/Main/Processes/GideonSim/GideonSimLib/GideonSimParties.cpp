//+========================================================================+//                   GideonSimParties.cpp                                  |//            Copyright 1995 Pictel Technologies Ltd.                      |//                   All Rights Reserved.                                  |//-------------------------------------------------------------------------|// NOTE: This software contains valuable trade secrets and proprietary     |// information of Pictel Technologies Ltd. and is protected by law.        |// It may not be copied or distributed in any form or medium, disclosed    |// to third parties, reverse engineered or used in any manner without      |// prior written authorization from Pictel Technologies Ltd.               |//-------------------------------------------------------------------------|// FILE:       GideonSimParties.cpp                                        |// SUBSYSTEM:  MCMS                                                        |// PROGRAMMER: Vasily                                                      |//+========================================================================+#include "Segment.h"#include "MplMcmsProtocol.h"#include "GideonSimParties.h"///////////////////////////////////////////////////////////////////////////////  CPstnConnectionParty - presents PSTN connection///////////////////////////////////////////////////////////////////////////////CBasicParty::CBasicParty(){	Cleanup();}/////////////////////////////////////////////////////////////////////////////CBasicParty::~CBasicParty(){}/////////////////////////////////////////////////////////////////////////////void CBasicParty::Create(CMplMcmsProtocol& rMpl){	if( rMpl.getPortDescriptionHeaderCounter() == 1 ) {		m_confId       = rMpl.getPortDescriptionHeaderConf_id();		m_partyId      = rMpl.getPortDescriptionHeaderParty_id();		m_connectionId = rMpl.getPortDescriptionHeaderConnection_id();	}}/////////////////////////////////////////////////////////////////////////////void CBasicParty::Cleanup(){	m_confId = m_partyId = m_connectionId = m_connectionIdRtp = 0xffffffff;}/////////////////////////////////////////////////////////////////////////////BOOL CBasicParty::IsEmpty() const{	if( (m_confId == 0xffffffff )		&& ( m_partyId == 0xffffffff )			&& ( m_connectionId == 0xffffffff) )		return TRUE;	return FALSE;}/////////////////////////////////////////////////////////////////////////////void CBasicParty::Serialize(CSegment& seg) const{	seg << m_confId		<< m_partyId		<< m_connectionId;}/////////////////////////////////////////////////////////////////////////////void CBasicParty::DeSerialize(CSegment& seg){	seg >> m_confId		>> m_partyId		>> m_connectionId;}///////////////////////////////////////////////////////////////////////////////  CAudioParty - presents audio party///////////////////////////////////////////////////////////////////////////////CAudioParty::CAudioParty(){	Cleanup();}/////////////////////////////////////////////////////////////////////////////CAudioParty::~CAudioParty(){}/////////////////////////////////////////////////////////////////////////////void CAudioParty::SetConfId(const DWORD confId){	m_confId = confId;}/////////////////////////////////////////////////////////////////////////////void CAudioParty::SetRtpId(const DWORD rtpId){	m_connectionIdRtp = rtpId;}///////////////////////////////////////////////////////////////////////////////  CPstnConnectionParty - presents PSTN connection///////////////////////////////////////////////////////////////////////////////CPstnConnectionParty::CPstnConnectionParty(){	Cleanup();}/////////////////////////////////////////////////////////////////////////////CPstnConnectionParty::~CPstnConnectionParty(){}/////////////////////////////////////////////////////////////////////////////void CPstnConnectionParty::Create(CMplMcmsProtocol& rMpl,const PartyDialType dialType,			const WORD firstPort, const WORD portsNum){	if( rMpl.getPortDescriptionHeaderCounter() == 1 ) {		CBasicParty::Create(rMpl);		m_enDialType   = dialType;		m_portId       = firstPort;		m_numPorts     = portsNum;	}}/////////////////////////////////////////////////////////////////////////////void CPstnConnectionParty::Cleanup(){	CBasicParty::Cleanup();		m_portId = 0xff;	m_numPorts = 0;	m_enDialType = eUnknownDialType;}/////////////////////////////////////////////////////////////////////////////void CPstnConnectionParty::FillPortData(CMplMcmsProtocol& rMpl) const{}/////////////////////////////////////////////////////////////////////////////void CPstnConnectionParty::Serialize(CSegment& seg) const{	CBasicParty::Serialize(seg);	seg << m_portId		<< m_numPorts;}/////////////////////////////////////////////////////////////////////////////void CPstnConnectionParty::DeSerialize(CSegment& seg){	CBasicParty::DeSerialize(seg);	seg >> m_portId		>> m_numPorts;}



