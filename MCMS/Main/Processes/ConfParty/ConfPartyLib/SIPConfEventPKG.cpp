
//=================================================================================================
//
//Copyright (C) 2005 POLYCOM
//This file contains confidential information proprietary to ACCORD Networks Ltd. The use or
//disclosure of any information contained in this file without the written consent of an officer of
//ACCORD Networks Ltd. is expressly forbidden.
//
//=================================================================================================

//=================================================================================================
//
//Module Name:  SIPConfEventPKG.CPP
//
//General Description:
//
//    1.	Conference Event package
//
//Generated By:                            Date:
//
//Revisions and Updates:
//
//Date         Updated By         Description
//========   ==============   =====================================================================
//
//=================================================================================================

#ifndef __SIP_EVENTPACKAGE_CPP__
#define __SIP_EVENTPACKAGE_CPP__

//===== Include Files =====
#include "SIPConfEventPKG.h"
#include "psosxml.h"
#include <stdlib.h>
#include "ApiStatuses.h"
#include "SystemFunctions.h"
#include "IpServiceListManager.h"

#include "TraceStream.h"
extern CIpServiceListManager* GetIpServiceListMngr();

#define CONF_INFO_NAME	"conference-info"

#define UPDATE_STATE	if(eNoChange == m_state) m_state = ePartialData;
/*
// ************************************************************************************
//
//	CBasicConfPackageType
//
// ************************************************************************************


///////////////////////////////////////////////////////////////////
CBasicConfPackageType::CBasicConfPackageType()
{
	m_elementName[0]= '\0';
}

///////////////////////////////////////////////////////////////////
CBasicConfPackageType::CBasicConfPackageType(char* pName)
{
	if(pName)
		strncpy(m_elementName, pName, H243_NAME_LEN);
}

///////////////////////////////////////////////////////////////////
CBasicConfPackageType::~CBasicConfPackageType()
{
}

///////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////
const char* CBasicConfPackageType::GetElementName()
{
	return m_elementName;
}

// ************************************************************************************
//
//	CConfPackageType
//
// ************************************************************************************

/////////////////////////////////////////////////////////////////////////////
CConfPackageType::CConfPackageType() : m_state(eFullData)
{
}

///////////////////////////////////////////////////////////////////
CConfPackageType::CConfPackageType(char* pName) :CBasicConfPackageType(pName), m_state(eFullData)
{
}

/////////////////////////////////////////////////////////////////////////////
CConfPackageType::~CConfPackageType()
{
}

///////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
eTypeState CConfPackageType::GetState()
{
	return m_state;
}

/////////////////////////////////////////////////////////////////////////////
const char* CConfPackageType::GetStateByString()
{
	switch(m_state)
	{
		case(eNoChange):
			return "no-change";

		case(ePartialData):
			return "partial";

		case(eFullData):
			return "full";

		default:
			return "unknown";
	}

}

/////////////////////////////////////////////////////////////////////////////
void CConfPackageType::SerializeXml(CXMLDOMElement* pFatherNode)
{
	SerializeXml(pFatherNode, TRUE);
}

/////////////////////////////////////////////////////////////////////////////
void CConfPackageType::SerializeState(CXMLDOMElement* pFatherNode, BYTE bFull)
{
	if(bFull || eNoChange != m_state)
	{
		CXMLDOMAttribute* pAttribute = new CXMLDOMAttribute();
		pAttribute->set_nodeName("state");

		//if requested to serialize full data
		if(bFull)
		{
			pAttribute->SetValueForElement("full");
		}
		else
		{
			if(eFullData == m_state)
				pAttribute->SetValueForElement("full");
			else
				if(ePartialData == m_state)
					pAttribute->SetValueForElement("partial");
		}
		pFatherNode->AddAttribute(pAttribute);

		if(!bFull || eFullData == m_state)
			m_state = eNoChange;
	}
}

*/

// ************************************************************************************
//
//	CConfInfoType
//
// ************************************************************************************

/////////////////////////////////////////////////////////////////////////////
CConfInfoType::CConfInfoType() : m_entityAtr("")/*,m_confContactInfo("")*/,m_version(1)/*,m_confID(0)*/
{
	strncpy(m_elementName, CONF_INFO_NAME, H243_NAME_LEN);
//	m_pConfState = new CConfStateType;
	m_pConfExtension = new CConfExtension;
}

/////////////////////////////////////////////////////////////////////////////
CConfInfoType::CConfInfoType(CCommConf* pCommConf, const char* confUri,const char* contactInfo/*,unsigned int version*/) : m_entityAtr(confUri)/*,m_confContactInfo(contactInfo)*/,m_version(/*version*/1)
{
//	m_confID = pCommConf->GetMonitorConfId();
	strncpy(m_elementName, CONF_INFO_NAME, H243_NAME_LEN);
//	m_pConfState = new CConfStateType(pCommConf);
	m_pConfExtension = new CConfExtension(contactInfo,pCommConf->GetMonitorConfId());
	SetupUsersList(pCommConf);
}

/////////////////////////////////////////////////////////////////////////////
CConfInfoType::~CConfInfoType()
{
	CUserType* pTempUser = NULL;

	std::vector< CUserType * >::iterator itr =  m_UsersList.begin();
	while(itr != m_UsersList.end())
	{
		pTempUser = (*itr);
		m_UsersList.erase(itr);
		POBJDELETE(pTempUser);
		itr = m_UsersList.begin();
	}
//	POBJDELETE(m_pConfState);
	POBJDELETE(m_pConfExtension);
}

//////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
void CConfInfoType::SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull)
{
	SerializeXml(pFatherNode, bFull, FALSE);
}

/////////////////////////////////////////////////////////////////////////////
void CConfInfoType::SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull, BYTE bIsNewSubscriber)
{
	if (bFull || eNoChange != m_state)
	{
		if (eFullData == m_state)
			bFull = TRUE;

		pFatherNode->set_nodeName(m_elementName);

		CXMLDOMAttribute* pEntityAttribute1 = new CXMLDOMAttribute();
		pEntityAttribute1->set_nodeName("xmlns");
		pEntityAttribute1->SetValueForElement("urn:ietf:params:xml:ns:conference-info");
		pFatherNode->AddAttribute(pEntityAttribute1);

		CXMLDOMAttribute* pEntityAttribute = new CXMLDOMAttribute();
		pEntityAttribute->set_nodeName("entity");
		pEntityAttribute->SetValueForElement(m_entityAtr.GetString());
		pFatherNode->AddAttribute(pEntityAttribute);

		SerializeState(pFatherNode, bFull);

		CXMLDOMAttribute* pVersionAttribute = new CXMLDOMAttribute();
		pVersionAttribute->set_nodeName("version");

		char version[11];
		snprintf(version, ARRAYSIZE(version), "%d", m_version);

		pVersionAttribute->SetValueForElement(version);
		pFatherNode->AddAttribute(pVersionAttribute);

		std::vector<CUserType *>::iterator itr = m_UsersList.begin();
		if (0 == m_UsersList.size())
		{
			PTRACE(eLevelInfoNormal, "CConfInfoType::SerializeXml, no users to add to XML.");
		}
		else
		{
			CXMLDOMElement* pUsersNode = NULL;

			CUserType* pUser = NULL;
			BYTE wasUpdated = false;
			while (itr != m_UsersList.end())
			{
				pUser = (*itr);
				if (pUser->WasUpdated())
				{
					wasUpdated = true;
					break;
				}
				itr++;
			}

			if (wasUpdated)
			{
				pUsersNode = pFatherNode->AddChildNode("users");
				pUser = NULL;
				DWORD length = 0;
				char *XML = NULL;

				while (itr != m_UsersList.end() && length < MAX_NOTIFY_CONTENT_LEN)
				{
					pUser = (*itr);

					pUser->SerializeXml(pUsersNode, bFull, bIsNewSubscriber);
					pUsersNode->DumpDataAsStringWithAttribute(&XML, &length);

					TRACESTR (eLevelInfoNormal) << "CConfInfoType::SerializeXml, length =  " << length;
					itr++;
					PDELETEA(XML);
				}
			}
		}
		m_pConfExtension->SerializeXml(pFatherNode, bFull);
	}
	DelDelletedParties();
}

/////////////////////////////////////////////////////////////////////////////
void CConfInfoType::SetupUsersList(CCommConf* pCommConf)
{
	CConfParty* pConfParty = pCommConf->GetFirstParty();
	while(pConfParty)
	{

		BOOL bPcasWebFlow = FALSE;
		if (0 == strncmp(pCommConf->GetName(), "RAS200I_web_", 12))
			bPcasWebFlow = TRUE;

		BOOL bIsWebDialInParty = FALSE;
		if(bPcasWebFlow && DIAL_IN == pConfParty->GetConnectionType())
			bIsWebDialInParty = TRUE;

		AddParty(pConfParty, bIsWebDialInParty );
		pConfParty = pCommConf->GetNextParty();
	}
}

/////////////////////////////////////////////////////////////////////////////
CUserType* CConfInfoType::FindUser(DWORD partyId)
{
	CUserType* pUser = NULL;
	std::vector< CUserType * >::iterator itr =  m_UsersList.begin();
	while(itr != m_UsersList.end())
	{
		pUser = (*itr);

//		PTRACE2(eLevelInfoNormal, "CConfInfoType::FindUser, pUser = ", pUser->GetUriAttribute());
//		TRACESTR (eLevelInfoNormal) <<"CUserType::FindUser, user_id =  " << pUser->GetUserId();

		if(partyId == pUser->GetUserId())
			break;
		else
		{
			pUser = NULL;
			++itr;
		}
	}

	return pUser;
}
/////////////////////////////////////////////////////////////////////////////
const char* CConfInfoType::GetEntity()
{
	return m_entityAtr.GetString();
}
/////////////////////////////////////////////////////////////////////////////
void	CConfInfoType::SetConfContactInfo(const char* contactInfo)
{
//	if(strcmp(contactInfo,m_confContactInfo.GetString()))
	if( strcmp( contactInfo,GetConfContactInfo() ) )
	{
		//m_confContactInfo = contactInfo;
		m_pConfExtension->SetConfContactInfo(contactInfo);
	}
}
/////////////////////////////////////////////////////////////////////////////
const char* CConfInfoType::GetConfContactInfo() const
{
	//return m_confContactInfo.GetString();
	return m_pConfExtension->GetConfContactInfo();
}
///////////////////////////////////////////////////////////////////
BYTE CConfInfoType::WasUpdated()
{
	return (eNoChange != m_state);
}
/////////////////////////////////////////////////////////////////////////////
void CConfInfoType::AddParty(CConfParty* pConfParty, BOOL bIsWebDialInParty )
{
	PTRACE2(eLevelInfoNormal, "CConfInfoType::AddParty, party=", pConfParty->GetName());
	const char* pSipUri = pConfParty->GetSipPartyAddress();
	if(IsValidPObjectPtr(pConfParty))
	{
		//verify not already in DB
		if(FindUser(pConfParty->GetPartyId()))
		{
			PTRACE(eLevelInfoNormal, "CConfInfoType::AddParty, already in list.");
			return;
		}
		CUserType* pUser = new CUserType(pConfParty, bIsWebDialInParty );
		m_UsersList.push_back(pUser);
		UPDATE_STATE;
	}
}
/////////////////////////////////////////////////////////////////////////////
void CConfInfoType::DelParty(DWORD partyId, int numSubscribers)
{
	CUserType* pUser = NULL;
	std::vector<CUserType *>::iterator itr = m_UsersList.begin();
	while (itr != m_UsersList.end())
	{
		pUser = (*itr);
		if (partyId == pUser->GetUserId())
		{
			char s[100];
			*s = 0;
			snprintf(s, ARRAYSIZE(s), "%d, %s, %s", pUser->GetUserId(), pUser->GetUriAttribute(), pUser->GetPartyStatus());

			if (eFullData == pUser->GetState())
			{
				m_UsersList.erase(itr);
				POBJDELETE(pUser);
				itr = m_UsersList.begin();
				break;
			}
			pUser->MarkForDelete();
			PTRACE2(eLevelDebug, "CConfInfoType::DelParty, not deleting: ", s);
			pUser = NULL;
			UPDATE_STATE;
			break;
		}
		++itr;
	}
}

/////////////////////////////////////////////////////////////////////////////
void CConfInfoType::DelDisconnectedParties()
{
	CUserType* pUser = NULL;
	std::vector<CUserType *>::iterator itr = m_UsersList.begin();
	while (itr != m_UsersList.end())
	{
		pUser = (*itr);
		if (IsValidPObjectPtr(pUser))
		{
			char s[100];
			snprintf(s, ARRAYSIZE(s), "%s, %s", pUser->GetUriAttribute(), pUser->GetPartyStatus());

			if (pUser->IsMarkedForDelete() && pUser->CanDelParty())
			{
				PTRACE2(eLevelInfoNormal, "CConfInfoType::DelDisconnectedParties, deleting: ", s);
				m_UsersList.erase(itr);
				POBJDELETE(pUser);
				itr = m_UsersList.begin();
				UPDATE_STATE;
			}
			else
			{
				PTRACE2(eLevelInfoNormal, "CConfInfoType::DelDisconnectedParties, not deleting: ", s);
				++itr;
			}
		}
		else
		{
			PTRACE(eLevelInfoNormal, "CConfInfoType::DelDisconnectedParties, Invalid pointer.");
			++itr;
		}
	}
}
/////////////////////////////////////////////////////////////////////////////
void CConfInfoType::DelDelletedParties()
{
	CUserType* pUser = NULL;
	std::vector<CUserType *>::iterator itr = m_UsersList.begin();
	while (itr != m_UsersList.end())
	{
		pUser = (*itr);
		if (IsValidPObjectPtr(pUser))
		{
			if (pUser->GetState() == eDelletedData && pUser->IsMarkedForDelete())
			{
				m_UsersList.erase(itr);
				POBJDELETE(pUser);
				itr = m_UsersList.begin();
			}
			else
			{
				++itr;
			}
		}
		else
		{
			PTRACE(eLevelInfoNormal, "CConfInfoType::DelDelletedParties, Invalid pointer.");
			++itr;
		}
	}
}

/////////////////////////////////////////////////////////////////////////////
void CConfInfoType::SetEndPointStatus(DWORD partyId, DWORD status)
{
	CUserType* pUser = FindUser(partyId);
	if(IsValidPObjectPtr(pUser))
	{
		BYTE isChanged = pUser->SetEndPointStatus(status);
		if(isChanged)
			UPDATE_STATE;
	}
	else
		PTRACE(eLevelError, "CConfInfoType::SetEndPointStatus, user not found");
}
/////////////////////////////////////////////////////////////////////////////
void CConfInfoType::SetUserContactInfo(const char* userContactInfo, DWORD partyId)
{
	CUserType* pUser = FindUser(partyId);
	if(IsValidPObjectPtr(pUser))
	{
		pUser->SetUserContactInfo(userContactInfo);
//		UPDATE_STATE;
	}
	else
		PTRACE(eLevelError, "CConfInfoType::SetUserContactInfo, user not found");
}

/////////////////////////////////////////////////////////////////////////////
void CConfInfoType::SetActiveSpeaker(const char* speaker, DWORD partyId)
{
	CUserType* pUser = FindUser(partyId);

//	CUserType* pUser = FindUser(speaker);
//	PTRACE2(eLevelInfoNormal, "CConfInfoType::SetActiveSpeaker, pUser = ", pUser->GetUriAttribute());

	//m_pConfState->SetSpeakerUri(pUser->GetUriAttribute());
	//m_speakerUri = pUser->GetUriAttribute();
//	if(IsValidPObjectPtr(pUser) && strcmp(m_pConfState->GetActiveSpeaker(),speaker) )
	if(IsValidPObjectPtr(pUser) && strcmp(m_pConfExtension->GetActiveSpeaker(),speaker) )
	{
//		m_pConfState->SetActiveSpeaker(speaker,pUser->GetUriAttribute());
		if(strcmp("",speaker))
		{
//			m_pConfState->SetActiveSpeaker(speaker,pUser->GetUriAttribute());
//			m_pConfState->SetSpeakerContactInfo(pUser->GetUserContactInfo());
			m_pConfExtension->SetActiveSpeaker(speaker,pUser->GetUriAttribute());
			m_pConfExtension->SetSpeakerContactInfo(pUser->GetUserContactInfo());
			m_pConfExtension->SetSpeakerPartyId(partyId);
			UPDATE_STATE;
		}
		else
		{
		//	m_pConfState->SetActiveSpeaker(speaker,speaker);
		//	m_pConfState->SetSpeakerContactInfo(speaker);
			m_pConfExtension->SetActiveSpeaker(speaker,speaker);
			m_pConfExtension->SetSpeakerContactInfo(speaker);
			m_pConfExtension->SetSpeakerPartyId(partyId);
		}
	//	pUser->SetMediaStatus(eSendRecv);
	}
}

/////////////////////////////////////////////////////////////////////////////
const char*  CConfInfoType::GetActiveSpeaker() const
{
//	return m_pConfState->GetActiveSpeaker();
	return m_pConfExtension->GetActiveSpeaker();
}
/////////////////////////////////////////////////////////////////////////////
void	CConfInfoType::SetActive(DWORD onOff)
{
//	m_pConfState->SetActive(onOff);
	m_pConfExtension->SetActive(onOff);
}

/////////////////////////////////////////////////////////////////////////////
void CConfInfoType::SetUriAttribute(DWORD partyId, char* uri)
{
	if(uri)
	{
		CUserType* pUser = FindUser(partyId);
		if(IsValidPObjectPtr(pUser))
		{
			pUser->SetUriAttribute(uri);
			UPDATE_STATE;
		}
	}
}

/////////////////////////////////////////////////////////////////////////////
void CConfInfoType::MutePartyMedia(DWORD partyId, eMediaContentType mediaType, BYTE onOff)
{
	CUserType* pUser = FindUser(partyId);
	if(IsValidPObjectPtr(pUser) && pUser->IsMediaMuted(mediaType) != onOff)
	{
		pUser->MuteMedia(mediaType, onOff);
		UPDATE_STATE;
	}
}
/////////////////////////////////////////////////////////////////////////////
void CConfInfoType::MuteViaFocus(DWORD partyId, eMediaContentType mediaType, BYTE mutedViaFocus)
{
	CUserType* pUser = FindUser(partyId);
	if(IsValidPObjectPtr(pUser) && pUser->IsMutedViaFocus(mediaType) != mutedViaFocus)
	{
		pUser->MuteViaFocus(mutedViaFocus,mediaType);
		UPDATE_STATE;
	}
}


// ************************************************************************************
//
//	CConfExtension
//
// ************************************************************************************
/////////////////////////////////////////////////////////////////////////////
CConfExtension::CConfExtension() : CConfPackageType("ex-data"),m_bActive(true),m_confContactInfo("")
{
	m_pActiveSpeaker = new CActiveSpeaker();
}

/////////////////////////////////////////////////////////////////////////////
CConfExtension::CConfExtension(const char* contactInfo,DWORD confId) : CConfPackageType("ex-data"),m_bActive(true), m_confContactInfo(contactInfo),m_confId(confId)
{
	m_pActiveSpeaker = new CActiveSpeaker();

}

/////////////////////////////////////////////////////////////////////////////
CConfExtension::~CConfExtension()
{
	POBJDELETE(m_pActiveSpeaker);
}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
void  CConfExtension::SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull)
{
	CXMLDOMElement*  pFeatureNode = NULL;
//	CXMLDOMElement*  pExDataNode = NULL;

	pFeatureNode = pFatherNode->AddChildNode(m_elementName);

	pFeatureNode->AddChildNode("conf-id",m_confId);
	pFeatureNode->AddChildNode("contact-info",m_confContactInfo);
//	if( strcmp( GetActiveSpeaker(),"" ) )
	if(  0xFFFF != GetSpeakerPartyId()  )
		m_pActiveSpeaker->SerializeXml(pFeatureNode,bFull);

}
/////////////////////////////////////////////////////////////////////////////
void  CConfExtension::SetActiveSpeaker(const char* activeSpeaker,const char* speakerUri)
{
	m_pActiveSpeaker->SetActiveSpeaker(activeSpeaker,speakerUri);

/*
	if(activeSpeaker)
	{
		if(speakerUri)
		{
			m_speakerUri = speakerUri;
		}
		m_activeSpeaker = activeSpeaker;
		if(strcmp("",activeSpeaker))
			UPDATE_STATE;
	}
*/
}

/////////////////////////////////////////////////////////////////////////////
const char* CConfExtension::GetActiveSpeaker() const
{
	return m_pActiveSpeaker->GetActiveSpeaker();
//	return m_activeSpeaker.GetString();
}
/////////////////////////////////////////////////////////////////////////////
const char* CConfExtension::GetSpeakerUri() const
{
	return m_pActiveSpeaker->GetSpeakerUri();
//	return m_speakerUri.GetString();
}
/////////////////////////////////////////////////////////////////////////////
void CConfExtension::SetSpeakerContactInfo(const char* userContactInfo)
{
	if(userContactInfo)
		m_pActiveSpeaker->SetSpeakerContactInfo(userContactInfo);
/*	if(userContactInfo)
		m_speakerContactInfo = userContactInfo;
*/
}
/////////////////////////////////////////////////////////////////////////////
const char* CConfExtension::GetSpeakerContactInfo() const
{
	return m_pActiveSpeaker->GetSpeakerContactInfo();
//	return	m_speakerContactInfo.GetString();
}
/////////////////////////////////////////////////////////////////////////////
void CConfExtension::SetConfContactInfo(const char* contactInfo)
{
	if(contactInfo)
		m_confContactInfo = contactInfo;
}
/////////////////////////////////////////////////////////////////////////////
const char* CConfExtension::GetConfContactInfo() const
{
	return m_confContactInfo.GetString();
}
/////////////////////////////////////////////////////////////////////////////
DWORD 	CConfExtension::GetConfId()
{
	return m_confId;
}

/////////////////////////////////////////////////////////////////////////////
void CConfExtension::SetSpeakerPartyId(DWORD partyId)
{
	m_pActiveSpeaker->SetSpeakerPartyId(partyId);
}
/////////////////////////////////////////////////////////////////////////////
DWORD CConfExtension::GetSpeakerPartyId()
{
	return	m_pActiveSpeaker->GetSpeakerPartyId();

}
/////////////////////////////////////////////////////////////////////////////
void  CConfExtension::SetActive(BYTE onOff)
{
	if(m_bActive != onOff)
	{
		m_bActive = onOff;
//		UPDATE_STATE;
	}
}
/////////////////////////////////////////////////////////////////////////////
BYTE  CConfExtension::GetActive()
{
	return m_bActive;
}

// ************************************************************************************
//
//	CActiveSpeaker
//
// ************************************************************************************
/////////////////////////////////////////////////////////////////////////////
CActiveSpeaker::CActiveSpeaker() : CConfPackageType("active-speaker"),m_speakerUri(""),m_speakerContactInfo(""),m_partyId(0xFFFF)
{

}
/////////////////////////////////////////////////////////////////////////////
CActiveSpeaker::~CActiveSpeaker()
{

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
void  CActiveSpeaker::SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull)
{
	CXMLDOMElement*  pFeatureNode = NULL;
/*****/
	CXMLDOMElement*  pActiveSpeakerNode = NULL;
/*****/
	if(bFull || eNoChange != m_state)
	{

		pFeatureNode = pFatherNode->AddChildNode(m_elementName);

		CXMLDOMAttribute* pUriAttribute = new CXMLDOMAttribute();
		pUriAttribute->set_nodeName("entity");
	//	pUriAttribute->SetValueForElement(GetActiveSpeaker());
		pUriAttribute->SetValueForElement(GetSpeakerUri());
		pFeatureNode->AddAttribute(pUriAttribute);

		pFeatureNode->AddChildNode("party-id",m_partyId);
		pFeatureNode->AddChildNode("contact-info",GetSpeakerContactInfo());

	}

		m_state = eNoChange;

}
/////////////////////////////////////////////////////////////////////////////
void  CActiveSpeaker::SetActiveSpeaker(const char* activeSpeaker,const char* speakerUri)
{
	if(activeSpeaker)
	{
		if(speakerUri)
		{
			m_speakerUri = speakerUri;
		}
		m_activeSpeaker = activeSpeaker;
		if(strcmp("",activeSpeaker))
			UPDATE_STATE;
	}
}
/////////////////////////////////////////////////////////////////////////////
const char* CActiveSpeaker::GetActiveSpeaker() const
{
	return m_activeSpeaker.GetString();
}
/////////////////////////////////////////////////////////////////////////////
const char* CActiveSpeaker::GetSpeakerUri() const
{
	return m_speakerUri.GetString();
}
/////////////////////////////////////////////////////////////////////////////
void CActiveSpeaker::SetSpeakerContactInfo(const char* userContactInfo)
{
	if(userContactInfo)
		m_speakerContactInfo = userContactInfo;

}
/////////////////////////////////////////////////////////////////////////////
const char* CActiveSpeaker::GetSpeakerContactInfo() const
{
	return	m_speakerContactInfo.GetString();

}

/////////////////////////////////////////////////////////////////////////////
void CActiveSpeaker::SetSpeakerPartyId(DWORD partyId)
{
	m_partyId = partyId;
}
/////////////////////////////////////////////////////////////////////////////
DWORD CActiveSpeaker::GetSpeakerPartyId()
{
	return	m_partyId;

}

/*
// ************************************************************************************
//
//	CConfStateType
//
// ************************************************************************************

/////////////////////////////////////////////////////////////////////////////
CConfStateType::CConfStateType() : CConfPackageType("confernce-state"), m_bActive(true),m_speakerContactInfo(""),m_speakerUri("")
{

}

/////////////////////////////////////////////////////////////////////////////
CConfStateType::CConfStateType(CCommConf* pCommConf) : CConfPackageType("confernce-state"), m_bActive(true),m_speakerContactInfo(""),m_speakerUri("")
{


}

/////////////////////////////////////////////////////////////////////////////
CConfStateType::~CConfStateType()
{

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
void  CConfStateType::SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull)
{
	CXMLDOMElement*  pFeatureNode = NULL;

	CXMLDOMElement*  pActiveSpeakerNode = NULL;

	if(bFull || eNoChange != m_state)
	{

		pFeatureNode = pFatherNode->AddChildNode(m_elementName);



	    pActiveSpeakerNode = pFeatureNode->AddChildNode("active-speaker");
		CXMLDOMAttribute* pUriAttribute = new CXMLDOMAttribute();
		pUriAttribute->set_nodeName("entity");
	//	pUriAttribute->SetValueForElement(GetActiveSpeaker());
		pUriAttribute->SetValueForElement(GetSpeakerUri());
		pActiveSpeakerNode->AddAttribute(pUriAttribute);

		pActiveSpeakerNode->AddChildNode("contact-info",GetSpeakerContactInfo());

//		pExDataNode = pFeatureNode->AddChildNode("ex_data");
//		pExDataNode->AddChildNode("contact-info",m_userContactInfo);
//		pExDataNode->AddChildNode("party-id",m_userId);


	}

	m_state = eNoChange;

}
/////////////////////////////////////////////////////////////////////////////
void  CConfStateType::SetActive(BYTE onOff)
{
	if(m_bActive != onOff)
	{
		m_bActive = onOff;
//		UPDATE_STATE;
	}
}
/////////////////////////////////////////////////////////////////////////////
void  CConfStateType::SetActiveSpeaker(const char* activeSpeaker,const char* speakerUri)
{
	if(activeSpeaker)
	{
		if(speakerUri)
		{
			m_speakerUri = speakerUri;
		}
		m_activeSpeaker = activeSpeaker;
		if(strcmp("",activeSpeaker))
			UPDATE_STATE;
	}
}
/////////////////////////////////////////////////////////////////////////////
BYTE  CConfStateType::GetActive()
{
	return m_bActive;
}
/////////////////////////////////////////////////////////////////////////////
const char* CConfStateType::GetActiveSpeaker() const
{
	return m_activeSpeaker.GetString();
}
/////////////////////////////////////////////////////////////////////////////
const char* CConfStateType::GetSpeakerUri() const
{
	return m_speakerUri.GetString();
}
/////////////////////////////////////////////////////////////////////////////
void CConfStateType::SetSpeakerContactInfo(const char* userContactInfo)
{
	if(userContactInfo)
		m_speakerContactInfo = userContactInfo;

}
/////////////////////////////////////////////////////////////////////////////
const char* CConfStateType::GetSpeakerContactInfo() const
{
	return	m_speakerContactInfo.GetString();

}
*/
// ************************************************************************************
//
//	CUserType
//
// ************************************************************************************

/////////////////////////////////////////////////////////////////////////////
CUserType::CUserType():CConfPackageType("user"),m_bIsWebDialInParty(FALSE), m_userId(0),m_bIsAudioOnly(FALSE)/*,m_sendDataBeforeDeleted(eRegular)*/,m_uriAttribute(""),m_userContactInfo("")/*,m_userName("")*/, m_markedforDelete(FALSE)
{
	m_pEndPoint = new CEndPointType();
//	m_pUserActions = new CUserActions();
	m_pPartyExtension= new CPartyExtension();
}

/////////////////////////////////////////////////////////////////////////////
CUserType::CUserType(CConfParty* pConfParty, BOOL bIsWebDialInParty) : CConfPackageType("user"),m_bIsWebDialInParty(bIsWebDialInParty)/*, m_sendDataBeforeDeleted(eRegular)*/, m_markedforDelete(FALSE)
{
	m_userId = pConfParty->GetPartyId();
	m_bIsAudioOnly = pConfParty->GetVoice();
	bool bIsPSTN = NO;

	if(pConfParty->GetUserDefinedInfo(0))
	{
		m_userContactInfo = pConfParty->GetUserDefinedInfo(0);
//		PTRACE2(eLevelInfoNormal,"CUserType::CUserType ,userContactInfo = ",m_userContactInfo.GetString());
	}
	//SIP party
	if(SIP_INTERFACE_TYPE == pConfParty->GetNetInterfaceType())
	{

		const char* pSipUri = pConfParty->GetSipPartyAddress();

/*		if( pSipUri && !strncmp(pSipUri,"pstn_",5) )
		{
			bIsPSTN = YES;
			ALLOCBUFFER(pPSTNSipUri,IP_STRING_LEN);
			if(*pSipUri != '\0')
				strncpy(pPSTNSipUri,pSipUri+5,strlen(pSipUri)-5);

			m_uriAttribute << "sip:" << pPSTNSipUri ;
			if (m_uriAttribute.Find("@")==YES)
			{
				m_uriAttribute << ";user=phone";
			}

			DEALLOCBUFFER(pPSTNSipUri);
		}
*/
//		if(!bIsPSTN)
//		{
			if(*pSipUri != '\0')
			{
				m_uriAttribute << "sip:" << pSipUri;
			}
			else
			{
				char Ip[16];
				Ip[0]='\0';
// IpV6				SystemDWORDToIpString(pConfParty->GetIpAddress(), Ip);
				m_uriAttribute << "sip:" << pConfParty->GetName();
			}
//		}
	}
	else//not SIP party
	{
		//m_isSip = FALSE;
		if(H323_INTERFACE_TYPE ==  pConfParty->GetNetInterfaceType())
		{
			const char* pAlias = pConfParty->GetH323PartyAlias();
			if(pAlias[0] != '\0')
			{
				m_uriAttribute << "sip:" << pAlias;

			}
			else
			{
				char Ip[16];
				Ip[0]='\0';
				m_uriAttribute << "sip:" << pConfParty->GetName();
			}
		}
		else if(ISDN_INTERFACE_TYPE ==  pConfParty->GetNetInterfaceType())
		{
			if(DIAL_OUT == pConfParty->GetConnectionType())
				m_uriAttribute << "sip:" << pConfParty->GetPhoneNumber();
			else
				m_uriAttribute << "sip:" << pConfParty->GetActualPartyPhoneNumber(0)->phone_number;

		}
	}
	PTRACE2(eLevelInfoNormal, "CUserType::CUserType, pUserpSipUri = ", m_uriAttribute.GetString());
	// add the service's sip host name
	if (m_uriAttribute.Find("@")==NO)
	{
		char Ip[16];
		Ip[0]='\0';

		if( ISDN_INTERFACE_TYPE !=  pConfParty->GetNetInterfaceType() )
		{
// IpV6			SystemDWORDToIpString(pConfParty->GetIpAddress(), Ip);
			m_uriAttribute << "@"<< Ip;
		}

		if(H323_INTERFACE_TYPE ==  pConfParty->GetNetInterfaceType())
		{
			m_uriAttribute << ";user=h323";
		}
//		else if( SIP_INTERFACE_TYPE ==  pConfParty->GetNetInterfaceType() && !strncmp(pConfParty->GetName(),"pstn_",5) )
//		else if( SIP_INTERFACE_TYPE ==  pConfParty->GetNetInterfaceType() && bIsPSTN )
		else if( ISDN_INTERFACE_TYPE ==  pConfParty->GetNetInterfaceType() )
		{

			const char * serv_name = pConfParty->GetServiceProviderName ();
			CIpServiceListManager* pIpServiceListManager = ::GetIpServiceListMngr();
			CSmallString	hostName = "";

			if(strlen(serv_name) != 0)
			{
				CConfIpParameters* pServiceParams = NULL;
				pServiceParams = pIpServiceListManager->GetRelevantService(serv_name, pConfParty->GetNetInterfaceType());

				CSmallString	registrarDomainName	= "";
				CSmallString	ProxyName	= "";


				hostName = 	pServiceParams->GetRegistrarDomainName();
				if (hostName.IsEmpty())
					hostName = pServiceParams->GetSipProxyName();


				registrarDomainName = 	pServiceParams->GetRegistrarDomainName();
				ProxyName = pServiceParams->GetSipProxyName();

//				ALLOCBUFFER(ip1, 20);
//				ipAddress localIpAddr = pServiceParams->GetIpV4Address();
//				DWORD serIpAddr = localIpAddr.v4.ip;
//				SystemDWORDToIpString(serIpAddr,ip1);


//				PTRACE2(eLevelInfoNormal, "CUserType::CUserType, registrarDomainName = ", registrarDomainName.GetString());
//				PTRACE2(eLevelInfoNormal, "CUserType::CUserType, ProxyName = ", ProxyName.GetString());

//				PTRACE2(eLevelInfoNormal, "CUserType::CUserType, localIpAddr = ", ip1);
			}


			m_uriAttribute << "@"<< hostName.GetString()<< ";user=phone";
		//	m_uriAttribute << ";user=phone";
		}

	}
/*exten
	m_pUserActions = new CUserActions(m_uriAttribute.GetString());
	m_pUserActions->SetUserActionType(eAdded);
exten*/
	m_pPartyExtension= new CPartyExtension(m_uriAttribute.GetString(),m_userContactInfo.GetString(),m_userId);//exten
//	m_pUserActions->SetUserActionType(eAdded);

	m_pEndPoint = new CEndPointType(m_uriAttribute.GetString()/*,m_bIsAudioOnly*/);
	SetEndPointStatus(pConfParty->GetPartyState());
//	PTRACE2(eLevelInfoNormal, "CUserType::AddUser, SetEndPointStatus to : ", pConfParty->GetPartyState());
//	TRACESTR (eLevelInfoNormal) <<"CUserType::AddUser, SetEndPointStatus to : " << pConfParty->GetPartyState();

//	PTRACE2(eLevelInfoNormal, "CUserType::CUserType, user = ", m_uriAttribute.GetString());
}


/////////////////////////////////////////////////////////////////////////////
CUserType::~CUserType()
{
	POBJDELETE(m_pEndPoint);
/*exten
	POBJDELETE(m_pUserActions);
exten*/
	POBJDELETE(m_pPartyExtension);//exten
}

/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
void CUserType::MarkForDelete()
{
	m_markedforDelete = TRUE;
	m_state = eDelletedData;
//	if(e_Disconnecting == m_pEndPoint->GetEndPointStatus() || e_Disconnected == m_pEndPoint->GetEndPointStatus())
//		m_sendDataBeforeDeleted = eSendNotifyBeforeDelete;

//	if(e_Disconnected == m_pEndPoint->GetEndPointStatus())
//		SetEndPointStatus(PARTY_DELETED_BY_OPERATOR);

/*exten*/
//	m_pUserActions->SetUserActionType(eDeleted);
	m_pPartyExtension->SetUserActionType(eDeleted);
/*exten*/
}

/////////////////////////////////////////////////////////////////////////////
BYTE CUserType::IsMarkedForDelete()
{
	return m_markedforDelete;
}

/////////////////////////////////////////////////////////////////////////////
BYTE CUserType::CanDelParty()
{
	BYTE result = FALSE;

	if(!m_markedforDelete)
	{
		switch(m_pEndPoint->GetEndPointStatus())
		{

			case(e_Pending):
//			case(eBlocked):
//			case(eRemoved):
			{
				result = TRUE;
				break;
			}
//			case(eCalling):
//			case(eAlerting):
			case(e_OnHold):
			case(e_Connected):
			case(e_Disconnecting):
			{
				result = FALSE;
				break;
			}
			default:
				// Note: some enumeration value are not handled in switch. Add default to suppress warning.
				break;
		}
//		if((e_Disconnected == m_pEndPoint->GetEndPointStatus()) &&  eSendNotifyBeforeDelete != m_sendDataBeforeDeleted)
//			result = TRUE;
	}
//	else
//		if(eNotifyWasSent == m_sendDataBeforeDeleted)
//			result = TRUE;

	return result;
}

/////////////////////////////////////////////////////////////////////////////
DWORD CUserType::GetUserId()
{
	return m_userId;
}

/////////////////////////////////////////////////////////////////////////////
const char* CUserType::GetUriAttribute() const
{
	return m_uriAttribute.GetString();
}
/////////////////////////////////////////////////////////////////////////////
const char* CUserType::GetUserContactInfo() const
{
	return m_userContactInfo.GetString();
}
/////////////////////////////////////////////////////////////////////////////
void CUserType::SetUserContactInfo(const char* userContactInfo)
{
	if(userContactInfo)
	{
		m_pPartyExtension->SetUserContactInfo(userContactInfo);
		m_userContactInfo = userContactInfo;
		UPDATE_STATE;
	}
}


/*
/////////////////////////////////////////////////////////////////////////////
const char* CUserType::GetUserName() const
{
	return m_userName.GetString();
}
*/
/////////////////////////////////////////////////////////////////////////////
void  CUserType::SetMediaStatus(eMediaStatusType mediaType)
{
	m_pEndPoint->SetMediaStatus(mediaType);
/*exten
	m_pUserActions->SetUserActionType(eMuteChanged);
exten*/
	m_pPartyExtension->SetUserActionType(eMuteChanged);//exten
}
/////////////////////////////////////////////////////////////////////////////
BYTE CUserType::SetEndPointStatus(DWORD status)
{
//	TRACESTR (eLevelInfoNormal) <<"CUserType::SetEndPointStatus, status =  " << status;

	BYTE isChanged = m_pEndPoint->SetEndPointStatus(status);
//	if(e_Disconnecting == m_pEndPoint->GetEndPointStatus())
//		m_sendDataBeforeDeleted = eSendNotifyBeforeDelete;

	if( (PARTY_DELETED_BY_OPERATOR == status) || (PARTY_IDLE == status && eNoChange != /*m_pUserActions->GetUserActionTypeState(eAdded)*/m_pPartyExtension->GetUserActionTypeState(eAdded)) )
		return false;

	if(isChanged)
	{
		UPDATE_STATE;
//		m_pUserActions->SetUserActionType(eConnectionChanged);
		m_pPartyExtension->SetUserActionType(eConnectionChanged);
		return true;
	}
	return false;
}
/////////////////////////////////////////////////////////////////////////////
void  CUserType::MuteViaFocus(BYTE mutedViaFocus, eMediaContentType mediaType)
{
	m_pEndPoint->MuteViaFocus(mutedViaFocus,mediaType);
	m_pEndPoint->MuteMedia(mediaType,mutedViaFocus);
//	m_pUserActions->SetUserActionType(eMuteChanged);
	m_pPartyExtension->SetUserActionType(eMuteChanged);
	UPDATE_STATE;
}
/////////////////////////////////////////////////////////////////////////////
BYTE  CUserType::IsMutedViaFocus(eMediaContentType mediaType)
{
	return m_pEndPoint->IsMutedViaFocus(mediaType);
}

/////////////////////////////////////////////////////////////////////////////
void CUserType::SetUriAttribute(char* uri)
{
	if(uri)
	{
		m_uriAttribute = uri;
		UPDATE_STATE;
	}
}

/////////////////////////////////////////////////////////////////////////////
char* CUserType::GetPartyStatus() const
{
	return m_pEndPoint->GetEndPointStatusByString();
}


/////////////////////////////////////////////////////////////////////////////
void CUserType::MuteMedia(eMediaContentType mediaType, BYTE onOff)
{
	m_pEndPoint->MuteMedia(mediaType,onOff);
//	m_pUserActions->SetUserActionType(eMuteChanged);
	m_pPartyExtension->SetUserActionType(eMuteChanged);

	UPDATE_STATE;
/*
 	//if muted Audio, set active speaker to false
	if(onOff && eAudio == mediaType)
		SetActiveSpeaker(FALSE);
*/
}
/////////////////////////////////////////////////////////////////////////////
BYTE CUserType::IsMediaMuted(eMediaContentType mediaType)
{
	return m_pEndPoint->IsMuted(mediaType);
}
/////////////////////////////////////////////////////////////////////////////
void CUserType::SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull)
{
	SerializeXml(pFatherNode, bFull, FALSE);
}
/////////////////////////////////////////////////////////////////////////////
BOOL CUserType::GetIsWebDialInParty()
{
	return m_bIsWebDialInParty;
}
/////////////////////////////////////////////////////////////////////////////
void CUserType::SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull, BYTE bIsNewSubscriber)
{
	CXMLDOMElement*  pFeatureNode = NULL;

	CXMLDOMElement*  pExDataNode = NULL;

	if(!WasUpdated())
	{
		PTRACE(eLevelInfoNormal, "CUserType::SerializeXml, not was updated");
		return;
	}

	if(bIsNewSubscriber /*&& eSendNotifyBeforeDelete == m_sendDataBeforeDeleted */&& (e_Disconnected == m_pEndPoint->GetEndPointStatus()))
    {
		PTRACE(eLevelInfoNormal, "CUserType::SerializeXml, not serializing data about disconnected party");
		return;
	}

//	pFeatureNode = pFatherNode->AddChildNode(m_elementName);
	//deleted party
	if(eDelletedData == m_state)
	{
		PTRACE2(eLevelInfoNormal, "CUserType::SerializeXml, deleted user data, user = ", m_uriAttribute.GetString());
		pFeatureNode = pFatherNode->AddChildNode(m_elementName);

		CXMLDOMAttribute* pUriAttribute = new CXMLDOMAttribute();
		pUriAttribute->set_nodeName("entity");
		pUriAttribute->SetValueForElement(m_uriAttribute.GetString());
		pFeatureNode->AddAttribute(pUriAttribute);

		CXMLDOMAttribute* pStateAttribute = new CXMLDOMAttribute();
		pStateAttribute->set_nodeName("state");
		pStateAttribute->SetValueForElement(GetStateByString());
		pFeatureNode->AddAttribute(pStateAttribute);

//		m_pUserActions->SerializeXml(pFeatureNode, bFull);
		m_pPartyExtension->SerializeXml(pFeatureNode, bFull);
/*
		pExDataNode = pFeatureNode->AddChildNode("ex_data");
		pExDataNode->AddChildNode("contact-info",m_userContactInfo);
		pExDataNode->AddChildNode("party-id",m_userId);
*/
		return;
	}


	//Full data
	if(bFull || eFullData == m_state)
	{
		PTRACE2(eLevelInfoNormal, "CUserType::SerializeXml, Full user data, user = ", m_uriAttribute.GetString());
		pFeatureNode = pFatherNode->AddChildNode(m_elementName);

		CXMLDOMAttribute* pUriAttribute = new CXMLDOMAttribute();
		pUriAttribute->set_nodeName("entity");
		pUriAttribute->SetValueForElement(m_uriAttribute.GetString());
		pFeatureNode->AddAttribute(pUriAttribute);

		SerializeState(pFeatureNode, bFull);
		m_pEndPoint->SerializeXml(pFeatureNode, bFull, m_bIsAudioOnly);
//		m_pUserActions->SerializeXml(pFeatureNode, bFull);
		m_pPartyExtension->SerializeXml(pFeatureNode, bFull);
/*
		pExDataNode = pFeatureNode->AddChildNode("ex_data");
		pExDataNode->AddChildNode("contact-info",m_userContactInfo);
		pExDataNode->AddChildNode("party-id",m_userId);
*/

	}
	else
	{
		//Only delta
		if(ePartialData == m_state)
		{
			PTRACE2(eLevelInfoNormal, "CUserType::SerializeXml, Partial user data, user = ", m_uriAttribute.GetString());
			pFeatureNode = pFatherNode->AddChildNode(m_elementName);

			CXMLDOMAttribute* pUriAttribute = new CXMLDOMAttribute();
			pUriAttribute->set_nodeName("entity");
			pUriAttribute->SetValueForElement(m_uriAttribute.GetString());
			pFeatureNode->AddAttribute(pUriAttribute);
/*
			CXMLDOMAttribute* pStateAttribute = new CXMLDOMAttribute();
			pStateAttribute->set_nodeName("state");
			pStateAttribute->SetValueForElement(GetStateByString());
			pFeatureNode->AddAttribute(pStateAttribute);
*/
			SerializeState(pFeatureNode, bFull);

			m_pEndPoint->SerializeXml(pFeatureNode, bFull, m_bIsAudioOnly);
//			m_pUserActions->SerializeXml(pFeatureNode, bFull);
			m_pPartyExtension->SerializeXml(pFeatureNode, bFull);

/*
			pExDataNode = pFeatureNode->AddChildNode("ex_data");
			pExDataNode->AddChildNode("contact-info",m_userContactInfo);
			pExDataNode->AddChildNode("party-id",m_userId);
*/
		}
		}

/*	if(eSendNotifyBeforeDelete == m_sendDataBeforeDeleted && (e_Disconnected == m_pEndPoint->GetEndPointStatus()))
	{
		PTRACE(eLevelInfoNormal, "CUserType::SerializeXml, user marked as 'eNotifyWasSent'.");
		m_sendDataBeforeDeleted = eNotifyWasSent;
	}
*/
}

///////////////////////////////////////////////////////////////////
BYTE CUserType::WasUpdated()
{
	if(TRUE == m_bIsWebDialInParty && 0 == strcmp(m_userContactInfo.GetString(),""))
		return FALSE;

//	TRACESTR (eLevelInfoNormal) <<"CUserType::WasUpdated, bIsWebDialInParty =  " << m_bIsWebDialInParty;
//	TRACESTR (eLevelInfoNormal) <<"CUserType::WasUpdated, userContactInfo =  " << m_userContactInfo.GetString();


	return (eNoChange != m_state);
}


// ************************************************************************************
//
//	CPartyExtension
//
// ************************************************************************************

CPartyExtension::CPartyExtension():CConfPackageType("ex-data"),m_partyId(0),m_userContactInfo("")
{
	m_pUserActions = new CUserActions();

}
/////////////////////////////////////////////////////////////////////////////
CPartyExtension::CPartyExtension(const char* uriAttribute,const char* userContactInfo,DWORD partyId):CConfPackageType("ex-data"),m_partyId(partyId),m_userContactInfo(userContactInfo)
{
	m_pUserActions = new CUserActions(uriAttribute);
	m_pUserActions->SetUserActionType(eAdded);
}
/////////////////////////////////////////////////////////////////////////////
CPartyExtension::~CPartyExtension()
{
	POBJDELETE(m_pUserActions);
}

/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
void CPartyExtension::SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull,WORD bIsAudioOnly)
{
}
/////////////////////////////////////////////////////////////////////////////
void CPartyExtension::SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull)
{
	CXMLDOMElement*  pFeatureNode = NULL;

	PTRACE(eLevelInfoNormal, "CPartyExtension::SerializeXml");

	pFeatureNode = pFatherNode->AddChildNode(m_elementName);
	m_pUserActions->SerializeXml(pFeatureNode, bFull);

	pFeatureNode->AddChildNode("contact-info" , m_userContactInfo);
//	PTRACE2(eLevelInfoNormal,"CPartyExtension::SerializeXml ,userContactInfo = ",m_userContactInfo.GetString());

	pFeatureNode->AddChildNode("party-id" , m_partyId);

}
/////////////////////////////////////////////////////////////////////////////
eTypeState CPartyExtension::GetUserActionTypeState(eActionType actionType)
{
	return m_pUserActions->GetUserActionTypeState(actionType);
}
/////////////////////////////////////////////////////////////////////////////
void CPartyExtension::SetUserActionType(eActionType type)
{
	m_pUserActions->SetUserActionType(type);
}
/////////////////////////////////////////////////////////////////////////////
const char* CPartyExtension::GetUserContactInfo() const
{
	return m_userContactInfo.GetString();
}
/////////////////////////////////////////////////////////////////////////////
void CPartyExtension::SetUserContactInfo(const char* userContactInfo)
{
	if(userContactInfo)
	{
		m_userContactInfo = userContactInfo;
	}
}

/////////////////////////////////////////////////////////////////////////////
DWORD CPartyExtension::GetPartyId()
{
	return m_partyId;
}

// ************************************************************************************
//
//	CUserActions
//
// ************************************************************************************
CUserActions::CUserActions():CConfPackageType("user-actions"), m_userEntity("")
{
	for(int i=0; i<NUM_OF_ACTIONS; i++)
		m_pActionStream[i] = NULL;
}
/////////////////////////////////////////////////////////////////////////////
CUserActions::CUserActions(const char*  userEntity):CConfPackageType("user-actions"), m_userEntity(userEntity)
{
	for(int i=0; i<NUM_OF_ACTIONS; i++)
		m_pActionStream[i] = NULL;

	m_pActionStream[0] = new CActionType(eConnectionChanged);
	m_pActionStream[1] = new CActionType(eMuteChanged);
	m_pActionStream[2] = new CActionType(eAdded);
	m_pActionStream[3] = new CActionType(eDeleted);
}
/////////////////////////////////////////////////////////////////////////////
CUserActions::~CUserActions()
{
	for(int i=0; i<NUM_OF_ACTIONS; i++)
		if(m_pActionStream[i])
			POBJDELETE(m_pActionStream[i]);

}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
void	CUserActions::SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull)
{
	CXMLDOMElement*  pFeatureNode = NULL;
	if(eNoChange != m_state)
	{
		pFeatureNode = pFatherNode->AddChildNode(m_elementName);

		for(int i=0; i<NUM_OF_ACTIONS; i++)
		{
			if(m_pActionStream[i])
			{
//				PTRACE2(eLevelInfoNormal, "CUserActions::SerializeXml, action type = ",m_pActionStream[i]->GetActionTypeAsString());
				m_pActionStream[i]->SerializeXml(pFeatureNode, bFull);
			}
		}
	}

	m_state = eNoChange;
}

/////////////////////////////////////////////////////////////////////////////
void	CUserActions::SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull,WORD bIsAudioOnly)
{

}
/////////////////////////////////////////////////////////////////////////////
void 	CUserActions::SetUserActionType(eActionType actionType)
{
	for(int i=0; i<NUM_OF_ACTIONS ; i++)
	{
		if(m_pActionStream[i]->GetActionType() == actionType)
		{
			m_pActionStream[i]->SetActionTypeStatus(actionType);
		}
	}
	UPDATE_STATE;
}
/////////////////////////////////////////////////////////////////////////////
eTypeState CUserActions::GetUserActionTypeState(eActionType actionType)
{
	switch(actionType)
	{
		case(eConnectionChanged):
			return m_pActionStream[0]->GetState();

		case(eMuteChanged):
			return m_pActionStream[1]->GetState();

		case(eAdded):
			return m_pActionStream[2]->GetState();

		case(eDeleted):
			return m_pActionStream[3]->GetState();

		default:
			return eNoChange;

	}
}
// ************************************************************************************
//
//	CActionType
//
// ************************************************************************************
/////////////////////////////////////////////////////////////////////////////
CActionType::CActionType() : CConfPackageType("action"), m_ActionType(eActionNoChanged)
{
	m_state = eNoChange;
}

/////////////////////////////////////////////////////////////////////////////
CActionType::CActionType(eActionType actionType) : CConfPackageType("action"),m_ActionType(actionType)
{
	m_state = eNoChange;
}

/////////////////////////////////////////////////////////////////////////////
CActionType::~CActionType()
{

}

/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
void CActionType::SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull)
{
	CXMLDOMElement*  pFeatureNode = NULL;
//	PTRACE2(eLevelInfoNormal, "CActionType::SerializeXml, action type = ",GetActionTypeAsString());
	if(eNoChange != m_state) /*&& (eActionNoChanged != m_ActionType))*/
	{
		pFeatureNode = pFatherNode->AddChildNode(m_elementName,GetActionTypeAsString());
		//pFeatureNode->SetValue(GetActionTypeAsString());
	}
	m_state = eNoChange;
}

/////////////////////////////////////////////////////////////////////////////
eActionType CActionType::GetActionType()
{
	return m_ActionType;
}

/////////////////////////////////////////////////////////////////////////////
const char* CActionType::GetActionTypeAsString()
{
	switch(m_ActionType)
	{
		case(eConnectionChanged):
			return "connection-changed";

		case(eMuteChanged):
			return "mute-changed";

		case(eSpeakerChanged):
			return "speaker-changed";

		case(eActionNoChanged):
			return "action-no-changed";

		case(eAdded):
			return "added";

		case(eDeleted):
			return "deleted";

		default:
			return "action-no-changed";
	}
}
/////////////////////////////////////////////////////////////////////////////
void CActionType::SetActionType(eActionType actionType)
{
	m_ActionType = actionType;
	UPDATE_STATE;

}

/////////////////////////////////////////////////////////////////////////////
void CActionType::SetActionTypeStatus(eActionType actionType)
{
	if(actionType == m_ActionType)
	{
		UPDATE_STATE;
	}
}
// ************************************************************************************
//
//	CEndPointType
//
// ************************************************************************************

/////////////////////////////////////////////////////////////////////////////
CEndPointType::CEndPointType():CConfPackageType("endpoint"), m_endpointEntity(""),  m_EndPointStatus(e_Pending) ,m_audioMutedViaFocus(false) ,m_videoMutedViaFocus(false)
{
//	CMediaType*	m_pMedia = new CMediaType();
	for(int i=0; i<NUM_OF_MEDIA; i++)
		m_pMediaStream[i] = NULL;
}

/////////////////////////////////////////////////////////////////////////////
CEndPointType::CEndPointType(const char*  endpointUri/*,WORD isAudioOnly*/):CConfPackageType("endpoint"), m_endpointEntity(endpointUri), m_EndPointStatus(e_Pending)
																			,m_audioMutedViaFocus(false) ,m_videoMutedViaFocus(false)
{
//	CMediaType*	m_pMedia = new CMediaType();
	for(int i=0; i<NUM_OF_MEDIA; i++)
		m_pMediaStream[i] = NULL;

	m_pMediaStream[0] = new CMediaType(eAudio);
	int i = 1;

	m_pMediaStream[i] = new CMediaType(eVideoT);
//	if(isAudioOnly)
//		m_pMediaStream[i]->SetMediaStatus(eInactive);
	i++;
}

/////////////////////////////////////////////////////////////////////////////
CEndPointType::~CEndPointType()
{
	for(int i=0; i<NUM_OF_MEDIA; i++)
		if(m_pMediaStream[i])
			POBJDELETE(m_pMediaStream[i]);

}

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
const char* CEndPointType::GetEndpointUri()
{
	return m_endpointEntity.GetString();
}
/////////////////////////////////////////////////////////////////////////////
void	CEndPointType::SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull)
{

}
/////////////////////////////////////////////////////////////////////////////
void	CEndPointType::SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull, WORD bIsAudioOnly)
{
	CXMLDOMElement*  pFeatureNode = NULL;
	//Full data
	if(bFull || eFullData == m_state)
	{
		PTRACE2(eLevelInfoNormal, "CEndPointType::SerializeXml, Full endpoint data, user = ", m_endpointEntity.GetString());
		pFeatureNode = pFatherNode->AddChildNode(m_elementName);

		//pFeatureNode->AddChildNode("endpoint");

		CXMLDOMAttribute* pAttribute = new CXMLDOMAttribute();
		pAttribute->set_nodeName("entity");
		pAttribute->SetValueForElement(m_endpointEntity.GetString());
		pFeatureNode->AddAttribute(pAttribute);

		pFeatureNode->AddChildNode("status", GetEndPointStatusByString());


/*
 		//Notify about disconnection status only if regular status is disconnection
		if(eNotDisconnected != m_disconnectReason)
			if(eDisconnecting == m_status || eDisconnected == m_status || eRemoved == m_status)
				pFeatureNode->AddChildNode("disconnect-reason", GetPartyDisconnectReason());

		if(m_activelyTalking)
			pFeatureNode->AddChildNode("actively-talking", "true");
		else
			pFeatureNode->AddChildNode("actively-talking", "false");

*/

	//	m_pMedia->SerializeXml(pFeatureNode, bFull);
		for(int i=0; i<NUM_OF_MEDIA; i++)
		{
			if(m_pMediaStream[i])
				m_pMediaStream[i]->SerializeXml(pFeatureNode, bFull);

			if(bIsAudioOnly)
				break;
		}

	}
	else
	{
		//Only delta
		if(ePartialData == m_state)
		{
			PTRACE2(eLevelInfoNormal, "CEndPointType::SerializeXml, Partial endpoint data, user = ", m_endpointEntity.GetString());
			pFeatureNode = pFatherNode->AddChildNode(m_elementName);
			pFeatureNode->AddChildNode("status", GetEndPointStatusByString());

			for(int i=0; i<NUM_OF_MEDIA; i++)
			{
				if(m_pMediaStream[i])
					m_pMediaStream[i]->SerializeXml(pFeatureNode, bFull);

				if(bIsAudioOnly)
					break;
			}

		}
	}

	m_state = eNoChange;
}
/////////////////////////////////////////////////////////////////////////////
eEndPointStatusType	CEndPointType::GetEndPointStatus()
{
	return m_EndPointStatus;
}
/////////////////////////////////////////////////////////////////////////////
BYTE	CEndPointType::SetEndPointStatus(DWORD status)
{
	eEndPointStatusType previousStatus = m_EndPointStatus;
	switch(status)
	{
		case(PARTY_IDLE):
		case(PARTY_STAND_BY):
		case(PARTY_WAITING_FOR_DIAL_IN):
			m_EndPointStatus = e_Pending;
			break;
//		case(PARTY_CONNECTING):
//		case(PARTY_REDIALING):
//			m_EndPointStatus = eCalling;
//			break;
		case(PARTY_CONNECTED):
		case(PARTY_CONNECTED_PARTIALY):
		case(PARTY_SECONDARY):
		case(PARTY_CONNECTED_WITH_PROBLEM):
			m_EndPointStatus = e_Connected;
			break;
		case(PARTY_DISCONNECTING):
			m_EndPointStatus = e_Disconnecting;
			break;
		case(PARTY_DISCONNECTED):
			m_EndPointStatus = e_Disconnected;
			break;
//		case(PARTY_DELETED_BY_OPERATOR):
//			m_EndPointStatus = eRemoved;
//			break;
	}

/*	if(STATUS_PARTY_ONHOLD == attendedStatus && eConnected == m_EndPointStatus)
		m_status = eOnHold;*/ //************
	if(previousStatus != m_EndPointStatus)
	{
		UPDATE_STATE;
		return true;
	}
	return false;
}
/////////////////////////////////////////////////////////////////////////////
void  CEndPointType::MuteViaFocus(BYTE mutedViaFocus, eMediaContentType mediaType)
{
	if (true == mutedViaFocus)
	{
		m_EndPointStatus = e_MutedViaFocus;
		if( eAudio == mediaType )
			m_audioMutedViaFocus = true;
		else
			m_videoMutedViaFocus = true;
	}
	else
	{
		m_EndPointStatus = e_Connected;
		if( eAudio == mediaType )
			m_audioMutedViaFocus = false;
		else
			m_videoMutedViaFocus = false;

	}
	UPDATE_STATE;
}
/////////////////////////////////////////////////////////////////////////////
BYTE  CEndPointType::IsMutedViaFocus(eMediaContentType mediaType)
{
	if(e_MutedViaFocus == m_EndPointStatus)
		if( (eAudio == mediaType && true == m_audioMutedViaFocus) || (eVideoT == mediaType && true == m_videoMutedViaFocus))
			return true;

	return false;
}
/////////////////////////////////////////////////////////////////////////////
char*	CEndPointType::GetEndPointStatusByString() const
{
	switch(m_EndPointStatus)
	{
		case(e_Pending):
			return "pending";

		case(e_DialingOut):
			return "dialing-out";

		case(e_DialingIn):
			return "dialing-in";

		case(e_OnHold):
			return "on-hold";

		case(e_Connected):
			return "connected";

		case(e_Disconnecting):
			return "disconnecting";

		case(e_Disconnected):
			return "disconnected";

		case(e_Alerting):
			return "alerting";

		case(e_MutedViaFocus):
			return "muted-via-focus";

		default:
			return "unknown";
	}

}
/////////////////////////////////////////////////////////////////////////////
void  CEndPointType::SetMediaStatus(eMediaStatusType mediaStatus)
{
	for(int i=0; i<NUM_OF_MEDIA; i++)
	{
		if(m_pMediaStream[i])
		{
				m_pMediaStream[i]->SetMediaStatus(mediaStatus);
				UPDATE_STATE;
				break;
		}
	}
}
/////////////////////////////////////////////////////////////////////////////
void	CEndPointType::MuteMedia(eMediaContentType mediaType,BYTE onOff)
{
	for(int i=0; i<NUM_OF_MEDIA; i++)
	{
		if(m_pMediaStream[i])
			if(m_pMediaStream[i]->GetContent() == mediaType && onOff != m_pMediaStream[i]->IsMuted())
			{
				m_pMediaStream[i]->MuteMedia(onOff);
				UPDATE_STATE;
				break;
			}
	}
}
/////////////////////////////////////////////////////////////////////////////
BYTE	CEndPointType::IsMuted(eMediaContentType mediaType)
{
	BYTE result = FALSE;
	for(int i=0; i<NUM_OF_MEDIA; i++)
	{
		if(m_pMediaStream[i])
			if(m_pMediaStream[i]->GetContent() == mediaType)
			{
				result = m_pMediaStream[i]->IsMuted();
				break;
			}
	}
	return result;

}


// ************************************************************************************
//
//	CMediaType
//
// ************************************************************************************

/////////////////////////////////////////////////////////////////////////////
CMediaType::CMediaType() : CConfPackageType("media"), m_MediaStatus(eSendRecv), m_MediaContent(eAudio)
{
}

/////////////////////////////////////////////////////////////////////////////
CMediaType::CMediaType(eMediaContentType mediaContent,eMediaStatusType mediaStatus) : CConfPackageType("media"), m_MediaStatus(mediaStatus),m_MediaContent(mediaContent)
{

}

/////////////////////////////////////////////////////////////////////////////
CMediaType::~CMediaType()
{

}

/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
void CMediaType::SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull)
{

	CXMLDOMElement*  pFeatureNode = NULL;

	if(bFull || eNoChange != m_state)
	{

		pFeatureNode = pFatherNode->AddChildNode(m_elementName);

		CXMLDOMAttribute* pIdAttribute = new CXMLDOMAttribute();
		pIdAttribute->set_nodeName("id");
		if(eAudio == GetContent())
		{
			pIdAttribute->SetValueForElement("1");
		}
		else
		{
			if(eVideoT == GetContent())
				pIdAttribute->SetValueForElement("2");
		}
		pFeatureNode->AddAttribute(pIdAttribute);

		pFeatureNode->AddChildNode("type",GetContentAsString());
		//		pFeatureNode->SetValue(GetContentAsString());


		pFeatureNode->AddChildNode("status",GetMediaStatusAsString());
//		pFeatureNode->SetValue(GetMediaStatusAsString());
	}
	m_state = eNoChange;
}

/////////////////////////////////////////////////////////////////////////////
eMediaStatusType CMediaType::GetMediaStatus()
{
	return m_MediaStatus;
}

/////////////////////////////////////////////////////////////////////////////
const char* CMediaType::GetMediaStatusAsString()
{
	switch(m_MediaStatus)
	{
		case(eRecvOnly):
			return "recvonly";

//		case(eSendOnly):
//			return "sendonly";

		case(eSendRecv):
			return "sendrecv";

		case(eInactive):
			return "inactive";

		default:
			return "sendrecv";
	}
}
/////////////////////////////////////////////////////////////////////////////
const char* CMediaType::GetContentAsString()
{
	switch(m_MediaContent)
	{
		case(eVideoT):
			return "video";

		case(eAudio):
		default:
			return "audio";
	}
}
/////////////////////////////////////////////////////////////////////////////
eMediaContentType CMediaType::GetContent()
{
	return m_MediaContent;
}

/////////////////////////////////////////////////////////////////////////////
void   CMediaType::SetMediaStatus(eMediaStatusType mediaType)
{
	m_MediaStatus = mediaType;
}
/////////////////////////////////////////////////////////////////////////////
void CMediaType::MuteMedia(BYTE onOff)
{
	if(onOff)
		m_MediaStatus = eRecvOnly;
	else
		m_MediaStatus = eSendRecv;
	UPDATE_STATE;
}

/////////////////////////////////////////////////////////////////////////////
BYTE CMediaType::IsMuted()
{
	if(eRecvOnly == m_MediaStatus)
		return true;

	return false;
}

/////////////////////////////////////////////////////////////////////////////
WORD operator==(const CUserType& first,const CUserType& second)
{
	WORD    rval = 0;

	if ( first.m_userId == second.m_userId)
		rval = 1;

	return rval;
}

#endif
