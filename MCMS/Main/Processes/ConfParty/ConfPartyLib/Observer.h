

//=================================================================================================
//
//Copyright (C) 2005 POLYCOM
//This file contains confidential information proprietary to ACCORD Networks Ltd. The use or 
//disclosure of any information contained in this file without the written consent of an officer of
//ACCORD Networks Ltd. is expressly forbidden.
//
//=================================================================================================

//=================================================================================================
//
//Module Name:  Observer.h
//
//General Description:  
//
//    1.	Implementation of OBSERVER PATTERN
//
//Generated By: Ori P.                            Date: 2.03.05
//
//Revisions and Updates: 
//
//Date         Updated By         Description
//========   ==============   =====================================================================
// 
//=================================================================================================





#ifndef C_OBSERVER
#define C_OBSERVER

//===== Include Files =====
#include <vector>
#include "PObject.h"
#include "OsQueue.h"

//******** subscribe events

#define CONF_LOCK	100
#define CONF_ACTIVE	101
#define PARTY_ADDED	102
#define PARTY_DELETED	103


class CTaskApi;



// ************************************************************************************
//
//	CObserverInfo
//
// ************************************************************************************


class CObserverInfo : public CPObject
{
	CLASS_TYPE_1(CObserverInfo,CPObject)
        ;

	CObserverInfo();
	CObserverInfo(void* pObserver, WORD event, WORD type=0, DWORD observerInfo1=0);
	virtual const char* NameOf() const { return "CObserverInfo";}
	virtual ~CObserverInfo();


	friend WORD operator==(const CObserverInfo& first,const CObserverInfo& second);

	void*	GetObserver();
	WORD	GetEvent();
	WORD	GetType();
	DWORD	GetObserverInfo1();

protected:
	
	void*	m_pObserver;
	WORD	m_event;
	WORD	m_type;
	DWORD	m_observerInfo1;
};



// ************************************************************************************
//
//	CAbstractSubject
//
// ************************************************************************************


class CAbstractSubject : public CPObject
{
	CLASS_TYPE_1(CAbstractSubject,CPObject)
		
	CAbstractSubject();
	virtual ~CAbstractSubject();

	virtual const char* NameOf() const { return "CAbstractSubject";}

	virtual DWORD	AttachObserver(void* pObserver, WORD event, WORD type=0, DWORD observerInfo1=0) = 0;
	virtual int     DetachObserver(void* pObserver);
	virtual int		DetachObserver(void* pObserver, WORD event, WORD type, DWORD observerInfo1);
	virtual void	Notify(WORD event, DWORD val) = 0;
	const char* 	EventToString(const WORD event);
protected:
	
	std::vector< CObserverInfo * >	m_ObserversList;

};


// ************************************************************************************
//
//	CSubject
//
// ************************************************************************************


class CSubject : public CAbstractSubject
{
	CLASS_TYPE_1(CSubject,CAbstractSubject)
		
	CSubject();
	CSubject(CTaskApi* pMockApi);
	virtual ~CSubject();
	virtual const char* NameOf() const { return "CSubject";}


	virtual DWORD	AttachObserver(void* pObserver, WORD event, WORD type=0, DWORD observerInfo1=0);
	virtual int     DetachObserver(void* pObserver);
	virtual int		DetachObserver(COsQueue* pObserver, WORD event, WORD type, DWORD observerInfo1);
	virtual void	Notify(WORD event, DWORD val);

protected:
	
	const char*		EventToString(const WORD event);
	const char* 	TypeToString(const WORD type);

	CTaskApi*	m_pTaskApi;
};


#endif
