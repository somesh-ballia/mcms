// RsrvParty.cpp: implementation of the CRsrvParty class.
//
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//
//Date         Updated By         Description
//
//3/6/05		Yoella			  Porting to Carmel
//========   ==============   =====================================================================


#include <string.h>
#include "NStream.h"
#include "RsrvParty.h"
#include "psosxml.h"
#include "VideoLayout.h"
#include "DefinesGeneral.h"
#include "StatusesGeneral.h"
#include "ConfPartyDefines.h"
#include "DefinesIpService.h"
#include "AudHostApiDefinitions.h"

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
CRsrvParty::CRsrvParty()
{
	m_phoneNumber[0]    = '\0';
	m_H243_partyName[0] = '\0';
	m_partyId           = 0xFFFFFFFF;
	m_connectionType    = DIAL_OUT;
	/*m_nodeType          = 1;
	m_H243_password[0]  = '\0';
	//strncpy(m_H243_password, "1234",H243_NAME_LEN);
	m_chair             = NO;
	m_bondingMode1      = NO;
	*/
	m_netChannelNumber  = 1;
	/*
	m_netChannelWidth   = Xfer_64;
	m_passiveParty      = NO;
*/
	m_netServiceProviderName[0] = '\0';
	//m_netSpecification = 0;
/*	m_restrict             = AUTO;
	*/

	m_voice                = NO;
	/*m_AGC                  = NO;*/
	m_audioThreshold       = 5;
	
	m_netSubService[0]     = '\0';
	m_backupService[0]     = '\0';
	m_backupSubService[0]  = '\0';
	m_identificationMethod = CALLED_PHONE_NUMBER_IDENTIFICATION_METHOD;
	m_meet_me_method       = MEET_ME_PER_USER;
	//m_numType              = 0xFF;
	
	int i;
	for (i = 0; i<MAX_CHANNEL_NUMBER; i++) 
	{
		m_pCallingPhoneNumberList[i] = NULL;
		m_pCalledPhoneNumberList[i] = NULL;
	}
	m_numCallingPhones     = 0;
	m_numCalledPhones      = 0;
	m_netInterfaceType     = ISDN_INTERFACE_TYPE;
	
//	m_multiRateMode        = AUTO;
	m_ipAddress          = 0;
	m_callSignallingPort = 1720;
	m_videoProtocol      = AUTO;
//	m_encryption		 = AUTO;
	m_videoRate          = 0xFFFFFFFF;
//	m_bondingPhoneNumber.phone_number[0] = '\0';
	m_h323PartyAliasType = PARTY_H323_ALIAS_H323_ID_TYPE;
	m_h323PartyAlias[0]  ='\0';
	m_sipPartyAddressType = PARTY_SIP_SIPURI_ID_TYPE;
	m_sipPartyAddress[0]  ='\0';
	
	m_audioVolume        = 5;
    m_listening_audioVolume = 5;
	m_autoDetect         = NO;
	
	m_undefinedType      = NO;
	/*
	m_high_qualityVideo  = NO;
	*/
	m_slowInfoMask.SetAllBitsOff();
	m_slow1InfoMask.SetAllBitsOff();
	m_fastInfoMask.SetAllBitsOff();
	m_addPartyMask.SetAllBitsOn();
	m_completeInfoMask.SetAllBitsOn();
	
	m_slowInfoFlag  = FALSE;
	m_fastInfoFlag  = FALSE;
	m_slow1InfoFlag = FALSE;
	m_completeInfoFlag	= FALSE;
	
	m_slowUpdateCounter=0; 
	m_fastUpdateCounter=0; 
	m_slow_1_UpdateCounter=0;
	m_slowUpdateCounter=0;
	m_completeUpdateCounter=0;

    m_CreationUpdateCounter=0;
  

	m_infoOpcode    = PARTY_COMPLETE_INFO;
	
	m_refferedToUri[0] = '\0';
	m_refferedByUri[0] = '\0';
	
	m_extension[0]  = '\0';
	/*m_recording_port   = NO;
	
	*/
	m_indCalling        = 0;
	m_indCalled         = 0;
	/*
	m_pQualityOfService = new CQualityOfService;
	// 28.10.03 Vasily - CQualityOfService used in H323 service and RsrvParty.
	//  Default status in both was 'disabled'. Bug #12936 - they want that when
	//  connect party, it'll take QoS from service by default. I cannot change
	//  status default in constructor, because CQualityOfService in service
	//  have not such option ( 'take from service' )
	m_pQualityOfService->SetIpStatus((BYTE)CQualityOfService::eQoS_service);
	m_pQualityOfService->SetAtmStatus((BYTE)CQualityOfService::eQoS_service);

    */
  // Private layout ///
	for (i=0;i<MAX_VIDEO_LAYOUT_NUMBER;i++)
		m_pPrivateVideoLayout[i] = NULL;
	
	m_ind_prv_vid_layout    = 0;
	m_numPrivateVideoLayout = 0;
	m_isPrivate             = NO;
	
//	m_pUserDefinedInfo = new CUserDefinedInfo;
	m_isVip					= 0;
//	m_defaultTemplate = NO;
	m_pRes=NULL;
	m_EnableH323_PSTN = NO;
	m_isRecordingLinkParty	= 0;
	m_UserIdentifierString[0]= '\0';

}

/////////////////////////////////////////////////////////////////////////////
CRsrvParty::CRsrvParty(const CRsrvParty &other)
:CSerializeObject(other)
{
	int i;
	for ( i=0;i<MAX_CHANNEL_NUMBER;i++)
	{
		m_pCallingPhoneNumberList[i] = NULL;
		m_pCalledPhoneNumberList[i] = NULL;
	}
	/*m_pQualityOfService = new CQualityOfService;
	// 28.10.03 Vasily - CQualityOfService used in H323 service and RsrvParty.
	//  Default status in both was 'disabled'. Bug #12936 - they want that when
	//  connect party, it'll take QoS from service by default. I cannot change
	//  status default in constructor, because CQualityOfService in service
	//  have not such option ( 'take from service' )
	m_pQualityOfService->SetIpStatus((BYTE)CQualityOfService::eQoS_service);
	m_pQualityOfService->SetAtmStatus((BYTE)CQualityOfService::eQoS_service);

	m_pUserDefinedInfo   = new CUserDefinedInfo;
	*/
	// Private layout ////
	for (i=0;i<MAX_VIDEO_LAYOUT_NUMBER;i++)
	{
		m_pPrivateVideoLayout[i]=NULL;
	}
	m_pRes=NULL;
	
	*this = other;
}

/////////////////////////////////////////////////////////////////////////////
CRsrvParty& CRsrvParty::operator = (const CRsrvParty &other)
{
	
	//old
	strncpy(m_phoneNumber,other.m_phoneNumber,PHONE_NUMBER_DIGITS_LEN);
	
	//new
	strncpy(m_H243_partyName, other.m_H243_partyName,H243_NAME_LEN);

	m_partyId               = other.m_partyId;
	m_connectionType        = other.m_connectionType;
	/*m_nodeType              = other.m_nodeType;

	strncpy(m_H243_password, other.m_H243_password,H243_NAME_LEN);
	
	m_chair                 = other.m_chair;
	m_bondingMode1          = other.m_bondingMode1;
	*/
	m_netChannelNumber      = other.m_netChannelNumber;
	/*
	m_netChannelWidth       = other.m_netChannelWidth;
	m_passiveParty          = other.m_passiveParty;
*/
	strncpy(m_netServiceProviderName,
			other.m_netServiceProviderName,	NET_SERVICE_PROVIDER_NAME_LEN);
/*	

	//m_netSpecification = other.m_netSpecification;
	m_restrict              = other.m_restrict;
	*/m_voice                 = other.m_voice;
	/*m_AGC                   = other.m_AGC;*/
	m_audioThreshold        = other.m_audioThreshold;

	strncpy(m_netSubService, other.m_netSubService,NET_SERVICE_PROVIDER_NAME_LEN);
	strncpy(m_backupService, other.m_backupService,NET_SERVICE_PROVIDER_NAME_LEN);
	strncpy(m_backupSubService, other.m_backupSubService,NET_SERVICE_PROVIDER_NAME_LEN);
	m_identificationMethod  = other.m_identificationMethod;
	m_meet_me_method        = other.m_meet_me_method;
	//m_numType               = other.m_numType;
	
	m_numCallingPhones      = other.m_numCallingPhones;
	m_numCalledPhones       = other.m_numCalledPhones;
	m_netInterfaceType      = other.m_netInterfaceType;
	//m_multiRateMode         = other.m_multiRateMode;
	
	m_ipAddress             = other.m_ipAddress;
	m_callSignallingPort    = other.m_callSignallingPort;
	m_videoProtocol         = other.m_videoProtocol;
	//m_encryption			= other.m_encryption;
	m_videoRate             = other.m_videoRate;

	/*strncpy(m_bondingPhoneNumber.phone_number,
			other.m_bondingPhoneNumber.phone_number,
			PHONE_NUMBER_DIGITS_LEN);
*/
	m_h323PartyAliasType    = other.m_h323PartyAliasType;
	strncpy(m_h323PartyAlias,other.m_h323PartyAlias,IP_STRING_LEN);

	m_sipPartyAddressType   = other.m_sipPartyAddressType;
	strncpy(m_sipPartyAddress,other.m_sipPartyAddress,IP_STRING_LEN);
	
	m_audioVolume           = other.m_audioVolume;
    m_listening_audioVolume = other.m_listening_audioVolume;
	m_autoDetect            = other.m_autoDetect;
	m_undefinedType         = other.m_undefinedType;
	/*
	m_high_qualityVideo     = other.m_high_qualityVideo;
	*/
	int i;
	for (i=0;i<MAX_CHANNEL_NUMBER;i++) 
	{
		PDELETE(m_pCallingPhoneNumberList[i]);
		PDELETE(m_pCalledPhoneNumberList[i]);
	}
	
	for (i=0;i<MAX_CHANNEL_NUMBER;i++)
	{
		if( other.m_pCallingPhoneNumberList[i]==NULL)
			m_pCallingPhoneNumberList[i]=NULL;
		else
			m_pCallingPhoneNumberList[i]= new Phone(*other.m_pCallingPhoneNumberList[i]);
		
		if( other.m_pCalledPhoneNumberList[i]==NULL)
			m_pCalledPhoneNumberList[i]=NULL;
		else
			m_pCalledPhoneNumberList[i]= new Phone(*other.m_pCalledPhoneNumberList[i]);
	}

	m_slowInfoMask        = other.m_slowInfoMask;
	m_slow1InfoMask       = other.m_slow1InfoMask;
	m_fastInfoMask        = other.m_fastInfoMask;
	m_addPartyMask        = other.m_addPartyMask;
	m_completeInfoMask       = other.m_completeInfoMask;
                          
	m_slowInfoFlag        = other.m_slowInfoFlag;
	m_fastInfoFlag        = other.m_fastInfoFlag;
	m_slow1InfoFlag       = other.m_slow1InfoFlag;
	m_completeInfoFlag		  = other.m_completeInfoFlag;

	m_slowUpdateCounter		=other.m_slowUpdateCounter; 
	m_fastUpdateCounter		=other.m_fastUpdateCounter; 
	m_slow_1_UpdateCounter	=other.m_slow_1_UpdateCounter;
	m_slowUpdateCounter		=other.m_slowUpdateCounter;
	m_completeUpdateCounter		=other.m_completeUpdateCounter;
    m_CreationUpdateCounter =other.m_CreationUpdateCounter;
                       
	m_infoOpcode          = other.m_infoOpcode;
	strncpy(m_refferedToUri, other.m_refferedToUri, IP_STRING_LEN);
	
	strncpy(m_extension, other.m_extension, PARTY_EXTENSION_LENGTH);
	/*
	*m_pQualityOfService  =  *other.m_pQualityOfService;
	*m_pUserDefinedInfo    =  *other.m_pUserDefinedInfo;
	m_recording_port      =  other.m_recording_port;
	
	
	m_webUserId           =  other.m_webUserId;
	m_PnEpId              =  other.m_PnEpId;
	*/
	m_indCalling          = other.m_indCalling;
	m_indCalled           = other.m_indCalled;

	// Private layout ////
	for (i=0;i<MAX_VIDEO_LAYOUT_NUMBER;i++)
	{
		POBJDELETE(m_pPrivateVideoLayout[i]); // To avoid any leaks !!!
		
		if( other.m_pPrivateVideoLayout[i]==NULL)
			m_pPrivateVideoLayout[i]=NULL;
		else  {
			m_pPrivateVideoLayout[i]= new CVideoLayout(*other.m_pPrivateVideoLayout[i]);
		}
	}
	
	m_ind_prv_vid_layout    = other.m_ind_prv_vid_layout;
	m_numPrivateVideoLayout = other.m_numPrivateVideoLayout;
	m_isPrivate             = other.m_isPrivate;
	//m_defaultTemplate = other.m_defaultTemplate;
	m_isVip					= other.m_isVip;
	m_EnableH323_PSTN = other.m_EnableH323_PSTN;
	m_isRecordingLinkParty	= other.m_isRecordingLinkParty;
//	strncpy(m_UserIdentifierString,other.m_UserIdentifierString,USER_IDENTIFIER_STRING_LEN);

	return *this;
}

/////////////////////////////////////////////////////////////////////////////
CRsrvParty::~CRsrvParty()
{
	int i;
	for (i=0;i<MAX_CHANNEL_NUMBER;i++)
	{
		PDELETE(m_pCallingPhoneNumberList[i]);
		PDELETE(m_pCalledPhoneNumberList[i]);
	}
	/*POBJDELETE( m_pQualityOfService );
	POBJDELETE( m_pUserDefinedInfo );
	*/

	// Private layout //
	for (i=0;i<MAX_VIDEO_LAYOUT_NUMBER;i++)
		POBJDELETE(m_pPrivateVideoLayout[i]);
	
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SerializeXml(CXMLDOMElement *pFatherNode, ePartyData party_data_amount/* = FULL_DATA*/)
{
	CXMLDOMElement *pPartyNode,* pTempNode;

	pPartyNode=pFatherNode->AddChildNode("PARTY");
	pPartyNode->AddChildNode("NAME",m_H243_partyName);
	pPartyNode->AddChildNode("ID",m_partyId);

	if (party_data_amount==FULL_DATA)
	{
		pTempNode=pPartyNode->AddChildNode("PHONE_LIST");

		if (m_numCallingPhones>=1)
			pTempNode->AddChildNode("PHONE1", m_pCallingPhoneNumberList[0]->phone_number);
		if (m_numCallingPhones>=2)
			pTempNode->AddChildNode("PHONE2", m_pCallingPhoneNumberList[1]->phone_number);
		if (m_numCallingPhones>=3)
			pTempNode->AddChildNode("PHONE3", m_pCallingPhoneNumberList[2]->phone_number);
		if (m_numCallingPhones>=4)
			pTempNode->AddChildNode("PHONE4", m_pCallingPhoneNumberList[3]->phone_number);
		if (m_numCallingPhones>=5)
			pTempNode->AddChildNode("PHONE5", m_pCallingPhoneNumberList[4]->phone_number);
		if (m_numCallingPhones>=6)
			pTempNode->AddChildNode("PHONE6", m_pCallingPhoneNumberList[5]->phone_number);

		pPartyNode->AddChildNode("INTERFACE",m_netInterfaceType,INTERFACE_ENUM);
		pPartyNode->AddChildNode("CONNECTION",m_connectionType,CONNECTION_ENUM);
		pPartyNode->AddChildNode("MEET_ME_METHOD",m_meet_me_method,MEET_ME_METHOD_ENUM);
//		pPartyNode->AddChildNode("NUM_TYPE",m_numType,NUM_TYPE_ENUM);
//		pPartyNode->AddChildNode("BONDING",m_bondingMode1,BONDING_ENUM);
//		pPartyNode->AddChildNode("MULTI_RATE",m_multiRateMode,MULTI_RATE_ENUM);
		pPartyNode->AddChildNode("NET_CHANNEL_NUMBER",m_netChannelNumber,NET_CHANNEL_NUMBER_ENUM);
		pPartyNode->AddChildNode("VIDEO_PROTOCOL",m_videoProtocol,VIDEO_PROTOCOL_ENUM);
		pPartyNode->AddChildNode("CALL_CONTENT",m_voice,CALL_CONTENT_ENUM);

		pTempNode=pPartyNode->AddChildNode("ALIAS");
		pTempNode->AddChildNode("NAME",m_h323PartyAlias);
		
		pTempNode->AddChildNode("ALIAS_TYPE",m_h323PartyAliasType,ALIAS_TYPE_ENUM);

	    pPartyNode->AddChildNode("IP",m_ipAddress,IP_ADDRESS);

		pPartyNode->AddChildNode("SIGNALING_PORT",m_callSignallingPort);
		pPartyNode->AddChildNode("VOLUME",m_audioVolume);


		pTempNode=pPartyNode->AddChildNode("MCU_PHONE_LIST");

		if (m_numCalledPhones>=1)
			pTempNode->AddChildNode("PHONE1", m_pCalledPhoneNumberList[0]->phone_number);
		if (m_numCalledPhones>=2)
			pTempNode->AddChildNode("PHONE2", m_pCalledPhoneNumberList[1]->phone_number);
		if (m_numCalledPhones>=3)
			pTempNode->AddChildNode("PHONE3", m_pCalledPhoneNumberList[2]->phone_number);
		if (m_numCalledPhones>=4)
			pTempNode->AddChildNode("PHONE4", m_pCalledPhoneNumberList[3]->phone_number);
		if (m_numCalledPhones>=5)
			pTempNode->AddChildNode("PHONE5", m_pCalledPhoneNumberList[4]->phone_number);
		if (m_numCalledPhones>=6)
			pTempNode->AddChildNode("PHONE6", m_pCalledPhoneNumberList[5]->phone_number);



//		pPartyNode->AddChildNode("BONDING_PHONE",m_bondingPhoneNumber.phone_number);
//
		pPartyNode->AddChildNode("SERVICE_NAME",m_netServiceProviderName);

		pPartyNode->AddChildNode("SUB_SERVICE_NAME",m_netSubService);
		pPartyNode->AddChildNode("AUTO_DETECT",m_autoDetect,_BOOL);
//
//		pPartyNode->AddChildNode("RESTRICT",IsRestrictOnly(),_BOOL);
//
//		pPartyNode->AddChildNode("ENHANCED_VIDEO",m_high_qualityVideo,_BOOL);
//
		pPartyNode->AddChildNode("VIDEO_BIT_RATE",m_videoRate,VIDEO_BIT_RATE_ENUM);
//
//		//QoS here 
//		if (m_pQualityOfService)
//			m_pQualityOfService->SerializeXml(pPartyNode);
//
//		//4.6
//		pPartyNode->AddChildNode("RECORDING_PORT",m_recording_port,RECORDING_PORT_ENUM);
//		//end 4.6
	}

	pPartyNode->AddChildNode("LAYOUT_TYPE",m_isPrivate,LAYOUT_TYPE_ENUM);

	int nCurPrivateLayout = ONE_ONE;
	CVideoLayout* pVideoLayout = GetCurPrivateVideoLayout();

	if(pVideoLayout)
		nCurPrivateLayout = pVideoLayout->GetScreenLayout();

	pPartyNode->AddChildNode("PERSONAL_LAYOUT",nCurPrivateLayout,LAYOUT_ENUM);

	CXMLDOMElement *pForceListNode = pPartyNode->AddChildNode("PERSONAL_FORCE_LIST");
	pVideoLayout = GetFirstPrivateVideoLayout();

	while (pVideoLayout)
	{
		CXMLDOMElement *pForceNode = pForceListNode->AddChildNode("FORCE");
		pVideoLayout->SerializeXml(pForceNode);
		pVideoLayout = GetNextPrivateVideoLayout();
	}

	if (party_data_amount==FULL_DATA)
		pPartyNode->AddChildNode("VIP",m_isVip,_BOOL);

//	if(m_pUserDefinedInfo)
//		m_pUserDefinedInfo->SerializeXml(pPartyNode);
//	if (party_data_amount==FULL_DATA)
//	{
		pPartyNode->AddChildNode("LISTEN_VOLUME",m_listening_audioVolume);
//		pPartyNode->AddChildNode("AGC",m_AGC,_BOOL);
//		//end 6.0 
//		
//		//7.0
		pPartyNode->AddChildNode("SIP_ADDRESS",m_sipPartyAddress);
		pPartyNode->AddChildNode("SIP_ADDRESS_TYPE",m_sipPartyAddressType,SIP_ADDRESS_TYPE_ENUM);
//		pPartyNode->AddChildNode("WEB_USER_ID",m_webUserId);
//		
//		pPartyNode->AddChildNode("UNDEFINED",m_undefinedType,_BOOL);
//		
		pPartyNode->AddChildNode("BACKUP_SERVICE_NAME",m_backupService);
    	pPartyNode->AddChildNode("BACKUP_SUB_SERVICE_NAME",m_backupSubService);
//		pPartyNode->AddChildNode("DEFAULT_TEMPLATE",m_defaultTemplate,_BOOL);
//		pPartyNode->AddChildNode("NODE_TYPE",m_nodeType,NODE_TYPE_ENUM);
//		pPartyNode->AddChildNode("ENCRYPTION_EX",m_encryption,BOOL_AUTO_ENUM);
		pPartyNode->AddChildNode("H323_PSTN",m_EnableH323_PSTN,_BOOL);
//		pPartyNode->AddChildNode("EMAIL",m_DBOwner);
		pPartyNode->AddChildNode("IS_RECORDING_LINK_PARTY",m_isRecordingLinkParty,_BOOL);
//		pPartyNode->AddChildNode("USER_IDENTIFIER_STRING",m_UserIdentifierString);
//		//end 7.0
//
		pPartyNode->AddChildNode("IDENTIFICATION_METHOD", m_identificationMethod, IDENT_METHOD_ENUM);
//	}
}

const char*  CRsrvParty::GetName () const
{
    return m_H243_partyName;
}
/////////////////////////////////////////////////////////////////////////////

void CRsrvParty::SerializeXml(CXMLDOMElement*& pFatherNode) const
{
}


int CRsrvParty::DeSerializeXml(CXMLDOMElement *pResNode,char *pszError,const char * strAction)
{
	int numAction = convertStrActionToNumber(strAction);
	//TRACE UNKNOWN_ACTION==numAction
	DeSerializeXml(pResNode,pszError,numAction);
	return STATUS_OK;
}

int CRsrvParty::convertStrActionToNumber(const char * strAction)
{
	int numAction = UNKNOWN_ACTION;
	if(strncmp("ADD_PARTY",strAction,9))
		numAction=NEW_PARTY;
	
	return numAction;
}


int CRsrvParty::DeSerializeXml(CXMLDOMElement *pPartyNode, char *pszError, int nAction)
{
	CXMLDOMElement *pChildNode;
	int i, nStatus = STATUS_OK;
	char* pszVal = NULL;
    char szNodeName[20];
    CVideoLayout VideoLayout;
	CStructTm StartTime;
//CARMEL	BYTE byteVal;
	
	
	GET_VALIDATE_CHILD(pPartyNode,"NAME",m_H243_partyName,_1_TO_H243_NAME_LENGTH);

	if (nAction == ADD_RESERVE && nStatus==STATUS_NODE_MISSING)
		return nStatus;

	
	GET_VALIDATE_CHILD(pPartyNode,"ID",&m_partyId,_0_TO_DWORD);

	if (nAction != ADD_RESERVE && nStatus==STATUS_NODE_MISSING)  //Action update
		return nStatus;
	

	GET_CHILD_NODE(pPartyNode, "PHONE_LIST", pChildNode);
   
	if(pChildNode)
	{
		//if a phone_list element is located ,then we delete all the phone numbers 
		//and we are adding them according the the phone element the user sent
		//in case of an update the phone list will be loaded from the DB 
		//so the user does not ha to send them unless he wants to change their content
		CleanCallingPhoneNumbers();

		for(i=1; i < 7; i++)
		{
			sprintf(szNodeName,"PHONE%d",i);
			GET_VALIDATE_CHILD(pChildNode,szNodeName,&pszVal,PHONE_NUMBER_DIGITS_LENGTH);
			if (nStatus==STATUS_OK&&pszVal!=NULL)
			{
				if(strcmp(pszVal,"")!=0)
					AddCallingPhoneNumber(pszVal);
			}
		}
	}
    
	GET_VALIDATE_CHILD(pPartyNode,"INTERFACE",&m_netInterfaceType,INTERFACE_ENUM);
	GET_VALIDATE_CHILD(pPartyNode,"CONNECTION",&m_connectionType,CONNECTION_ENUM);
	GET_VALIDATE_CHILD(pPartyNode,"MEET_ME_METHOD",&m_meet_me_method,MEET_ME_METHOD_ENUM);
	//CARMELGET_VALIDATE_CHILD(pPartyNode,"NUM_TYPE",&m_numType,NUM_TYPE_ENUM);
	//CARMELGET_VALIDATE_CHILD(pPartyNode,"BONDING",&m_bondingMode1,BONDING_ENUM);
	//CARMELGET_VALIDATE_CHILD(pPartyNode,"MULTI_RATE",&m_multiRateMode,MULTI_RATE_ENUM);
	GET_VALIDATE_CHILD(pPartyNode,"NET_CHANNEL_NUMBER",&m_netChannelNumber,NET_CHANNEL_NUMBER_ENUM);
	GET_VALIDATE_CHILD(pPartyNode,"VIDEO_PROTOCOL",&m_videoProtocol,VIDEO_PROTOCOL_ENUM);
	GET_VALIDATE_CHILD(pPartyNode,"CALL_CONTENT",&m_voice,CALL_CONTENT_ENUM);

	GET_CHILD_NODE(pPartyNode, "ALIAS", pChildNode);

	if(pChildNode)
	{
	
		GET_VALIDATE_MANDATORY_CHILD(pChildNode,"NAME",m_h323PartyAlias,IP_STRING_LENGTH);
		GET_VALIDATE_CHILD(pChildNode,"ALIAS_TYPE",&m_h323PartyAliasType,ALIAS_TYPE_ENUM);
	}



	GET_VALIDATE_CHILD(pPartyNode,"IP",&m_ipAddress,IP_ADDRESS);
	GET_VALIDATE_CHILD(pPartyNode,"SIGNALING_PORT",&m_callSignallingPort,_0_TO_WORD);
	GET_VALIDATE_CHILD(pPartyNode,"VOLUME",&m_audioVolume,_0_TO_10_DECIMAL);

	GET_CHILD_NODE(pPartyNode, "MCU_PHONE_LIST", pChildNode);

	if(pChildNode)
	{
		CleanCalledPhoneNumbers();

		for(i=1; i < 7; i++)
		{
			sprintf(szNodeName,"PHONE%d",i);
			GET_VALIDATE_CHILD(pChildNode,szNodeName,&pszVal,PHONE_NUMBER_DIGITS_LENGTH);
			if (nStatus==STATUS_OK&&pszVal!=NULL)
			{
				if(strcmp(pszVal,"")!=0)
					AddCalledPhoneNumber(pszVal);
			}

		}
	}
	/*
	GET_VALIDATE_CHILD(pPartyNode,"BONDING_PHONE",m_bondingPhoneNumber.phone_number,PHONE_NUMBER_DIGITS_LENGTH);
	*/
	GET_VALIDATE_CHILD(pPartyNode,"SERVICE_NAME",m_netServiceProviderName,NET_SERVICE_PROVIDER_NAME_LENGTH);
	GET_VALIDATE_CHILD(pPartyNode,"SUB_SERVICE_NAME",m_netSubService,NET_SERVICE_PROVIDER_NAME_LENGTH);
	GET_VALIDATE_CHILD(pPartyNode,"AUTO_DETECT",&m_autoDetect,_BOOL);
	/*GET_VALIDATE_CHILD(pPartyNode,"RESTRICT",&byteVal,_BOOL);
	if (byteVal==1)
		m_restrict = 27;
	else
		m_restrict = 0xff;
	GET_VALIDATE_CHILD(pPartyNode,"ENHANCED_VIDEO",&m_high_qualityVideo,_BOOL);
	*/
	GET_VALIDATE_CHILD(pPartyNode,"VIDEO_BIT_RATE",&m_videoRate,VIDEO_BIT_RATE_ENUM);
/*
	GET_CHILD_NODE(pPartyNode, "IP_QOS", pChildNode);

	if(pChildNode)
	{
		nStatus = m_pQualityOfService->DeSerializeXml(pChildNode,pszError);
		if (nStatus!=STATUS_OK)
			return nStatus;
	}

	GET_VALIDATE_CHILD(pPartyNode,"RECORDING_PORT",&m_recording_port,RECORDING_PORT_ENUM);

*/
	GET_VALIDATE_CHILD(pPartyNode,"LAYOUT_TYPE",&m_isPrivate,LAYOUT_TYPE_ENUM);
	
	int nCurPrivateLayout = -1;

	GET_VALIDATE_CHILD(pPartyNode,"PERSONAL_LAYOUT",&nCurPrivateLayout,LAYOUT_ENUM);

	CXMLDOMElement *pForceListNode;
	
	GET_CHILD_NODE(pPartyNode, "PERSONAL_FORCE_LIST", pForceListNode);

	if(pForceListNode)
	{
		CXMLDOMElement *pForceNode;
		GET_FIRST_CHILD_NODE(pForceListNode, "FORCE", pForceNode);

		while(pForceNode)
		{
			CVideoLayout VideoLayout;

			nStatus = VideoLayout.DeSerializeXml(pForceNode,pszError,m_isPrivate);

			if(nStatus != STATUS_OK)
				return nStatus;

			if(VideoLayout.GetScreenLayout() == nCurPrivateLayout)
				VideoLayout.SetActive(YES);
			else
				VideoLayout.SetActive(NO);
				
			AddPrivateVideoLayout(VideoLayout, TRUE);
			GET_NEXT_CHILD_NODE(pForceListNode, "FORCE", pForceNode);
		}
	}
	

	GET_VALIDATE_CHILD(pPartyNode,"VIP",&m_isVip,_BOOL);
/*	
	GET_CHILD_NODE(pPartyNode, "CONTACT_INFO_LIST", pChildNode);
	if(pChildNode)
	{
		nStatus = m_pUserDefinedInfo->DeSerializeXml(pChildNode,pszError);
		if (nStatus!=STATUS_OK)
			return nStatus;
	}
	
	GET_VALIDATE_CHILD(pPartyNode,"LISTEN_VOLUME",&m_listening_audioVolume,_1_TO_10_DECIMAL);
	GET_VALIDATE_CHILD(pPartyNode,"AGC",&m_AGC,_BOOL);

//	end 6.0
*/
//	version 7.0
	GET_VALIDATE_CHILD(pPartyNode,"SIP_ADDRESS",m_sipPartyAddress,IP_STRING_LENGTH);
	GET_VALIDATE_CHILD(pPartyNode,"SIP_ADDRESS_TYPE",&m_sipPartyAddressType,SIP_ADDRESS_TYPE_ENUM);
/*	GET_VALIDATE_CHILD(pPartyNode,"WEB_USER_ID",&m_webUserId,_0_TO_DWORD);
	GET_VALIDATE_CHILD(pPartyNode,"UNDEFINED",&m_undefinedType,_BOOL);
	*/
	GET_VALIDATE_CHILD(pPartyNode,"BACKUP_SERVICE_NAME",m_backupService,NET_SERVICE_PROVIDER_NAME_LENGTH);
	GET_VALIDATE_CHILD(pPartyNode,"BACKUP_SUB_SERVICE_NAME",m_backupSubService,NET_SERVICE_PROVIDER_NAME_LENGTH);
/*	GET_VALIDATE_CHILD(pPartyNode,"DEFAULT_TEMPLATE",&m_defaultTemplate,_BOOL);
	GET_VALIDATE_CHILD(pPartyNode,"NODE_TYPE",&m_nodeType,NODE_TYPE_ENUM);
	GET_VALIDATE_CHILD(pPartyNode,"ENCRYPTION_EX",&m_encryption,BOOL_AUTO_ENUM);
	*/
	GET_VALIDATE_CHILD(pPartyNode,"H323_PSTN",&m_EnableH323_PSTN,_BOOL);
	/*
	GET_VALIDATE_CHILD(pPartyNode,"EMAIL",m_DBOwner,_0_TO_H243_NAME_LENGTH);
*/
	GET_VALIDATE_CHILD(pPartyNode,"IS_RECORDING_LINK_PARTY",&m_isRecordingLinkParty,_BOOL);
/*
 * 	GET_VALIDATE_CHILD(pPartyNode,"USER_IDENTIFIER_STRING",m_UserIdentifierString,_0_TO_USER_IDENTIFIER_STRING_LENGTH);
	//	end 7.0
*/
    GET_VALIDATE_CHILD(pPartyNode,"IDENTIFICATION_METHOD",&m_identificationMethod,IDENT_METHOD_ENUM);
/*
	pszError[0] = 0;
	*/
	return STATUS_OK;
	
}



/////////////////////////////////////////////////////
void CRsrvParty::CleanPhoneNumbers()
{
	CleanCallingPhoneNumbers();
	CleanCalledPhoneNumbers();
}

void  CRsrvParty::CleanCallingPhoneNumbers()
{
	int i;  
	for (i=0;i<MAX_CHANNEL_NUMBER;i++) {
    PDELETE(m_pCallingPhoneNumberList[i]);
  }
  m_numCallingPhones=0;

}
//////////////////////////////////////////////////////////////////////////

void  CRsrvParty::CleanCalledPhoneNumbers()
{
  for (int i=0;i<MAX_CHANNEL_NUMBER;i++) {
    PDELETE(m_pCalledPhoneNumberList[i]);
  }
  m_numCalledPhones=0;
	
}
/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::Serialize(WORD format,CSegment& seg)
{
  if (format != NATIVE) PASSERT(1);
  COstrStream pOstr;
  Serialize(format, pOstr);
  pOstr.Serialize(seg);
} 
/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::Serialize(WORD format, std::ostream &m_ostr)
{
	// assuming format = OPERATOR_MCMS
	
	//old
	m_ostr <<  m_phoneNumber << "\n";   //PARTY_PHONE_NUMBER
	
	//new
	m_ostr << m_H243_partyName << "\n";
		
	m_ostr << m_partyId   << "\n";
	m_ostr << (WORD)m_connectionType   << "\n";
	//m_ostr << (WORD)m_nodeType  << "\n";
	//CARMELm_ostr << m_H243_password  << "\n";
	//CARMELm_ostr << (WORD)m_chair  << "\n";
	//CARMELm_ostr << (WORD)m_bondingMode1  << "\n";
	m_ostr << (WORD)m_netChannelNumber  << "\n";
	//CARMELm_ostr << (WORD)m_netChannelWidth  << "\n";
	//CARMELm_ostr << (WORD)m_passiveParty  << "\n";
	m_ostr << m_netServiceProviderName  << "\n";
	//CARMELm_ostr << (WORD)m_restrict  << "\n";
	m_ostr << (WORD)m_voice  << "\n";
	//CARMELm_ostr << (WORD)m_AGC  << "\n";
	m_ostr << (WORD)m_audioThreshold  << "\n";
	m_ostr << m_numCallingPhones  << "\n";
	m_ostr << m_numCalledPhones  << "\n";
	m_ostr << (WORD)m_netInterfaceType  << "\n";
	//m_ostr << (WORD)m_multiRateMode  << "\n";
	m_ostr << m_ipAddress  << "\n";
	m_ostr << m_callSignallingPort  << "\n";
	m_ostr << (WORD)m_videoProtocol  << "\n";
	m_ostr << m_videoRate  << "\n";
	
	if (m_connectionType!=DIRECT) {
		int i=0;
		for (i=0;i<(int)m_numCallingPhones;i++)
			m_ostr << m_pCallingPhoneNumberList[i]->phone_number  << "\n";
		
		for (i=0;i<(int)m_numCalledPhones;i++)
		m_ostr << m_pCalledPhoneNumberList[i]->phone_number  << "\n";
	
		m_ostr << (WORD)m_identificationMethod  << "\n";
		m_ostr << (WORD)m_meet_me_method  << "\n";
		m_ostr << m_netSubService  << "\n";
		m_ostr << m_backupService  << "\n";
		m_ostr << m_backupSubService  << "\n";
//		m_ostr << (WORD)m_numType  << "\n";
	}
	/*
	if(apiNum>=4 || format != OPERATOR_MCMS)
		m_ostr << m_bondingPhoneNumber.phone_number << "\n";
	*/
	
	m_ostr << m_h323PartyAliasType << "\n";
	m_ostr << m_h323PartyAlias << "\n";
	m_ostr << (WORD)m_audioVolume << "\n";
	/*m_ostr << (WORD)m_autoDetect << "\n";
	m_ostr << (WORD)m_undefinedType << "\n";
	
	if(apiNum>=39 || format != OPERATOR_MCMS)  //changed from 35
		m_ostr << (WORD)m_high_qualityVideo << "\n";
	
	
	if(apiNum>=56 || format != OPERATOR_MCMS)  //new web fields
		m_ostr << m_webUserId << "\n";
	
*/
	m_ostr <<  m_extension << "\n";   // party extension
	
/*	m_pQualityOfService->Serialize(format,m_ostr,apiNum);
	
	
	if(apiNum>=API_RECORDING_PORT || format != OPERATOR_MCMS){
		m_ostr << (WORD)m_recording_port << "\n";	 
	}
	*/
	/// Private layout ///
	m_ostr << (WORD)m_isPrivate << "\n" ;
	m_ostr << m_numPrivateVideoLayout << "\n" ;
	for (WORD i=0;i<m_numPrivateVideoLayout;i++){
		m_pPrivateVideoLayout[i]->Serialize(format, m_ostr);
	}
	
	/*
	
  if( apiNum >= API_NUMBER_CONFERENCE_ID || format != OPERATOR_MCMS )
  {
	  m_pUserDefinedInfo->Serialize(format,m_ostr);
	  m_ostr << (WORD)m_isVip << "\n" ;
  }
  if(apiNum>=API_NUM_MCMS_TEMPLATES || format != OPERATOR_MCMS)
  {
	  m_ostr <<(WORD)m_defaultTemplate<< "\n";
  }
  */
 
	m_ostr << (WORD)m_listening_audioVolume << "\n";
	m_ostr << m_sipPartyAddressType << "\n";
	m_ostr << m_sipPartyAddress << "\n";

  m_ostr << (WORD)m_EnableH323_PSTN << "\n";
/*
  if(apiNum>=API_ENCRYPTION_IN_PARTY_LEVEL || format != OPERATOR_MCMS)
		m_ostr << (WORD)m_encryption << "\n";

*/
 	   m_ostr << (WORD)m_isRecordingLinkParty << "\n" ;
/*
  	   m_ostr <<  m_UserIdentifierString << "\n";   //PARTY_PHONE_NUMBER


  if (apiNum>=API_NUM_PARTY_EMAIL || format != OPERATOR_MCMS)
		m_ostr << m_DBOwner << "\n";
*/
		m_ostr <<  m_refferedToUri << "\n";
		m_ostr <<  m_refferedByUri << "\n";

}

/*
//////////////////////////////////////////////////////////////////////////////
void CRsrvParty::DeSerialize(WORD format, char* msg_info)
{
	// assuming format = OPERATOR_MCMS
	CIstrStream*      pIstr;
	pIstr= new CIstrStream(msg_info);
	//CARMELDeSerialize(format, *pIstr);
	POBJDELETE(pIstr);
}
*/

/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::DeSerialize(WORD format,CSegment& seg)
{
    if (format != NATIVE) PASSERT(1); 
       
    CIstrStream istr(seg);
    DeSerialize(format, istr);
} 
/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::DeSerialize(WORD format, std::istream &m_istr)
{
	// assuming format = OPERATOR_MCMS
	
	//old
	m_istr.getline(m_phoneNumber,PHONE_NUMBER_DIGITS_LEN+1,'\n'); //LEN+1 IN ORDER TO RETRIEVE '\N'
	
	//new

	m_istr.getline(m_H243_partyName,H243_NAME_LEN+1,'\n');
	m_istr >> m_partyId;
	WORD tmp;
	m_istr >> tmp;
	m_connectionType = (BYTE)tmp;
	//m_istr >> tmp;
	//m_nodeType = (BYTE)tmp;
	/*m_istr.ignore(1);
	m_istr.getline(m_H243_password,H243_NAME_LEN+1,'\n');
	m_istr >> tmp;
	m_chair = (BYTE)tmp;
	m_istr >> tmp;
	m_bondingMode1 = (BYTE)tmp;
	*/
	m_istr >> tmp;
	m_netChannelNumber = (BYTE)tmp;
	/*
	m_istr >> tmp;
	m_netChannelWidth = (BYTE)tmp;
	m_istr >> tmp;
	m_passiveParty = (BYTE)tmp;
	*/
	m_istr.ignore(1);
	m_istr.getline(m_netServiceProviderName,NET_SERVICE_PROVIDER_NAME_LEN+1,'\n');
	/*m_istr >> tmp;
	m_restrict = (BYTE)tmp;*/
	m_istr >> tmp;
	m_voice = (BYTE)tmp;
	/*m_istr >> tmp;
	m_AGC = (BYTE)tmp;*/
	m_istr >> tmp;
	m_audioThreshold = (BYTE)tmp;
	
	m_istr >> m_numCallingPhones;
	m_istr >> m_numCalledPhones;
	m_istr >> tmp;
	m_netInterfaceType = (BYTE)tmp;
	//m_istr >> tmp;
	//m_multiRateMode = (BYTE)tmp;
	m_istr >> m_ipAddress ;
	m_istr >> m_callSignallingPort ;
	m_istr >> tmp;
	m_videoProtocol = (BYTE)tmp  ;
	m_istr >> m_videoRate  ;
	
	m_istr.ignore(1);
	
	if (m_connectionType!=DIRECT) 
	{
		int i=0;
		for (i=0;i<(int)m_numCallingPhones;i++)
		{
			m_pCallingPhoneNumberList[i] = new Phone;
			m_istr.getline(m_pCallingPhoneNumberList[i]->phone_number,PHONE_NUMBER_DIGITS_LEN+1,'\n');
		}
		
		for (i=0;i<(int)m_numCalledPhones;i++) 
		{
			m_pCalledPhoneNumberList[i] = new Phone;
			m_istr.getline(m_pCalledPhoneNumberList[i]->phone_number,PHONE_NUMBER_DIGITS_LEN+1,'\n');
		}
	
	
		m_istr >> tmp;
		m_identificationMethod = (BYTE)tmp;
		m_istr >> tmp;
		m_meet_me_method = (BYTE)tmp;
		m_istr.ignore(1);
		m_istr.getline(m_netSubService,NET_SERVICE_PROVIDER_NAME_LEN+1,'\n');
		m_istr.getline(m_backupService,NET_SERVICE_PROVIDER_NAME_LEN+1,'\n');
		m_istr.getline(m_backupSubService,NET_SERVICE_PROVIDER_NAME_LEN+1,'\n');
//		m_istr >> tmp;
//		m_numType = (BYTE)tmp;
//		m_istr.ignore(1);
	}
	/*
	if(apiNum>=4 || format != OPERATOR_MCMS)
		m_istr.getline(m_bondingPhoneNumber.phone_number,PHONE_NUMBER_DIGITS_LEN+1,'\n');
	
	*/
	m_istr >> m_h323PartyAliasType;
	m_istr.ignore(1);
	m_istr.getline(m_h323PartyAlias,IP_STRING_LEN+1,'\n');

	m_istr >> tmp;
	m_audioVolume = (BYTE)tmp;
	m_istr.ignore(1);
	
	/*
	if(apiNum>=24 || format != OPERATOR_MCMS){
		m_istr >> tmp;
		m_autoDetect = (BYTE)tmp;
		m_istr.ignore(1);
	}
		m_istr >> tmp;
		m_undefinedType = (BYTE)tmp;
		m_istr.ignore(1);

	if(apiNum>=39 || format != OPERATOR_MCMS){  //changed from 35
		m_istr >> tmp;
		m_high_qualityVideo = (BYTE)tmp;
		m_istr.ignore(1);
	}
	if(apiNum>=56 || format != OPERATOR_MCMS){  //new web fields
		m_istr >> m_webUserId;
		m_istr.ignore(1);
	}
	
*/
	m_istr.getline(m_extension, PARTY_EXTENSION_LENGTH+1, '\n'); //LEN+1 IN ORDER TO RETRIEVE '\N'

/*
	
	if( apiNum >= API_NUM_H323_QOS   ||  format != OPERATOR_MCMS ) {
		m_pQualityOfService->DeSerialize(format,m_istr,apiNum);
	}
	
	if(apiNum>=API_RECORDING_PORT || format != OPERATOR_MCMS){
		m_istr >> tmp;
		m_recording_port = (BYTE)tmp;	
		m_istr.ignore(1);	  
	}
	*/
	// Private layout ///
	m_istr >> tmp;
	m_isPrivate = (BYTE)tmp;
	m_istr >> m_numPrivateVideoLayout ;
	
	for (WORD i=0;i<m_numPrivateVideoLayout;i++){
		m_pPrivateVideoLayout[i] = new CVideoLayout;
		m_pPrivateVideoLayout[i]->DeSerialize( format, m_istr);
	}
		
	m_istr.ignore(1);	
	
	/*
	if(apiNum>=API_NUMBER_CONFERENCE_ID || format != OPERATOR_MCMS)
	{
		m_pUserDefinedInfo->DeSerialize(format,m_istr);
		m_istr >> tmp;
		m_isVip = (BYTE)tmp;
		m_istr.ignore(1);
	}
	if(apiNum>=API_NUM_MCMS_TEMPLATES || format != OPERATOR_MCMS)
	{
		m_istr >> tmp;
		m_defaultTemplate = (BYTE)tmp;
		m_istr.ignore(1);
	}
*/	

	m_istr >> tmp;
	m_listening_audioVolume = (BYTE)tmp;
//	m_istr.ignore(1);
	

	m_istr >> m_sipPartyAddressType;
	m_istr.ignore(1);
	m_istr.getline(m_sipPartyAddress,IP_STRING_LEN+1,'\n');	

	m_istr >> tmp;
	m_EnableH323_PSTN = (BYTE)tmp;
/*	m_istr.ignore(1);
	

	if(apiNum>=API_ENCRYPTION_IN_PARTY_LEVEL || format != OPERATOR_MCMS){
		m_istr >> tmp;
		m_encryption = (BYTE)tmp;
		m_istr.ignore(1);
	}
*/
		m_istr >> tmp;
		m_isRecordingLinkParty = (BYTE)tmp;

 		m_istr.ignore(1);
/*		m_istr.getline(m_UserIdentifierString,USER_IDENTIFIER_STRING_LEN+1,'\n'); 


	if (apiNum>=API_NUM_PARTY_EMAIL || format != OPERATOR_MCMS)
		m_istr.getline(m_DBOwner,H243_NAME_LEN+1,'\n'); */

		m_istr.getline(m_refferedToUri, IP_STRING_LEN+1, '\n'); //LEN+1 IN ORDER TO RETRIEVE '\N'
		m_istr.getline(m_refferedByUri, IP_STRING_LEN+1, '\n');

 }


/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetName(const char* name)
{
	int len=strlen(name);
	strncpy(m_H243_partyName, name, H243_NAME_LEN );
	if (len>H243_NAME_LEN-1)
		m_H243_partyName[H243_NAME_LEN-1]='\0';
}
/*
/////////////////////////////////////////////////////////////////////////////
const char*  CRsrvParty::GetBHLastUpdate () const
{
    return m_BHLastUpdate;
}

/////////////////////////////////////////////////////////////////////////////
const char*  CRsrvParty::GetBHStatusLastUpdate () const
{
    return m_BHStatusLastUpdate;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetBHLastUpdate(const char* BHLastUpdate)
{
	int len=strlen(BHLastUpdate);
	strncpy(m_BHLastUpdate, BHLastUpdate, 32 );
	if (len>31)
		m_BHLastUpdate[31]='\0';
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetBHStatusLastUpdate(const char* BHStatusLastUpdate)
{
	int len=strlen(BHStatusLastUpdate);
	strncpy(m_BHStatusLastUpdate, BHStatusLastUpdate, 32 );
	if (len>31)
		m_BHStatusLastUpdate[31]='\0';
}

/////////////////////////////////////////////////////////////////////////////
BYTE CRsrvParty::GetBHStatus ()                  
{
	return m_BHStatus;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetBHStatus(BYTE BHStatus)                 
{
	m_BHStatus=BHStatus;
}
*/
/////////////////////////////////////////////////////////////////////////////
const char*  CRsrvParty::GetPhoneNumber () const
{
    
    if (m_connectionType==DIAL_OUT)
	{
		if (m_numCallingPhones)
			return m_pCallingPhoneNumberList[m_numCallingPhones-1]->phone_number;
		else
			return "";
    }
    else
	{
		if (m_numCalledPhones)
			return m_pCalledPhoneNumberList[m_numCalledPhones-1]->phone_number;
		else
			return "";
    }
    return m_phoneNumber;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetPhoneNumber(const char*  phoneNumber)
{
	int len=strlen(phoneNumber);
	strncpy(m_phoneNumber, phoneNumber, PHONE_NUMBER_DIGITS_LEN);

	if (len>PHONE_NUMBER_DIGITS_LEN)
		m_phoneNumber[PHONE_NUMBER_DIGITS_LEN-1]='\0';
	
	if (m_connectionType==DIAL_OUT)
		AddCallingPhoneNumber(phoneNumber);
	else
		AddCalledPhoneNumber(phoneNumber);
}


/////////////////////////////////////////////////////////////////////////////
int CRsrvParty::AddCallingPhoneNumber(const char*  phoneNumber)
{
	if (m_numCallingPhones>=MAX_CHANNEL_NUMBER)
		return  STATUS_MAX_PHONE_NUMBER_EXCEEDED;
	
	m_pCallingPhoneNumberList[m_numCallingPhones] = new Phone;
	
	int len=strlen(phoneNumber);
	strncpy(m_pCallingPhoneNumberList[m_numCallingPhones]->phone_number,
									  phoneNumber, 
									  PHONE_NUMBER_DIGITS_LEN);
	
	if (len>PHONE_NUMBER_DIGITS_LEN)
		m_pCallingPhoneNumberList[m_numCallingPhones]->phone_number[PHONE_NUMBER_DIGITS_LEN-1]='\0';
	
	m_numCallingPhones++;
	
	//tmp
	strncpy(m_phoneNumber, phoneNumber, PHONE_NUMBER_DIGITS_LEN);
	if (len>PHONE_NUMBER_DIGITS_LEN)
		m_phoneNumber[PHONE_NUMBER_DIGITS_LEN-1]='\0';
	//end
	
	return STATUS_OK;
}

/////////////////////////////////////////////////////////////////////////////
int CRsrvParty::AddCalledPhoneNumber(const char*  phoneNumber)
{
	if (m_numCalledPhones>=MAX_CHANNEL_NUMBER)
		return  STATUS_MAX_PHONE_NUMBER_EXCEEDED;
	
	m_pCalledPhoneNumberList[m_numCalledPhones] = new Phone;
	
	int len=strlen(phoneNumber);
	strncpy(m_pCalledPhoneNumberList[m_numCalledPhones]->phone_number, phoneNumber, PHONE_NUMBER_DIGITS_LEN);
	if (len>PHONE_NUMBER_DIGITS_LEN)
		m_pCalledPhoneNumberList[m_numCalledPhones]->phone_number[PHONE_NUMBER_DIGITS_LEN-1]='\0';
	
	m_numCalledPhones++;
	
	//tmp
	strncpy(m_phoneNumber, phoneNumber, PHONE_NUMBER_DIGITS_LEN);
	if (len>PHONE_NUMBER_DIGITS_LEN)
		m_phoneNumber[PHONE_NUMBER_DIGITS_LEN-1]='\0';
	//end
	
	return STATUS_OK;
}


/////////////////////////////////////////////////////////////////////////////
WORD CRsrvParty::GetNumCallingPhoneNumbers()
{
    return m_numCallingPhones;
}

/////////////////////////////////////////////////////////////////////////////
WORD CRsrvParty::GetNumCalledPhoneNumbers()
{
    return m_numCalledPhones;
}
/*
/////////////////////////////////////////////////////////////////////////////
Phone*  CRsrvParty::GetFirstCallingPhoneNumberMCMS(BYTE bondTemp )
{
	if (GetBondingMode1()==YES  ||  bondTemp==YES) {
		Phone* pBondingPhone = (Phone*) GetBondingPhoneNumber();
		
		//if  bonding number empty take first party phone number
		if (!strcmp(pBondingPhone->phone_number,""))
			if (m_pCallingPhoneNumberList[0]!=NULL)
				SetBondingPhoneNumber(*m_pCallingPhoneNumberList[0]);
			
			m_indCalling=1;
			return (Phone*) GetBondingPhoneNumber();
	}
	
	m_indCalling=1;
	return m_pCallingPhoneNumberList[0];
}
*/
/////////////////////////////////////////////////////////////////////////////
Phone*  CRsrvParty::GetFirstCallingPhoneNumber()
{
	m_indCalling=1;
	return m_pCallingPhoneNumberList[0];
}

/////////////////////////////////////////////////////////////////////////////
Phone*  CRsrvParty::GetFirstCallingPhoneNumber(int& nPos)
{
	
	Phone*  pPhone = CRsrvParty::GetFirstCallingPhoneNumber();
	nPos = m_indCalling;
	
	return pPhone;
}

/////////////////////////////////////////////////////////////////////////////
Phone*  CRsrvParty::GetNextCallingPhoneNumber()
{
	//if (m_indCalling>m_numCallingPhones) return NULL;
	if (m_indCalling>=m_numCallingPhones) return m_pCallingPhoneNumberList[0];
	return m_pCallingPhoneNumberList[m_indCalling++];
}

/////////////////////////////////////////////////////////////////////////////
Phone*  CRsrvParty::GetNextCallingPhoneNumber(int& nPos)
{
	m_indCalling = nPos;
	Phone*  pPhone = CRsrvParty::GetNextCallingPhoneNumber();
	nPos = m_indCalling;
	
	return pPhone;
}

/////////////////////////////////////////////////////////////////////////////
Phone*  CRsrvParty::GetNextCallingPhoneNumberOper()
{
	if (m_indCalling>=m_numCallingPhones) return NULL;
	return m_pCallingPhoneNumberList[m_indCalling++];
}

/////////////////////////////////////////////////////////////////////////////
Phone*  CRsrvParty::GetNextCallingPhoneNumberOper(int& nPos)
{
	m_indCalling = nPos;
	Phone*  pPhone = CRsrvParty::GetNextCallingPhoneNumberOper();
	nPos = m_indCalling;
	
	return pPhone;
}

/////////////////////////////////////////////////////////////////////////////
Phone*  CRsrvParty::GetFirstCalledPhoneNumber()
{
	m_indCalled=1;
	return m_pCalledPhoneNumberList[0];
}

/////////////////////////////////////////////////////////////////////////////
Phone*  CRsrvParty::GetFirstCalledPhoneNumber(int& nPos)
{
	Phone*  pPhone = CRsrvParty::GetFirstCalledPhoneNumber();
	nPos = m_indCalled;
	
	return pPhone;
}

/////////////////////////////////////////////////////////////////////////////
Phone*  CRsrvParty::GetNextCalledPhoneNumber()
{
	if (m_indCalled>=m_numCalledPhones) return NULL;
	return m_pCalledPhoneNumberList[m_indCalled++];
}

/////////////////////////////////////////////////////////////////////////////
Phone*  CRsrvParty::GetNextCalledPhoneNumber(int& nPos)
{
	m_indCalled = nPos;
	Phone*  pPhone = CRsrvParty::GetNextCalledPhoneNumber();
	nPos = m_indCalled;
	
	return pPhone;
}

/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetNetInterfaceType () const
{
	return m_netInterfaceType;
}


/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetNetInterfaceType(const BYTE interfaceType)
{
	m_netInterfaceType=interfaceType;
}




/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetPartyId(const DWORD partyId)
{
	m_partyId=partyId;
}

/////////////////////////////////////////////////////////////////////////////
DWORD  CRsrvParty::GetPartyId () const
{
	return m_partyId;
}

DWORD CRsrvParty::GetSlowUpdateCounter()
{
	return m_slowUpdateCounter;
}

DWORD CRsrvParty::GetFastUpdateCounter()
{
	return m_fastUpdateCounter;
}

DWORD CRsrvParty::GetSlow1UpdateCounter()
{
	return m_slow_1_UpdateCounter;

}

DWORD CRsrvParty::GetCreationUpdateCounter()
{
	return m_CreationUpdateCounter;

}

void  CRsrvParty::SetCreationUpdateCounter()
{
	if(m_pRes)
		m_CreationUpdateCounter=m_pRes->GetFullUpdateCounter();
}

/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetProtocolType () const
{
	BYTE ret;
	//ISDN_CONNECTION - uses Q.931 signalling
	//DIRECT_CONNECTION - no channel signalling is used
	switch (m_connectionType)
	{
    case DIAL_OUT:
    case DIAL_IN:
		{
			ret = ISDN_CONNECTION;
			break;
		}
		
    case DIRECT:
		{
			ret = DIRECT_CONNECTION;
			break;
		}
		
    default:
		{
			ret = ISDN_CONNECTION;
			break;
		}
	}
	
	return (ret);
}

/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetConnectionType () const
{
	//if the reservation is for DIRECT call
	//the mcms will handle it as a dial-out call
	//using the DIRECT_CONNECTION protocol
	if (m_connectionType == DIRECT)
		return (DIAL_OUT);
	else
		return m_connectionType;
}


/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetConnectionTypeOper() const
{
    return m_connectionType;
}


/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetConnectionType(const BYTE connectionType)
{
	m_connectionType=connectionType;
}

/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetNodeType () const
{
	return m_nodeType;
}

/*
/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetNodeType(const BYTE nodeType)
{
	m_nodeType=nodeType;
}


/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetChair () const
{
	return m_chair;
}


/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetChair(const BYTE chair)
{
	m_chair=chair;
}



/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetBondingMode1 () const
{
	return m_bondingMode1;
}


/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetBondingMode1(const BYTE bondingMode1)
{
	m_bondingMode1=bondingMode1;
	
	SLOWCHANGE;
}
*/

/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetNetChannelNumber () const
{
	return m_netChannelNumber;
}


/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetNetChannelNumber(const BYTE netChannelNumber)
{
	m_netChannelNumber=netChannelNumber;
	
	SLOWCHANGE;
}

/*
/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetNetChannelWidth () const
{
	return m_netChannelWidth;
}


/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetNetChannelWidth(const BYTE netChannelWidth)
{
	m_netChannelWidth=netChannelWidth;
}



/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetPassiveParty () const
{
	return m_passiveParty;
}


/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetPassiveParty(const BYTE passiveParty)
{
	m_passiveParty=passiveParty;
}


/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetRestrict () const
{
	return m_restrict;
}

*/
void CRsrvParty::IncreaseFullUpdateCounter()
{
	if(m_pRes!=NULL)
		m_pRes->IncreaseFullUpdateCounter();
}
////////////////////////////////////////////////////////////////////////
DWORD CRsrvParty::GetFullUpdateCounter()
{
	if(m_pRes==NULL)
		return 0;
	else
		return m_pRes->GetFullUpdateCounter();
}

DWORD CRsrvParty::GetCompleteUpdateCounter()
{
	return m_completeUpdateCounter;
}
/*
/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetRestrict(const BYTE restrict)
{
	m_restrict=restrict;
	
	SLOWCHANGE;
}

/////////////////////////////////////////////////////////////////////////////
WORD  CRsrvParty::IsRestrictOnly () const
{
	if (m_restrict==27) return TRUE;
	else 
		return FALSE;
}

*/
/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetVoice () const
{
	return m_voice;
}


/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetVoice(const BYTE voice)
{
	m_voice=voice;
}
/*

/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetAGC () const
{
	return m_AGC;
}


/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetAGC(const BYTE AGC)
{
	if(m_AGC!=AGC)
	{
		m_AGC=AGC;
		SLOWCHANGE;
	}
	
}

*/
/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetAudioThreshold () const
{
	return m_audioThreshold;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetAudioThreshold(const BYTE audioThreshold)
{
	m_audioThreshold=audioThreshold;
}



/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetIdentificationMethod () const
{
	return m_identificationMethod;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetIdentificationMethod(const BYTE identificationMethod)
{
	m_identificationMethod=identificationMethod;
}

/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetMeet_me_method () const
{
	return m_meet_me_method;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetMeet_me_method(const BYTE meet_me_method)
{
	m_meet_me_method=meet_me_method;
}
/*

/////////////////////////////////////////////////////////////////////////////
const char*  CRsrvParty::GetPassword () const
{
    return m_H243_password;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetPassword(const char* password)
{
	int len=strlen(password);
	strncpy(m_H243_password, password, H243_NAME_LEN );
	if (len>H243_NAME_LEN-1)
		m_H243_password[H243_NAME_LEN-1]='\0';
}

*/
/////////////////////////////////////////////////////////////////////////////
const char*  CRsrvParty::GetServiceProviderName () const
{
    return m_netServiceProviderName;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetServiceProviderName(const char* name)
{
	int len=strlen(name);
	strncpy(m_netServiceProviderName, name, NET_SERVICE_PROVIDER_NAME_LEN );
	if (len>NET_SERVICE_PROVIDER_NAME_LEN)
		m_netServiceProviderName[NET_SERVICE_PROVIDER_NAME_LEN-1]='\0';
}


/////////////////////////////////////////////////////////////////////////////
const char*  CRsrvParty::GetSubServiceName () const
{
    return m_netSubService;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetSubServiceName(const char* name)
{
	int len=strlen(name);
	strncpy(m_netSubService, name, NET_SERVICE_PROVIDER_NAME_LEN );
	if (len>NET_SERVICE_PROVIDER_NAME_LEN)
		m_netSubService[NET_SERVICE_PROVIDER_NAME_LEN-1]='\0';
}


/////////////////////////////////////////////////////////////////////////////
const char*  CRsrvParty::GetBackupServiceName () const
{
    return m_backupService;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetBackupServiceName(const char* name)
{
	int len=strlen(name);
	strncpy(m_backupService, name, NET_SERVICE_PROVIDER_NAME_LEN );
	if (len>NET_SERVICE_PROVIDER_NAME_LEN)
		m_backupService[NET_SERVICE_PROVIDER_NAME_LEN-1]='\0';
}

/////////////////////////////////////////////////////////////////////////////
const char*  CRsrvParty::GetBackupSubServiceName () const
{
    return m_backupSubService;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetBackupSubServiceName(const char* name)
{
	int len=strlen(name);
	strncpy(m_backupSubService, name, NET_SERVICE_PROVIDER_NAME_LEN );
	if (len>NET_SERVICE_PROVIDER_NAME_LEN)
		m_backupSubService[NET_SERVICE_PROVIDER_NAME_LEN-1]='\0';
}


/////////////////////////////////////////////////////////////////////////////
int CRsrvParty::CancelCalledPhoneNumber(const char* phoneNumber)
{
	int ind;
	ind=FindCalledPhoneNumber(phoneNumber);
	if (ind==NOT_FIND) return STATUS_PHONE_NUMBER_NOT_EXISTS;
	
	PDELETE(m_pCalledPhoneNumberList[ind]);
	int i=0;
	for (i=0;i<(int)m_numCalledPhones;i++)
	{
		if (m_pCalledPhoneNumberList[i]==NULL)
			break;
	}
	for (int j=i;j<(int)m_numCalledPhones-1;j++)
	{
		m_pCalledPhoneNumberList[j]=m_pCalledPhoneNumberList[j+1] ;
	}
	m_pCalledPhoneNumberList[m_numCalledPhones-1] = NULL;
	m_numCalledPhones--;
	
	return  STATUS_OK;
}


/////////////////////////////////////////////////////////////////////////////
int CRsrvParty::FindCalledPhoneNumber(const char*  phoneNumber)
{
	for (int i=0;i<(int)m_numCalledPhones;i++)
	{
		if (m_pCalledPhoneNumberList[i]!=NULL) {
			if (! strncmp(m_pCalledPhoneNumberList[i]->phone_number, phoneNumber,PHONE_NUMBER_DIGITS_LEN))
				return i;
		}
	}
	return NOT_FIND;
}


/////////////////////////////////////////////////////////////////////////////
int CRsrvParty::CancelCallingPhoneNumber(const char* phoneNumber)
{
	int ind;
	ind=FindCallingPhoneNumber(phoneNumber);
	if (ind==NOT_FIND) return STATUS_PHONE_NUMBER_NOT_EXISTS;
	
	PDELETE(m_pCallingPhoneNumberList[ind]);
	int i;
	for (i=0;i<(int)m_numCallingPhones;i++)
	{
		if (m_pCallingPhoneNumberList[i]==NULL)
			break;
	}
	int j;
	for (j=i;j<(int)m_numCallingPhones-1;j++)
	{
		m_pCallingPhoneNumberList[j]=m_pCallingPhoneNumberList[j+1] ;
	}
	m_pCallingPhoneNumberList[m_numCallingPhones-1] = NULL;
	m_numCallingPhones--;
	
	return  STATUS_OK;
}


/////////////////////////////////////////////////////////////////////////////
int CRsrvParty::FindCallingPhoneNumber(const char*  phoneNumber)
{
	for (int i=0;i<(int)m_numCallingPhones;i++)
	{
		if (m_pCallingPhoneNumberList[i]!=NULL) {
			if (! strncmp(m_pCallingPhoneNumberList[i]->phone_number, phoneNumber,PHONE_NUMBER_DIGITS_LEN))
				return i;
		}
	}
	return NOT_FIND;
}

/*
/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetNumType () const
{
	return m_numType;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetNumType(const BYTE numType)
{
	m_numType=numType;
}

/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetMultiRateMode () const
{
	return m_multiRateMode;
}


/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetMultiRateMode(const BYTE multiRateMode)
{
	m_multiRateMode=multiRateMode;
}
*/
/////////////////////////////////////////////////////////////////////////////
DWORD  CRsrvParty::GetIpAddress () const
{
	return m_ipAddress;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetIpAddress(const DWORD ipAddress)
{
	m_ipAddress = ipAddress;
	SLOWCHANGE;
}

/////////////////////////////////////////////////////////////////////////////
WORD  CRsrvParty::GetCallSignallingPort () const
{
	return m_callSignallingPort;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetCallSignallingPort(const WORD callSignallingPort)
{
	m_callSignallingPort = callSignallingPort;
}

/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetVideoProtocol () const
{
	return m_videoProtocol;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetVideoProtocol(const BYTE videoProtocol)
{
	m_videoProtocol = videoProtocol;
}
/*
/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetIsEncrypted () const
{
	return m_encryption;
}



/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetIsEncrypted(const BYTE isEncrypted)
{
	m_encryption = isEncrypted;
}
*/
/////////////////////////////////////////////////////////////////////////////
DWORD  CRsrvParty::GetVideoRate () const
{
	return m_videoRate;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetVideoRate(const DWORD videoRate)
{
	m_videoRate = videoRate;
}
/*
/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetBondingPhoneNumber(const Phone &other)
{
	strncpy(m_bondingPhoneNumber.phone_number,other.phone_number,PHONE_NUMBER_DIGITS_LEN);
	
}

/////////////////////////////////////////////////////////////////////////////
const Phone*  CRsrvParty::GetBondingPhoneNumber()  const
{
	return &m_bondingPhoneNumber;
}
*/
/////////////////////////////////////////////////////////////////////////////
WORD  CRsrvParty::GetH323PartyAliasType () const
{
	return m_h323PartyAliasType;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetH323PartyAliasType(const WORD h323PartyAliasType)
{
	m_h323PartyAliasType = h323PartyAliasType;
}

/////////////////////////////////////////////////////////////////////////////
WORD  CRsrvParty::GetSipPartyAddressType () const
{
	return m_sipPartyAddressType;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetSipPartyAddressType(const WORD partyAddressType)
{
	m_sipPartyAddressType = partyAddressType;
	SLOWCHANGE;
}

/////////////////////////////////////////////////////////////////////////////
const char*  CRsrvParty::GetH323PartyAlias () const
{
	return m_h323PartyAlias;
}
/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetH323PartyAlias(const char* name)
{
	int len=strlen(name);
	strncpy(m_h323PartyAlias, name, IP_STRING_LEN );
	if (len>IP_STRING_LEN)
		m_h323PartyAlias[IP_STRING_LEN-1]='\0';
}

/////////////////////////////////////////////////////////////////////////////
const char*  CRsrvParty::GetSipPartyAddress () const
{
	return m_sipPartyAddress;
}
/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetSipPartyAddress(const char* name)
{
	int len=strlen(name);
	strncpy(m_sipPartyAddress, name, IP_STRING_LEN );
	if (len>IP_STRING_LEN)
		m_sipPartyAddress[IP_STRING_LEN-1]='\0';
	SLOWCHANGE;
}

/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetAudioVolume () const
{
	return m_audioVolume;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetAudioVolume(const BYTE audioVolume)
{
	m_audioVolume = audioVolume;
	
	SLOWCHANGE;
}

/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetListeningAudioVolume() const
{
	return m_listening_audioVolume;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetListeningAudioVolume(const BYTE audioVolume)
{
	m_listening_audioVolume = audioVolume;
	
	SLOWCHANGE;
}

/////////////////////////////////////////////////////////////////////////////
WORD  CRsrvParty::IsUndefinedParty ()
{
	WORD result = FALSE;
	if (m_undefinedType == UNDEFINED_PARTY || m_undefinedType == UNRESERVED_PARTY)
		result = TRUE;
	
	return result;
}

/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::GetAutoDetect () const
{
	return m_autoDetect;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetAutoDetect(const BYTE autoDetect)
{
	m_autoDetect = autoDetect;
}
/*
/////////////////////////////////////////////////////////////////////////////
WORD  CRsrvParty::GetPhonesNumberForDialIn() const
{
	WORD num = 0;
	if (m_connectionType == DIAL_IN)
	{
		if (m_netInterfaceType==ISDN_INTERFACE_TYPE ||
			m_netInterfaceType==ATM_INTERFACE_TYPE || 
			m_netInterfaceType==T1CAS_INTERFACE_TYPE)
			num = 1;
		
        if (m_netInterfaceType==V35_INTERFACE_TYPE)
			if (GetMultiRateMode()==YES)
				num = 1;
			else
				num = m_netChannelNumber;
	}
	
	return num;
}
*/
/////////////////////////////////////////////////////////////////////////////
BYTE   CRsrvParty::GetUndefinedType () const
{
	return m_undefinedType;
}
/////////////////////////////////////////////////////////////////////////////
void   CRsrvParty::SetUndefinedType(const BYTE undefinedType)
{
    m_undefinedType = undefinedType;
}
/*
/////////////////////////////////////////////////////////////////////////////
BYTE   CRsrvParty::GetHighQualityVideo() const
{
    return m_high_qualityVideo;
}

/////////////////////////////////////////////////////////////////////////////
void   CRsrvParty::SetHighQualityVideo(const BYTE high_qualityVideo)
{
    m_high_qualityVideo = high_qualityVideo;
}


/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetSlowInfoBit(WORD oper_connectionId, WORD onOff)
{
    m_slowInfoMask.SetInfoBit(oper_connectionId, onOff);
}

/////////////////////////////////////////////////////////////////////////////
WORD CRsrvParty::GetSlowInfoBit(WORD oper_connectionId) const
{
    return m_slowInfoMask.GetInfoBit(oper_connectionId);
}

/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetSlow1InfoBit(WORD oper_connectionId, WORD onOff)
{
	m_slow1InfoMask.SetInfoBit(oper_connectionId, onOff);
}

/////////////////////////////////////////////////////////////////////////////
WORD CRsrvParty::GetSlow1InfoBit(WORD oper_connectionId) const
{
	return m_slow1InfoMask.GetInfoBit(oper_connectionId);
}

/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetFastInfoBit(WORD oper_connectionId, WORD onOff)
{
    m_fastInfoMask.SetInfoBit(oper_connectionId, onOff);
}

/////////////////////////////////////////////////////////////////////////////
WORD CRsrvParty::GetFastInfoBit(WORD oper_connectionId) const
{
    return m_fastInfoMask.GetInfoBit(oper_connectionId);
}

/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetAddPartyBit(WORD oper_connectionId, WORD onOff)
{
    m_addPartyMask.SetInfoBit(oper_connectionId, onOff);
}

/////////////////////////////////////////////////////////////////////////////
WORD CRsrvParty::GetAddPartyBit(WORD oper_connectionId) const
{
    return m_addPartyMask.GetInfoBit(oper_connectionId);
}
/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetCompleteInfoBit(WORD oper_connectionId, WORD onOff)
{
    m_completeInfoMask.SetInfoBit(oper_connectionId, onOff);
}

/////////////////////////////////////////////////////////////////////////////
WORD CRsrvParty::GetCompleteInfoBit(WORD oper_connectionId) const
{
    return m_completeInfoMask.GetInfoBit(oper_connectionId);
}

/////////////////////////////////////////////////////////////////////////////
void   CRsrvParty::SetSlowInfoMask(WORD onOff)
{
    if (onOff)
        m_slowInfoMask.SetAllBitsOn();
    else
        m_slowInfoMask.SetAllBitsOff();
}

/////////////////////////////////////////////////////////////////////////////
void   CRsrvParty::SetSlow1InfoMask(WORD onOff)
{
	if (onOff)
		m_slow1InfoMask.SetAllBitsOn();
	else
		m_slow1InfoMask.SetAllBitsOff();
}

/////////////////////////////////////////////////////////////////////////////
void   CRsrvParty::SetFastInfoMask(WORD onOff)
{
    if (onOff)
        m_fastInfoMask.SetAllBitsOn();
    else
        m_fastInfoMask.SetAllBitsOff();
}
*/
/////////////////////////////////////////////////////////////////////////////
void   CRsrvParty::SetAddPartyMask(WORD onOff)
{
    if (onOff)
        m_addPartyMask.SetAllBitsOn();
    else
        m_addPartyMask.SetAllBitsOff();
}
/*
/////////////////////////////////////////////////////////////////////////////
void   CRsrvParty::SetCompleteInfoMask(WORD onOff)
{
    if (onOff)
        m_completeInfoMask.SetAllBitsOn();
    else
        m_completeInfoMask.SetAllBitsOff();
}
/////////////////////////////////////////////////////////////////////////////
void   CRsrvParty::SetSlowInfoFlag(WORD onOff)
{
    m_slowInfoFlag = onOff;
	
}

/////////////////////////////////////////////////////////////////////////////
void   CRsrvParty::SetSlow1InfoFlag(WORD onOff)
{
	m_slow1InfoFlag = onOff;
	
}

/////////////////////////////////////////////////////////////////////////////
void   CRsrvParty::SetFastInfoFlag(WORD onOff)
{
    m_fastInfoFlag = onOff;
}

void   CRsrvParty::SetCompleteInfoFlag(WORD onOff)
{
    m_completeInfoFlag = onOff;
}

/////////////////////////////////////////////////////////////////////////////
WORD   CRsrvParty::GetSlowInfoFlag() const
{
    return m_slowInfoFlag;
}

/////////////////////////////////////////////////////////////////////////////
WORD   CRsrvParty::GetSlow1InfoFlag() const
{
	return m_slow1InfoFlag;
}

/////////////////////////////////////////////////////////////////////////////
WORD   CRsrvParty::GetFastInfoFlag() const
{
    return m_fastInfoFlag;
}

WORD   CRsrvParty::GetCompleteInfoFlag() const
{
    return m_completeInfoFlag;
}
*/
/////////////////////////////////////////////////////////////////////////////
void   CRsrvParty::SetInfoOpcode(WORD opcode)
{
    m_infoOpcode = opcode;
}

/////////////////////////////////////////////////////////////////////////////
WORD   CRsrvParty::GetInfoOpcode() const
{
    return m_infoOpcode;
}

/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetExtension(const char* extension)
{
	int len = strlen(extension);
	strncpy(m_extension, extension, PARTY_EXTENSION_LENGTH);
	
	if (len > PARTY_EXTENSION_LENGTH)
		m_extension[PARTY_EXTENSION_LENGTH-1] = '\0';
}
/////////////////////////////////////////////////////////////////////////////

const char* CRsrvParty::GetExtension() const
{
    return m_extension;
}
/////////////////////////////////////////////////////////////////////////////
/*void   CRsrvParty::SetRecordingPort(BYTE recording_port)
{
	m_recording_port = recording_port;
}

/////////////////////////////////////////////////////////////////////////////
BYTE   CRsrvParty::GetRecordingPort() const
{
	return m_recording_port;
}
/////////////////////////////////////////////////////////////////////////////
//Operator only functions
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
DWORD CRsrvParty::GetDBID () const
{
    return m_dwDBID;
}

/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetDBID (DWORD dwID)
{
    m_dwDBID=dwID;
}

/////////////////////////////////////////////////////////////////////////////
DWORD CRsrvParty::GetDBVersion () const
{
    return m_dwDBVersion;
}

/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetDBVersion (DWORD dwDBVersion)
{
    m_dwDBVersion=dwDBVersion;
}


/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetDBDirtyFlag (BYTE flag)
{
    m_bDBDirtyFlag=flag;
}

/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::IsDBDirtyFlag ()
{
    return m_bDBDirtyFlag;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetDBAllowChanges (BYTE flag)
{
    m_bDBAllowChanges=flag;
}

/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::IsDBAllowChanges ()
{
    return m_bDBAllowChanges;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetDBFirstTime (BYTE flag)
{
    m_bDBFirstTimeFlag=flag;
}

/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::IsDBFirstTime ()
{
    return m_bDBFirstTimeFlag;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetDBLink (BYTE flag)
{
    m_bDBLink=flag;
}

/////////////////////////////////////////////////////////////////////////////
BYTE  CRsrvParty::IsDBLink ()
{
    return m_bDBLink;
}

/////////////////////////////////////////////////////////////////////////////
const char*  CRsrvParty::GetDBLabel () const
{
    return m_DBLabel;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetDBLabel(const char* DBLabel)
{
	int len=strlen(DBLabel);
	strncpy(m_DBLabel, DBLabel, H243_NAME_LEN );
	if (len>H243_NAME_LEN-1)
		m_DBLabel[H243_NAME_LEN-1]='\0';
}

/////////////////////////////////////////////////////////////////////////////
const char*  CRsrvParty::GetDBOwner () const
{
    return m_DBOwner;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetDBOwner(const char* DBOwner)
{
	int len=strlen(DBOwner);
	strncpy(m_DBOwner, DBOwner, H243_NAME_LEN );
	if (len>H243_NAME_LEN-1)
		m_DBOwner[H243_NAME_LEN-1]='\0';
}

/////////////////////////////////////////////////////////////////////////////
const char*  CRsrvParty::GetDBName () const
{
    return m_DBName;
}

/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetDBName(const char* DBName)
{
	int len=strlen(DBName);
	strncpy(m_DBName, DBName, H243_NAME_LEN );
	if (len>H243_NAME_LEN-1)
		m_DBName[H243_NAME_LEN-1]='\0';
}

/////////////////////////////////////////////////////////////////////////////
DWORD CRsrvParty::GetDBResID () const
{
    return m_dwDBResId;
}

/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetDBResID (DWORD dwDBResID)
{
    m_dwDBResId=dwDBResID;
}

/////////////////////////////////////////////////////////////////////////////
DWORD CRsrvParty::GetwebUserId() const
{
    return m_webUserId;
}
/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetwebUserId(const DWORD newWebUserId)
{
    m_webUserId=newWebUserId;
}

/////////////////////////////////////////////////////////////////////////////
DWORD CRsrvParty::GetPnEpId() const
{
    return m_PnEpId;
}

/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetPnEpId (const DWORD PnEpId)
{
    m_PnEpId=PnEpId;
}

/////////////////////////////////////////////////////////////////////////////
DWORD CRsrvParty::GetBHId() const
{
    return m_BHId;
}

/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetBHId (const DWORD BHId)
{
    m_BHId=BHId;
}

// API - API_NUM_H323_QOS - 138
////////////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetQosIp(const BYTE status,
						  const BYTE isDiffService,
						  const BYTE tosValue,
						  const BYTE audioPriority,
						  const BYTE videoPriority)
{
    m_pQualityOfService->SetQosIp(status,
								  isDiffService,
								  tosValue,
								  audioPriority,
								  videoPriority);
}

////////////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetQosAtm(const BYTE status,
						   const BYTE audioPriority,
						   const BYTE videoPriority)
{
    m_pQualityOfService->SetQosAtm(status,audioPriority,videoPriority);
}
*/
///////////////////////////////////////
/////////////////////////////////// Private layout ////////////////////////////////////////
CVideoLayout*  CRsrvParty::GetCurPrivateVideoLayout() const
{
	for (int i=0; i<m_numPrivateVideoLayout;i++)
	{
		if(m_pPrivateVideoLayout[i]->IsActive())
			return m_pPrivateVideoLayout[i];
	}
	
	return NULL;
}

/////////////////////////////////////////////////////////////////////////////
WORD   CRsrvParty::GetNumPrivateVideoLayout() const
{
	return m_numPrivateVideoLayout;
}

/////////////////////////////////////////////////////////////////////////////
void   CRsrvParty::SetNumPrivateVideoLayout(const WORD num)
{
	m_numPrivateVideoLayout = num;
	SLOWCHANGE;
}

/////////////////////////////////////////////////////////////////////////////
int	CRsrvParty::AddPrivateVideoLayout(const CVideoLayout &other, BYTE bExistLayout)
{
	if (m_numPrivateVideoLayout>=MAX_VIDEO_LAYOUT_NUMBER)
		return  STATUS_MAX_VIDEO_LAYOUTS_EXCEEDED;
	
	if (FindPrivateVideoLayout(other)!=NOT_FIND)
		return UpdatePrivateVideoLayout(other);
	
	m_pPrivateVideoLayout[m_numPrivateVideoLayout] = new CVideoLayout(other);
	m_numPrivateVideoLayout++;
	
	SLOWCHANGE;
	
	//Set other layouts to inactive state
	if (!bExistLayout)
	{
		if (other.IsActive()){
			for (int i=0; i<m_numPrivateVideoLayout-1; i++)
				m_pPrivateVideoLayout[i]->SetActive(NO);
		}
	}
	
	return STATUS_OK;
}

/////////////////////////////////////////////////////////////////////////////
int	CRsrvParty::UpdatePrivateVideoLayout(const CVideoLayout &other)
{
	int ind;
	ind=FindPrivateVideoLayout(other);
	if (ind==NOT_FIND) return STATUS_VIDEO_SOURCE_NOT_EXISTS;
	
	POBJDELETE(m_pPrivateVideoLayout[ind]);
	m_pPrivateVideoLayout[ind] = new CVideoLayout(other);
	
	//Set other layouts to inactive state
	if (other.IsActive()){
		for (int i=0; i<m_numPrivateVideoLayout; i++)
			if (i!=ind)
				m_pPrivateVideoLayout[i]->SetActive(NO);
	}
	
	SLOWCHANGE;
	
	return STATUS_OK;
}

/////////////////////////////////////////////////////////////////////////////
int	CRsrvParty::CancelPrivateVideoLayout(const BYTE screenLayout)
{
	int ind;
	ind=FindPrivateVideoLayout(screenLayout);
	if (ind==NOT_FIND) return STATUS_VIDEO_SOURCE_NOT_EXISTS;
	
	POBJDELETE(m_pPrivateVideoLayout[ind]);
	int i;
	for (i=0;i<(int)m_numPrivateVideoLayout;i++)
	{
		if (m_pPrivateVideoLayout[i]==NULL)
			break;
	}
	int j;
	for (j=i;j<(int)m_numPrivateVideoLayout-1;j++)
	{
		m_pPrivateVideoLayout[j]=m_pPrivateVideoLayout[j+1] ;
	}
	m_pPrivateVideoLayout[m_numPrivateVideoLayout-1] = NULL;
	m_numPrivateVideoLayout--;
	
	SLOWCHANGE;
	return   STATUS_OK;
}

/////////////////////////////////////////////////////////////////////////////
int	CRsrvParty::FindPrivateVideoLayout(const CVideoLayout &other)
{
	int i;
	for (i=0;i<(int)m_numPrivateVideoLayout;i++)
	{
		if (m_pPrivateVideoLayout[i]!=NULL) {
			if (m_pPrivateVideoLayout[i]->GetScreenLayout()==other.GetScreenLayout())
				return i;
		}
	}
	return NOT_FIND;
}

/////////////////////////////////////////////////////////////////////////////
int	CRsrvParty::FindPrivateVideoLayout(const BYTE screenLayout)
{
	int i;
	for (i=0;i<(int)m_numPrivateVideoLayout;i++)
	{
		if (m_pPrivateVideoLayout[i]!=NULL) {
			if (m_pPrivateVideoLayout[i]->GetScreenLayout()==screenLayout)
				return i;
		}
	}
	return NOT_FIND;
}

/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetRefferedToUri(const char* refferedTo)
{
	int len = strlen(m_refferedToUri);
	strncpy(m_refferedToUri, refferedTo, IP_STRING_LEN);
	
	if (len > IP_STRING_LEN)
		m_refferedToUri[IP_STRING_LEN-1] = '\0';
}
/////////////////////////////////////////////////////////////////////////////

const char* CRsrvParty::GetRefferedToUri() const
{
    return m_refferedToUri;
}

/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetRefferedBy(const char* refferedBy)
{
	int len = strlen(m_refferedByUri);
	strncpy(m_refferedByUri, refferedBy, IP_STRING_LEN);
	
	if (len > IP_STRING_LEN)
		m_refferedByUri[IP_STRING_LEN-1] = '\0';
}
/////////////////////////////////////////////////////////////////////////////
const char* CRsrvParty::GetRefferedBy() const
{
    return m_refferedByUri;
}


/////////////////////////////////////////////////////////////////////////////
WORD CRsrvParty::CheckReservRangeValidity(BYTE &errorCode/*, DWORD apiNum*/)
{
//	if(apiNum < API_NUM_PRESENTATION_MODE)
	//	return STATUS_OK;
		
	errorCode = 100;

	switch(m_connectionType)
	{
		case(DIAL_OUT):
		case(DIAL_IN):
		case(DIRECT):
		{
			break;
		}
		default:
		{
			errorCode = 101;
			return STATUS_OUT_OF_RANGE;
		}
	}

/*	switch(m_bondingMode1)
	{
		case(0):
		case(1):
		case(0xFF):
		{
			break;
		}
		default:
		{
			errorCode = 102;
			return STATUS_OUT_OF_RANGE;
		}
	}
*/
	if(m_audioThreshold >= E_NOISE_DETECTION_THRESHOLD_LAST)
	{
		errorCode = 103;
		return STATUS_OUT_OF_RANGE;
	}

/*	if(m_netChannelWidth > Xfer_1472)
	{
		errorCode = 104;
		return STATUS_OUT_OF_RANGE;
	}
*/
/*
	switch(m_numType)
	{
		case(UNKNOWN):
		case(INTERNATIONAL_TYPE):
		case(NATIONAL_TYPE):
		case(NETWORK_SPECIFIC_TYPE):
		case(SUBSCRIBER_TYPE):
		case(ABBREVIATED_TYPE):
		case(0xFF):
		{
			break;
		}
		default:
		{
			errorCode = 105;
			return STATUS_OUT_OF_RANGE;
		}
	}
*/
	switch(m_identificationMethod)
	{
		case(PASSWORD_IDENTIFICATION_METHOD):
		case(CALLED_PHONE_NUMBER_IDENTIFICATION_METHOD):
		case(CALLING_PHONE_NUMBER_IDENTIFICATION_METHOD):
		{
			break;
		}
		default:
		{
			errorCode = 106;
			return STATUS_OUT_OF_RANGE;
		}
	}

	switch(m_meet_me_method)
	{ 
		case(DIAL_OUT):
		case(MEET_ME_PER_MCU):
		case(MEET_ME_PER_CONFERENCE):
		case(MEET_ME_PER_USER):
		case(MEET_ME_PER_CHANNEL):
		case(DIAL_IN):
		case(DIRECT):
		{
			break;
		}
		default:
		{
			errorCode = 107;
			return STATUS_OUT_OF_RANGE;
		}
	}

	if(m_numCallingPhones > MAX_CHANNEL_NUMBER)
	{
		errorCode = 108;
		return STATUS_OUT_OF_RANGE;
	}

	if(m_numCalledPhones > MAX_CHANNEL_NUMBER)
	{
		errorCode = 109;
		return STATUS_OUT_OF_RANGE;
	}

	switch(m_netInterfaceType)
	{
		case(ISDN_INTERFACE_TYPE):
		case(ATM_INTERFACE_TYPE):
		case(H323_INTERFACE_TYPE):
		case(SIP_INTERFACE_TYPE):
		case(V35_INTERFACE_TYPE):
        case(T1CAS_INTERFACE_TYPE):
		{
			break;
		}
		default:
		{
			errorCode = 110;
			return STATUS_OUT_OF_RANGE;
		}
	}

	switch(m_videoProtocol)
	{
		case(VIDEO_PROTOCOL_H261):
		case(VIDEO_PROTOCOL_H263):
		case(VIDEO_PROTOCOL_H26L):
		case(VIDEO_PROTOCOL_H264):
		case(AUTO):
		{
			break;
		}
		default:
		{
			errorCode = 111;
			return STATUS_OUT_OF_RANGE;
		}
	}

	switch(m_h323PartyAliasType)
	{
		case(PARTY_H323_ALIAS_H323_ID_TYPE):
		case(PARTY_H323_ALIAS_E164_TYPE):
		case(PARTY_H323_ALIAS_URL_ID_TYPE):
		case(PARTY_H323_ALIAS_TRANSPORT_ID_TYPE):
		case(PARTY_H323_ALIAS_EMAIL_ID_TYPE):
		case(PARTY_H323_ALIAS_PARTY_NUMBER_TYPE):
		{
			break;
		}
		default:
		{
			errorCode = 112;
			return STATUS_OUT_OF_RANGE;
		}
	}

	if(m_audioVolume > AUDIO_VOLUME_MAX)
	{
		errorCode = 113;
		return STATUS_OUT_OF_RANGE;
	}

	switch(m_undefinedType)
	{
		case(0):
		case(UNDEFINED_PARTY):
		case(UNRESERVED_PARTY):
		{
			break;
		}
		default:
		{
			errorCode = 114;
			return STATUS_OUT_OF_RANGE;
		}
	}

	if(m_numPrivateVideoLayout > MAX_VIDEO_LAYOUT_NUMBER)
	{
		errorCode = 115;
		return STATUS_OUT_OF_RANGE;
	}

	if(m_indCalling > MAX_CHANNEL_NUMBER)
	{
		errorCode = 116;
		return STATUS_OUT_OF_RANGE;
	}

	if(m_indCalled > MAX_CHANNEL_NUMBER)
	{
		errorCode = 117;
		return STATUS_OUT_OF_RANGE;
	}

	if(m_ind_prv_vid_layout > MAX_VIDEO_LAYOUT_NUMBER)
	{
		errorCode = 118;
		return STATUS_OUT_OF_RANGE;
	}

	if(m_netChannelNumber > 30 && m_netChannelNumber != AUTO)
	{
		errorCode = 119;
		return STATUS_OUT_OF_RANGE;
	}

	switch(m_sipPartyAddressType)
	{
	case(PARTY_SIP_SIPURI_ID_TYPE):
	case(PARTY_SIP_TELURL_ID_TYPE):
		{
			break;
		}
	default:
		{
			errorCode = 120;
			return STATUS_OUT_OF_RANGE;
		}
	}

	if(m_listening_audioVolume > AUDIO_VOLUME_MAX)
	{
		errorCode = 121;
		return STATUS_OUT_OF_RANGE;
	}

	//not sure about the range for the next params:
	//m_videoRate

	return STATUS_OK;
}


/////////////////////////////////////////////////////////////////////////////
CVideoLayout* CRsrvParty::GetFirstPrivateVideoLayout()
{
	m_ind_prv_vid_layout = 1;
	return m_pPrivateVideoLayout[0];
}

/////////////////////////////////////////////////////////////////////////////
CVideoLayout* CRsrvParty::GetNextPrivateVideoLayout()
{
	if (m_ind_prv_vid_layout>=m_numPrivateVideoLayout)
		return NULL;
	return m_pPrivateVideoLayout[m_ind_prv_vid_layout++];
}

/////////////////////////////////////////////////////////////////////////////
CVideoLayout* CRsrvParty::GetFirstPrivateVideoLayout(int& nPos)
{
	CVideoLayout* pPrivateVideoLayout = GetFirstPrivateVideoLayout();
	nPos = m_ind_prv_vid_layout;
	return pPrivateVideoLayout;
}

/////////////////////////////////////////////////////////////////////////////
CVideoLayout* CRsrvParty::GetNextPrivateVideoLayout(int& nPos)
{
	m_ind_prv_vid_layout = nPos;
	CVideoLayout* pPrivateVideoLayout = GetNextPrivateVideoLayout();
	nPos = m_ind_prv_vid_layout;
	return pPrivateVideoLayout;
}

/////////////////////////////////////////////////////////////////////////////
CVideoLayout* CRsrvParty::GetPrivateVideoLayout(const BYTE screenLayout)
{
	int ind = FindPrivateVideoLayout(screenLayout);
	if (ind==NOT_FIND) 
		return NULL;
	return m_pPrivateVideoLayout[ind];
}

/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::RemoveAllLayouts( )
{
	for( int i=0; i<(int)m_numPrivateVideoLayout; i++ )
		POBJDELETE(m_pPrivateVideoLayout[i]);
	m_numPrivateVideoLayout=0;
	m_ind_prv_vid_layout=0;
	
	SLOWCHANGE;
}
/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetIsPrivateLayout(BYTE isPrivateLayout)
{
	m_isPrivate = isPrivateLayout;
	
	SLOWCHANGE;
}
/////////////////////////////////////////////////////////////////////////////
BYTE CRsrvParty::GetIsPrivateLayout()
{
	return m_isPrivate;
}
/*
/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetUserDefinedInfo(const char*  UserInfo, int InfoNumber)
{
	m_pUserDefinedInfo->SetUserDefinedInfo(UserInfo,InfoNumber);
	IncreaseFullUpdateCounter();
	SLOWCHANGE;
}
*/
/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetIsVip(BYTE isVip)
{
	m_isVip = isVip;
	
	SLOWCHANGE;
}
/////////////////////////////////////////////////////////////////////////////
BYTE CRsrvParty::GetIsVip()
{
	return m_isVip;
}
/*
/////////////////////////////////////////////////////////////////////////////
const  char*   CRsrvParty::GetUserDefinedInfo(int InfoNumber) const
{
	return 	m_pUserDefinedInfo->GetUserDefinedInfo(InfoNumber);

}
/////////////////////////////////////////////////////////////////////////////
//toggles 'default template' flag
void CRsrvParty::SetDefaultPartyTemplate()
{
	m_defaultTemplate = !m_defaultTemplate;
}

/////////////////////////////////////////////////////////////////////////////
BYTE CRsrvParty::IsDefaultTemplate()
{
	return m_defaultTemplate;
}
*/
/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetEnableH323Pstn(BYTE onOff)
{
	m_EnableH323_PSTN = onOff;
	#ifdef __HIGHC__
		if(::GetpSystemCfg()->GetH323Pstn() == FALSE)
		{
			m_EnableH323_PSTN = NO;
		}
	#endif
}
/////////////////////////////////////////////////////////////////////////////
BYTE CRsrvParty::GetEnableH323Pstn()const
{
	BYTE rVal = m_EnableH323_PSTN;
	#ifdef __HIGHC__
		if(::GetpSystemCfg()->GetH323Pstn() == FALSE){
			rVal = NO;
		}
	#endif
	return rVal;
}


/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
void CRsrvParty::SetRecordingLinkParty(BYTE isRecordingLinkParty)
{
	m_isRecordingLinkParty = isRecordingLinkParty;
	
	SLOWCHANGE;
}


/////////////////////////////////////////////////////////////////////////////
BYTE CRsrvParty::GetRecordingLinkParty()
{
	return m_isRecordingLinkParty;
}

/////////////////////////////////////////////////////////////////////////////
const char*  CRsrvParty::GetUserIdentifierString () const
{
    return m_UserIdentifierString;
   
}

/*
/////////////////////////////////////////////////////////////////////////////
void  CRsrvParty::SetUserIdentifierString(const char*  userIdentifierString)
{
	int len=strlen(userIdentifierString);
	strncpy(m_UserIdentifierString, userIdentifierString, USER_IDENTIFIER_STRING_LEN);

	if (len>USER_IDENTIFIER_STRING_LEN)
		m_UserIdentifierString[USER_IDENTIFIER_STRING_LEN-1]='\0';

}


*/


