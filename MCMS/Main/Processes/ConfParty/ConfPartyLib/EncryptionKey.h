//+========================================================================+
//                       EncryptionKey.h                                   |
//            Copyright 1995 Polycom Ltd.					               |
//                   All Rights Reserved.                                  |
//-------------------------------------------------------------------------|
// NOTE: This software contains valuable trade secrets and proprietary     |
// information of Pictel Technologies Ltd. and is protected by law.        |
// It may not be copied or distributed in any form or medium, disclosed    |
// to third parties, reverse engineered or used in any manner without      |
// prior written authorization from Polycom Technologies Ltd.              |
//-------------------------------------------------------------------------|
// FILE:       EncryptionKey.h	                                           |
// SUBSYSTEM:  ConfParty                                                   |
// PROGRAMMER: Guy D,													   |
// Date : 19/12/05														   |
//-------------------------------------------------------------------------|
// Who | Date       | Description                                          |
//-------------------------------------------------------------------------|
//     |            |                                                      |
//+========================================================================+                        
/*

This header file contains the encryption info within the Carmel.

*/

#ifndef ENCRYPTIONKEY_H_
#define ENCRYPTIONKEY_H_

#include "ConfPartyGlobals.h"
#include "EncryptionKeyServerAPI.h"
#include "EncryptionCommon.h"

class CSegment;


static BYTE polycomPrime[]      = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc9,0xf,0xda,0xa2,0x21,0x68,0xc2,0x34,0xc4,0xc6,0x62,0x8b,0x80,0xdc,0x1c,0xd1,0x29,0x2,0x4e,0x8,0x8a,0x67,0xcc,0x74,0x2,0xb,0xbe,0xa6,0x3b,0x13,0x9b,0x22,0x51,0x4a,0x8,0x79,0x8e,0x34,0x4,0xdd,0xef,0x95,0x19,0xb3,0xcd,0x3a,0x43,0x1b,0x30,0x2b,0xa,0x6d,0xf2,0x5f,0x14,0x37,0x4f,0xe1,0x35,0x6d,0x6d,0x51,0xc2,0x45,0xe4,0x85,0xb5,0x76,0x62,0x5e,0x7e,0xc6,0xf4,0x4c,0x42,0xe9,0xa6,0x37,0xed,0x6b,0xb,0xff,0x5c,0xb6,0xf4,0x6,0xb7,0xed,0xee,0x38,0x6b,0xfb,0x5a,0x89,0x9f,0xa5,0xae,0x9f,0x24,0x11,0x7c,0x4b,0x1f,0xe6,0x49,0x28,0x66,0x51,0xec,0xe6,0x53,0x81,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
static BYTE tandbergH320Prime[] = {0xa4,0x78,0x8e,0x21,0x84,0xb8,0xd6,0x8b,0xfe,0x2,0x69,0xe,0x4d,0xbe,0x48,0x5b,0x17,0xa8,0xb,0xc5,0xf2,0x1d,0x68,0xf,0x1a,0x84,0x13,0x13,0x97,0x34,0xf7,0xf2,0xb0,0xdb,0x4e,0x25,0x37,0x50,0x1,0x8a,0xad,0x9e,0x86,0xd4,0x9b,0x60,0x4,0xbb,0xbc,0xf0,0x51,0xf5,0x2f,0xcb,0x66,0xd0,0xc5,0xfc,0xa6,0x3f,0xbf,0xe6,0x34,0x17,0x34,0x85,0xbb,0xbf,0x76,0x42,0xe9,0xdf,0x9c,0x74,0xb8,0x5b,0x68,0x55,0xe9,0x42,0x13,0xb8,0xc2,0xd8,0x91,0x62,0xab,0xef,0xf4,0x34,0x24,0x35,0xe,0x96,0xbe,0x41,0xed,0xd4,0x2d,0xe9,0x9a,0x69,0x61,0x63,0x8c,0x1d,0xac,0x59,0x8b,0xc9,0xd,0xa0,0x69,0xb5,0xc,0x41,0x4d,0x8e,0xb8,0x65,0x2a,0xdc,0xff,0x4a,0x27,0xd,0x56,0x7f};



/*static BYTE polycomPrime[]      = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
                                   0xc9,0x0f,0xda,0xa2,0x21,0x68,0xc2,0x34,
                                   0xc4,0xc6,0x62,0x8b,0x80,0xdc,0x1c,0xd1,
                                   0x29,0x02,0x4e,0x08,0x8a,0x67,0xcc,0x74,
                                   0x02,0x0b,0xbe,0xa6,0x3b,0x13,0x9b,0x22,
                                   0x51,0x4a,0x08,0x79,0x8e,0x34,0x04,0xdd,
                                   0xef,0x95,0x19,0xb3,0xcd,0x3a,0x43,0x1b,
                                   0x30,0x2b,0x0a,0x6d,0xf2,0x5f,0x14,0x37,
                                   0x4f,0xe1,0x35,0x6d,0x6d,0x51,0xc2,0x45,
                                   0xe4,0x85,0xb5,0x76,0x62,0x5e,0x7e,0xc6,
                                   0xf4,0x4c,0x42,0xe9,0xa6,0x37,0xed,0x6b,
                                   0x0b,0xff,0x5c,0xb6,0xf4,0x06,0xb7,0xed,
                                   0xee,0x38,0x6b,0xfb,0x5a,0x89,0x9f,0xa5,
                                   0xae,0x9f,0x24,0x11,0x7c,0x4b,0x1f,0xe6,
                                   0x49,0x28,0x66,0x51,0xec,0xe6,0x53,0x81,
                                   0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};

static BYTE tandbergH320Prime[] = {0xa4,0x78,0x8e,0x21,0x84,0xb8,0xd6,0x8b,
                                   0xfe,0x02,0x69,0x0e,0x4d,0xbe,0x48,0x5b,
                                   0x17,0xa8,0x0b,0xc5,0xf2,0x1d,0x68,0x0f,
                                   0x1a,0x84,0x13,0x13,0x97,0x34,0xf7,0xf2,
                                   0xb0,0xdb,0x4e,0x25,0x37,0x50,0x01,0x8a,
                                   0xad,0x9e,0x86,0xd4,0x9b,0x60,0x04,0xbb,
                                   0xbc,0xf0,0x51,0xf5,0x2f,0xcb,0x66,0xd0,
                                   0xc5,0xfc,0xa6,0x3f,0xbf,0xe6,0x34,0x17,
                                   0x34,0x85,0xbb,0xbf,0x76,0x42,0xe9,0xdf,
                                   0x9c,0x74,0xb8,0x5b,0x68,0x55,0xe9,0x42,
                                   0x13,0xb8,0xc2,0xd8,0x91,0x62,0xab,0xef,
                                   0xf4,0x34,0x24,0x35,0x0e,0x96,0xbe,0x41,
                                   0xed,0xd4,0x2d,0xe9,0x9a,0x69,0x61,0x63,
                                   0x8c,0x1d,0xac,0x59,0x8b,0xc9,0x0d,0xa0,
                                   0x69,0xb5,0x0c,0x41,0x4d,0x8e,0xb8,0x65,
                                   0x2a,0xdc,0xff,0x4a,0x27,0x0d,0x56,0x7f};*/

/*
extern "C" void DHEntryPoint(void* appParam);
*/
//class CDHKey;

/*#define LengthSharedSecret 128*/
#define SharedSecretToSend 32
#define LengthXmitRcvKey   16
#define LengthMasterKey    20
#define LengthEncAuthKey   16

#define POLYCOM_DH_GENERATOR 2
#define TANBERG_H320_DH_GENERATOR 5
#define TANBERG_H323_DH_GENERATOR 3
//template class std::vector < CdhEntry*> ;
/////////////////////////////////////////////////////////////////////////////
class CDHKey : public CPObject
{
CLASS_TYPE_1(CDHKey, CPObject)
public:
                               
    CDHKey(DWORD len = HALF_KEY_SIZE);
    CDHKey(CDHKey& other);
    virtual ~CDHKey();
	CDHKey& operator= (const CDHKey& other);
    virtual const char*  NameOf() const;

	void  DeSerialize(WORD format,CSegment& seg, BYTE bIsIPKey = FALSE);
	void  Serialize(WORD format,CSegment& seg, BYTE bIsIPKey = FALSE);
	BYTE* GetArray();
	void  SetArray(BYTE *pString,DWORD len=HALF_KEY_SIZE);
	DWORD GetLength() const;
	WORD  IsEqualsZero()  const;
	friend WORD  operator==(const CDHKey& rDHKey1,const CDHKey& rDHKey2);
	void    PrintToTrace();

protected:

	BYTE   *m_pKeyArray;
	DWORD	m_length;
};



//--------------------------------- DH Events ------------------------------
//const WORD  DH_DB_EVENT         = 5555; //temp value van be moved to the confparty opcodes later - Udi
//---------------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////////////

class CDHKeyManagement : public CPObject
{
CLASS_TYPE_1(CDHKeyManagement, CPObject)
public:

	// Constructors
	CDHKeyManagement();
	virtual ~CDHKeyManagement();
	CDHKeyManagement(CDHKeyManagement& other);
	virtual CDHKeyManagement& operator= (const CDHKeyManagement& other);
	virtual const char*  NameOf() const {return "CDHKeyManagement";};
	CDHKey* GetDHLocalRnd() {return m_pDHLocalRnd;};
	CDHKey* GetDHRmtSharedSecret() {return m_pDHRmtSharedSecret;};
	CDHKey* GetDHLocalSharedSecret() {return m_pDHLocalSharedSecret;};
	CDHKey* GetDHResultSharedSecret() {return m_pDHResultSharedSecret;};
	BYTE	GetGenerator() {return m_generator;}
	BYTE	CheckKeyManagementProcessCompleted();		
	CDHKey* GetDHRmtPrime() {return m_pRmtPrime;};
	void SetDHRmtSharedSecret(CDHKey &other);
	void SetDHResultSharedSecret(CDHKey &other);	
	virtual void	SetGenerator(BYTE generator) {m_generator = generator;}

	CDHKey* m_pDHLocalRnd;			//X
	CDHKey* m_pDHRmtSharedSecret;	//rmt g^X	
	CDHKey* m_pDHLocalSharedSecret; //local g^X
	CDHKey* m_pDHResultSharedSecret;//
	BYTE	m_generator;
	CDHKey* m_pRmtPrime;			//remote prime		

protected:

};
/////////////////////////////////////////////////////////////////////////////
class CIpDHKeyManagement : public CDHKeyManagement
{
CLASS_TYPE_1(CIpDHKeyManagement, CDHKeyManagement)
public:
	// Constructors
	CIpDHKeyManagement();
	virtual ~CIpDHKeyManagement();
	CIpDHKeyManagement(CIpDHKeyManagement& other);
	virtual CIpDHKeyManagement& operator= (const CIpDHKeyManagement& other);
	virtual const char*  NameOf() const {return "CIpDHKeyManagement";}
	virtual void SetGenerator(BYTE generator);
	void InitLocalHalfKey(const EncryptedKey& encryptedKey);
	void SetLocalHalfKeyAlg(DWORD halfKeyAlg) {m_localHalfKeyAlg = halfKeyAlg;}
	DWORD GetLocalHalfKeyAlg() {return m_localHalfKeyAlg;}
	void SetRmtHalfKeyAlg(DWORD halfKeyAlg) {m_rmtHalfKeyAlg = halfKeyAlg;}
	DWORD GetRmtHalfKeyAlg() {return m_rmtHalfKeyAlg;}
	DWORD GetLocalHalfKeyLen() const;
	void SetEncCallKey(unsigned char *pStr,int startIndex);
//	void SetMasterKey(unsigned char *pStr);
	CDHKey  *GetMasterKey() const {return m_pMaster;}
	CDHKey  *GetAuthCallKey() const {return m_pAuthCall;}
	CDHKey  *GetEncrCallKey() const {return m_pEncCall;}
	void	SetIndexTblAuth(DWORD index) {m_indexTblAuth = index;}
	DWORD   GetIndexTblAuth() const {return m_indexTblAuth;}


protected:
	DWORD				m_localHalfKeyAlg;	//In dialOut-local halfKey, dialIn-rmt halfKey
	DWORD				m_rmtHalfKeyAlg;
	CDHKey				*m_pMaster;
	CDHKey				*m_pAuthCall;
	CDHKey				*m_pEncCall;
	DWORD				m_indexTblAuth;

};

#endif /*ENCRYPTIONKEY_H_*/
