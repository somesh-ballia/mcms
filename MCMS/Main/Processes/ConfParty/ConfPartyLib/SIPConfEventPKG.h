
//=================================================================================================
//
//Copyright (C) 2005 POLYCOM
//This file contains confidential information proprietary to ACCORD Networks Ltd. The use or 
//disclosure of any information contained in this file without the written consent of an officer of
//ACCORD Networks Ltd. is expressly forbidden.
//
//=================================================================================================

//=================================================================================================
//
//Module Name:  SIPConfEventPKG.h
//
//General Description:  
//
//    1.	Conference Event package
//
//Generated By:                           Date: 
//
//Revisions and Updates: 
//
//Date         Updated By         Description
//========   ==============   =====================================================================
// 
//=================================================================================================

#ifndef __SIP_EVENTPACKAGE_H__
#define __SIP_EVENTPACKAGE_H__


#include "TaskApp.h"
#include "SipEventPackageCommon.h"
#include "Conf.h"
#include "ObjString.h"
#include "SIPMsftCX.h"
/*
enum{
	eNoChange = 0,
	ePartialData,
	eFullData,
	eDelletedData
}typedef eTypeState;


enum{
	eRegular,
	eSendNotifyBeforeDelete,
	eNotifyWasSent
}typedef eItemState;
*/

//#define MEDIA_STREAMS	4
#define NUM_OF_MEDIA	2
#define NUM_OF_ACTIONS  4
#define MAX_NOTIFY_CONTENT_LEN		14336
// ************************************************************************************
//
//	CBasicConfPackageType
//
// ************************************************************************************
/*

class CBasicConfPackageType : public CPObject
{
	CLASS_TYPE_1(CBasicConfPackageType, CPObject )	

// public functions
public: 
	
	virtual const char* NameOf() const { return "CBasicConfPackageType";}
	CBasicConfPackageType();
	CBasicConfPackageType(char* pName);
	virtual ~CBasicConfPackageType();

	virtual void	SerializeXml(CXMLDOMElement* pFatherNode) = 0;

	const char*		GetElementName();

protected:

	char	m_elementName[H243_NAME_LEN];
};


// ************************************************************************************
//
//	CConfPackageType
//
// ************************************************************************************


class CConfPackageType : public CBasicConfPackageType
{
	CLASS_TYPE_1(CConfPackageType, CBasicConfPackageType )
// public functions
public: 
	CConfPackageType();
	CConfPackageType(char* pName);
	virtual const char* NameOf() const { return "CConfPackageType";}
	virtual ~CConfPackageType();

	virtual void	SerializeXml(CXMLDOMElement* pFatherNode);
	virtual void	SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull) = 0;
	virtual void	SerializeState(CXMLDOMElement* pFatherNode, BYTE bFull);

	eTypeState GetState();
	const char* GetStateByString();
	
	void GetState(eTypeState state);
	
protected:

	eTypeState m_state;
};
*/
// ************************************************************************************
//
//	CMediaType
//
// ************************************************************************************

class CMediaType : public CConfPackageType
{
	CLASS_TYPE_1(CMediaType, CConfPackageType )
// public functions
public: 
	CMediaType();
	CMediaType(eMediaStatusType mediaStatus/*,DWORD idAttribute*/);
	virtual const char* NameOf() const { return "CMediaType";}
	CMediaType(eMediaContentType mediaContent , eMediaStatusType mediaStatus=eSendRecv);
	virtual ~CMediaType();

	virtual void	SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull);

//	const char*		GetIdAsString();
//	void 			SetIdAttribute(DWORD idAttribute);
	
	eMediaStatusType GetMediaStatus();
	const char* GetMediaStatusAsString();
	const char* GetContentAsString();
	eMediaContentType GetContent();
	//for media
	void  	SetMediaStatus(eMediaStatusType mediaType);
	void	MuteMedia(BYTE onOff);
	BYTE	IsMuted();
	
protected:

//	DWORD m_idAttribute;
	eMediaStatusType	m_MediaStatus;
	eMediaContentType	m_MediaContent;
};

// ************************************************************************************
//
//	CEndPointType
//
// ************************************************************************************

class CEndPointType : public CConfPackageType
{
	CLASS_TYPE_1(CEndPointType, CConfPackageType )
// public functions
public: 
	CEndPointType();
	CEndPointType(const char*  endpointName/*,WORD isAudioOnly*/);
	virtual const char* NameOf() const { return "CEndPointType";}
	virtual ~CEndPointType();

	virtual void	SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull);
	virtual void	SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull,WORD bIsAudioOnly);
	eEndPointStatusType	GetEndPointStatus();		
	char*			 	GetEndPointStatusByString() const;
	const char* 		GetEndpointUri();
	
//	void 		SetEndPointStatus(eEndPointStatusType endPointStatus);
	/*void*/BYTE 		SetEndPointStatus(DWORD status);
	void  		SetMediaStatus(eMediaStatusType mediaType);
	void		MuteViaFocus(BYTE mutedViaFocus, eMediaContentType mediaType);
	BYTE  		IsMutedViaFocus(eMediaContentType mediaType);
//	const char*		GetIdAsString();
//	void 			SetIdAttribute(DWORD idAttribute);
	//for media
	void	MuteMedia(eMediaContentType mediaType,BYTE onOff);
	BYTE	IsMuted(eMediaContentType mediaType);
	
protected:
	CSmallString	m_endpointEntity;
//	CMediaType*	m_pMedia;
	CMediaType*	m_pMediaStream[NUM_OF_MEDIA];
	eEndPointStatusType	m_EndPointStatus;
	BYTE m_audioMutedViaFocus;
	BYTE m_videoMutedViaFocus;
};



// ************************************************************************************
//
//	CActionType
//
// ************************************************************************************

class CActionType : public CConfPackageType
{
	CLASS_TYPE_1(CActionType, CConfPackageType )
// public functions
public: 
	CActionType();
	CActionType(eActionType actionType);	
	virtual const char* NameOf() const { return "CActionType";}
	virtual ~CActionType();

	virtual void	SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull);
	
	eActionType GetActionType();
	const char* GetActionTypeAsString();
	void SetActionType(eActionType actionType);	
	void SetActionTypeStatus(eActionType actionType);
protected:

	eActionType	m_ActionType;
};

// ************************************************************************************
//
//	CUserActions
//
// ************************************************************************************

class CUserActions : public CConfPackageType
{
	CLASS_TYPE_1(CUserActions, CConfPackageType )
// public functions
public: 
	CUserActions();
	CUserActions(const char*  userName);
	virtual const char* NameOf() const { return "CUserActions";}
	virtual ~CUserActions();

	virtual void	SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull);
	virtual void	SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull,WORD bIsAudioOnly);
	
	eTypeState GetUserActionTypeState(eActionType actionType);
/*	
	eActionType	GetUserActionType();		
	char*			 	GetUserActionTypeByString() const;
*/
	void 		SetUserActionType(eActionType type);
	
protected:
	CSmallString	m_userEntity;
	CActionType*	m_pActionStream[NUM_OF_ACTIONS];
//	eUserActionType	m_UserActionType;
};






// ************************************************************************************
//
//	CPartyExtension
//
// ************************************************************************************

class CPartyExtension : public CConfPackageType
{
	CLASS_TYPE_1(CPartyExtension, CConfPackageType )
// public functions
public: 
	CPartyExtension();
	CPartyExtension(const char* userEntity,const char* userContactInfo,DWORD partyId);
	virtual const char* NameOf() const { return "CPartyExtension";}
	virtual ~CPartyExtension();

	virtual void	SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull);
	virtual void	SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull,WORD bIsAudioOnly);
	
	eTypeState GetUserActionTypeState(eActionType actionType);
	void 		SetUserActionType(eActionType type);
	const 	char*   GetUserContactInfo() const;
	void 	SetUserContactInfo(const char* userContactInfo);
	
	DWORD 		GetPartyId();
protected:
	DWORD 			m_partyId;
	CSmallString	m_userContactInfo;
	CUserActions*   m_pUserActions;
//	eUserActionType	m_UserActionType;
};

// ************************************************************************************
//
//	CActiveSpeaker
//
// ************************************************************************************


class CActiveSpeaker : public CConfPackageType
{
	CLASS_TYPE_1(CActiveSpeaker, CConfPackageType )
// public functions
public: 
	CActiveSpeaker();
//	CActiveSpeaker(CCommConf* pCommConf);
	virtual const char* NameOf() const { return "CActiveSpeaker";}
	virtual ~CActiveSpeaker();

	virtual void	SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull);

//	void	SetActive(BYTE onOff);
	void	SetActiveSpeaker(const char* activeSpeaker, const char* speakerUri);

//	BYTE	GetActive();
	const char* 	GetActiveSpeaker() const;
	const char* 	GetSpeakerUri() const;
	void 			SetSpeakerContactInfo(const char* userContactInfo);
	const char* 	GetSpeakerContactInfo() const;
	void 			SetSpeakerPartyId(DWORD partyId);
	DWORD 			GetSpeakerPartyId();
protected:

	CSmallString m_speakerUri;
	CSmallString m_activeSpeaker;
	CSmallString m_speakerContactInfo;
	DWORD   m_partyId;

};





// ************************************************************************************
//
//	CConfExtension
//
// ************************************************************************************


class CConfExtension : public CConfPackageType
{
	CLASS_TYPE_1(CConfExtension, CConfPackageType )
// public functions
public: 
	CConfExtension();
	CConfExtension(const char* contactInfo,DWORD confId);
	virtual const char* NameOf() const { return "CConfExtension";}
	virtual ~CConfExtension();

	virtual void	SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull);

	void	SetActive(BYTE onOff);
	void	SetActiveSpeaker(const char* activeSpeaker, const char* speakerUri);

	BYTE	GetActive();
	const char* 	GetActiveSpeaker() const;
	const char* 	GetSpeakerUri() const;
	void 			SetSpeakerContactInfo(const char* userContactInfo);
	const char* 	GetSpeakerContactInfo() const;
	void			SetConfContactInfo(const char* contactInfo);
	const char* 	GetConfContactInfo() const;
	DWORD 			GetConfId();
	void 			SetSpeakerPartyId(DWORD partyId);
	DWORD 			GetSpeakerPartyId();
	
	
protected:

	BYTE	m_bActive;
	CActiveSpeaker* m_pActiveSpeaker;
	CSmallString 	m_confContactInfo;
//	CSmallString m_activeSpeaker;
//	CSmallString m_speakerUri;
//	CSmallString m_speakerContactInfo;
	DWORD   m_confId;

};

/*
// ************************************************************************************
//
//	CConfStateType
//
// ************************************************************************************


class CConfStateType : public CConfPackageType
{
	CLASS_TYPE_1(CConfStateType, CConfPackageType )
// public functions
public: 
	CConfStateType();
	CConfStateType(CCommConf* pCommConf);
	virtual const char* NameOf() const { return "CConfStateType";}
	virtual ~CConfStateType();

	virtual void	SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull);

	void	SetActive(BYTE onOff);
	void	SetActiveSpeaker(const char* activeSpeaker, const char* speakerUri);

	BYTE	GetActive();
	const char* 	GetActiveSpeaker() const;
	const char* 	GetSpeakerUri() const;
	void 			SetSpeakerContactInfo(const char* userContactInfo);
	const char* 	GetSpeakerContactInfo() const;
protected:

	BYTE	m_bActive;
	CSmallString m_activeSpeaker;
	CSmallString m_speakerUri;
	CSmallString m_speakerContactInfo;

};
*/
// ************************************************************************************
//
//	CUserType
//
// ************************************************************************************


class CUserType : public CConfPackageType
{
	CLASS_TYPE_1(CUserType, CConfPackageType )
// public functions
public: 
	CUserType();
	CUserType(CConfParty* pConfParty,BOOL bIsWebDialInParty=FALSE);
	virtual const char* NameOf() const { return "CUserType";}
	virtual ~CUserType();

	virtual void	SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull);
	virtual void	SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull, BYTE bIsNewSubscriber);

	friend WORD operator==(const CUserType& first,const CUserType& second);

	void	MarkForDelete();
	BYTE	IsMarkedForDelete();
	BYTE	CanDelParty();

	/*void*/BYTE	SetEndPointStatus(DWORD status/*, DWORD attendedStatus*/);	
	void	MuteViaFocus(BYTE mutedViaFocus, eMediaContentType mediaType);	
	BYTE	IsMutedViaFocus(eMediaContentType mediaType);
//	void	SetDialOutParty();
//	BYTE	SetDisconnectReason(DWORD reason);
//	void	SetActiveSpeaker(BYTE onOff);
	void	SetUriAttribute(char* uri);

//	const char*	GetDisplayName() const;
//	char*	GetPartyRole() const;
	char*	GetPartyStatus() const;
//	char*   GetPartyJoinMode() const;
//	char*	GetPartyDisconnectReason() const;
	DWORD	GetUserId();
	const   char*	GetUriAttribute() const;
	const 	char*   GetUserContactInfo() const;
	void 	SetUserContactInfo(const char* userContactInfo);
//	const 	char*   GetUserName() const;
	BYTE 	WasUpdated();

	//for media
	void	MuteMedia(eMediaContentType mediaType, BYTE onOff);
	void	SetMediaStatus(eMediaStatusType mediaType);
	BYTE	IsMediaMuted(eMediaContentType mediaType);
	BOOL	GetIsWebDialInParty();

protected:

	BOOL 	m_bIsWebDialInParty;
	DWORD	m_userId;
	WORD	m_bIsAudioOnly;
//	CSmallString	m_sipUri;
//	eTypeState	m_status;
//	BYTE	m_activelyTalking;
	CEndPointType* m_pEndPoint;
	CUserActions* m_pUserActions;
	
	CPartyExtension* m_pPartyExtension;
	
//	CMediaType*	m_pMediaStream[MEDIA_STREAMS];
	CSmallString	m_uriAttribute;
//	CSmallString	m_userName;
	CSmallString	m_userContactInfo;
//	eItemState	m_sendDataBeforeDeleted;
	BYTE	 m_markedforDelete;
};

// ************************************************************************************
//
//	CConfInfoType
//
// ************************************************************************************

class CConfInfoType : public CConfPackageType
{
	CLASS_TYPE_1(CConfInfoType, CConfPackageType )
// public functions
public: 
	CConfInfoType();
	CConfInfoType(CCommConf* pCommConf, const char* confUri,const char* contactInfo/*,unsigned int version*/);
	virtual const char* NameOf() const { return "CConfInfoType";}
	virtual ~CConfInfoType();

	virtual void	SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull);
	virtual void	SerializeXml(CXMLDOMElement* pFatherNode, BYTE bFull, BYTE bIsNewSubscriber);

	const char*	GetEntity();
	CUserType*	FindUser(DWORD partyId);
//	CUserType* FindUser(const char* partyUri);

	BYTE	WasUpdated();

	//party functions
	void	AddParty(CConfParty* pConfParty, BOOL bIsWebDialInParty );
	void	DelParty(DWORD partyId, int numSubscribers);
	void	DelDisconnectedParties();
	void	DelDelletedParties();
	void	SetEndPointStatus(DWORD partyId, DWORD status/*, DWORD attendedStatus, int len*/);
	void	SetActiveSpeaker(const char* speaker, DWORD partyId);
	void 	SetUserContactInfo(const char* userContactInfo, DWORD partyId);
	void	SetActive(DWORD onOff);
	void	SetUriAttribute(DWORD partyId, char* uri);
	void	MutePartyMedia(DWORD partyId, eMediaContentType mediaType, BYTE onOff);
	void	MuteViaFocus(DWORD partyId, eMediaContentType mediaType, BYTE mutedViaFocus);
	BYTE  	IsMutedViaFocus(eMediaContentType mediaType);	
	const char* 	GetActiveSpeaker() const;
	
	void	SetConfContactInfo(const char* contactInfo);
	const char* GetConfContactInfo() const;
	//conf properties functions
//	DWORD    GetConfID(){return m_confID;}
protected:

	void	SetupUsersList(CCommConf* pCommConf);

//	DWORD m_confID;
//	CConfStateType*	m_pConfState;
	CConfExtension*				m_pConfExtension;
	std::vector< CUserType * > 	m_UsersList;
	CSmallString				m_entityAtr;
	unsigned int 				m_version;
//	CSmallString m_confContactInfo;
};


#endif
