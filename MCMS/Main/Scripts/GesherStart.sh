#!/bin/sh

export MCU_HOME_DIR=

################################ HELP ##################################
if [ "$1" == "" ]
then
	echo "usage: GesherStart.sh COMMAND"
	echo "commands:"
	echo "start - start all gesher processes"
	echo "target - start all gesher processes"
	echo "stop - stop all gesher processes"
	exit 
fi

export LOG_GESHER_START=/tmp/startup_logs/GesherStart.log
################################## START ##################################
start ()
{
	if [ $(whoami) == "root" ]
	then
		echo "You can't run this script as root!!!"
		exit
	fi

	MFA_WITH_VALGRIND="NO"
	if [[ "$1" != "" && "$1" == "mfa" ]]
	then
		MFA_WITH_VALGRIND="YES"	
	fi
				
	echo "starting all Gesher processes..."
	export LD_LIBRARY_PATH=$MCMS_DIR/Bin:$CS_DIR/lib:$MCU_HOME_DIR/usr/rmx1000/bin
	export ENDPOINTSSIM=NO
	export GIDEONSIM=NO
	export CLEAN_AUDIT_FILES=NO
	export CLEAN_CDR=NO
	export CLEAN_CFG=NO
	export CLEAN_FAULTS=NO
	export CLEAN_LOG_FILES=NO
	export CLEAN_MEDIA_RECORDING=NO
	export CLEAN_STATES=NO
	export MPL_SIM_FILE=VersionCfg/MPL_SIM_SWITCH_ONLY.XML
	export VM=NO

	unset RMX_4000
	unset RMX_1500
	unset RMX_1500Q
	unset CG
	unset SOFT_MCU
	unset SOFT_MCU_MFW
	unset SOFT_MCU_EDGE
	unset GESHER
	unset NINJA

	if [ "$CLEAN_CFG" != "YES" ]
	then
		echo "CONFIGURATION FILES WILL NOT BE CLEANED"
		export CLEAN_CFG=NO
	fi

	PRODUCT_TYPE=$(cat $MCU_HOME_DIR/mcms/ProductType)
	
	if [ "$PRODUCT_TYPE" == "SOFT_MCU_MFW" ]
	then
		export SOFT_MCU_MFW=YES
		export SOFT_MCU_FAMILY=YES
		echo "Working with Soft MCU MFW"
	elif [ "$PRODUCT_TYPE" == "SOFT_MCU" ]
	then
		export SOFT_MCU=YES
		export SOFT_MCU_FAMILY=YES
		echo "Working with Soft MCU"
	elif [ "$PRODUCT_TYPE" == "SOFT_MCU_EDGE" ]
	then
		export SOFT_MCU_EDGE=YES
		export SOFT_MCU_FAMILY=YES
		echo "Working with Soft MCU EDGE"
	elif [ "$PRODUCT_TYPE" == "GESHER" ]
	then
		export GESHER=YES
		echo "Working with Gesher"
	elif [ "$PRODUCT_TYPE" == "NINJA" ]
	then
		export NINJA=YES
		echo "Working with Ninja"
	else
		export GESHER=YES
		echo "Working with Gesher"
	fi

	if [[ "$PRODUCT_TYPE" == "GESHER" || "$PRODUCT_TYPE" == "NINJA" ]]
	then
		# to make sure processes are running
		Process_Diagnostic=$(ps -ef | grep DiagModule | grep -v grep)
		if [ "" == "${Process_Diagnostic}" ]
		then
			echo "Diagnositc process is not running."
		else
			echo "Diagnositc process is running. Do not start conference relevant processes."
			exit
		fi
	fi

	/bin/cp -Rdpvf $MCU_HOME_DIR/mcms/Scripts/TLS/passphrase.sh $MCU_HOME_DIR/tmp
	/bin/cp -Rdpvf $MCU_HOME_DIR/mcms/Scripts/TLS/passphraseplcm.sh $MCU_HOME_DIR/tmp
	chown mcms:mcms $MCU_HOME_DIR/tmp/passphrase.sh
	chown mcms:mcms $MCU_HOME_DIR/tmp/passphraseplcm.sh

	cd $MCMS_DIR
	echo "STARTING MCMS"
	if [ "$PRODUCT_TYPE" == "GESHER" ]
	then
		echo "Gesher Bringing up eth0 first..."
		Scripts/GesherUpEths.sh
		echo "Run Gesher McmsStart.sh ..."
		Scripts/GesherMcmsStart.sh &
	elif [ "$PRODUCT_TYPE" == "NINJA" ]
	then
		echo "Ninja Bringing up eth0 first..."
		Scripts/GesherUpEths.sh
		echo "Run Ninha McmsStart.sh ..."
		Scripts/GesherMcmsStart.sh &
	else
		echo "ERROR: Unsupported ProductType: $PRODUCT_TYPE ."
		exit 1
	fi

	sleep 5
#   laucher Mp related process by MpWatcher.sh
#	cd $MPMX_DIR
#	echo "STARTING MPMX"
#	(
#		echo "# Generated by GesherStart.sh"
#		echo export SIMULATION=YES
#		echo export RUN_MCMS=NO
#		echo export GDB=NO
#		echo export VALGRIND=$MFA_WITH_VALGRIND
#		echo export DMALLOC_SIM=NO
#		echo export EFENCE_SIM=NO
#		echo export TRACE_IPMC_PROTOCOL=NO
#		echo export PLATFORM=RMX2000
#	) > ./mfa_x86_env/cfg/runmfa.export
#	(	
#		export LD_LIBRARY_PATH=$MPMX_DIR/mfa_x86_env/bin
#		./Script/runmfa.sh & 2>/dev/null 1>/dev/null
#	)&
    
	# to make sure processes are running
	Process_MpWatcher=$(ps -ef | grep MpWatcher.sh | grep -v grep)
	if [ "" == "${Process_MpWatcher}" ]
	then
   		 $MCU_HOME_DIR/mcms/Scripts/MpWatcher.sh &
	fi
	DSP_CHECK=$(sudo /usr/rmx/bin/ninja_dsp_check)
	echo "The result of checking DSP is ${DSP_CHECK}" | tee -a ${LOG_GESHER_START}
	if [[ "" != "${DSP_CHECK}" && "0" != "$((${DSP_CHECK}&0x40000))" ]]
	then
		echo "It is ISDN version, launching IsdnRtpConvertor ......." | tee -a ${LOG_GESHER_START}
		/usr/rmx/bin/IsdnRtpConvertor &
	fi
	
	# run rmx1000 parts
	echo "STARTING RMX1000 LAUNCHER"
	$MCU_HOME_DIR/usr/rmx1000/bin/launcher &

	
	cd $ENGINE_DIR
	echo "STARTING ENGINEMRM"
	./mrm.sh all &

	cd $CS_DIR
	echo "STARTING CS"
	if [ "$VM" == "YES" ]
	then
		echo "CS will be started from McmsDaemon[dev]" 
	else
		echo "CS will be started from McmsDaemon[rel]"
	fi

	# wait until CS is ended...
        
        #start snmpd
        #sleep 5
        #echo "STARTING snmpd"
        #(sudo env LD_LIBRARY_PATH=$MCU_HOME_DIR/mcms/Bin /sbin/snmpd -c $MCU_HOME_DIR/tmp/snmpd.conf)&  
	exit 0
}

################################## TARGET ##################################
target () 
{
	echo "Gesher Start ..."
	ulimit -n 4096
	su - mcms -c "cd $MCMS_DIR ; . Scripts/SoftMcuExports.sh ; ./Scripts/GesherStart.sh start $1 &"
}

################################## STOP ##################################
stop () 
{
    export LD_LIBRARY_PATH=$MCU_HOME_DIR/mcms/Bin
    cd $MCMS_DIR
    echo -n "Flushing Logger..."
    Bin/McuCmd flush Logger < /dev/null
    sleep 2
    echo "Done"

    echo "stopping all soft mcu process..."

    # nice termination first
    ############################################
	#MpWatcher.sh
	killall -9 MpWatcher.sh
    # MRM
    killall -2 MRM-MrmMain 2>/dev/null
    # RMX1000 
    sudo killall launcher sys mp audio_soft traced Proxy sys_status_moni ManageMcuMenu menu httpd mpproxy video sys_status_monitor 2>/dev/null

    # mfa
    killall -9 IpmcSim.x86 mfa 2>/dev/null   # as David's request
    killall -9 ice_manager 2>/dev/null
    killall -9 mp_launcher ice_manager_1 ice_manager_2 ice_manager_3 ice_manager_4 ice_manager_5 ice_manager_6 ice_manager_7 ice_manager_8
    	
    # CS
    killall -2 acloader 2>/dev/null
    
    # MCMS
    cd $MCMS_DIR
    Scripts/Destroy.sh 

    killall valgrind 2>/dev/null
    killall Startup.sh WaitForStartup.sh 2>/dev/null

    sleep 25   # as Audio team xiaoliang's request

    # brutal termination
    #############################################
    #EngineMRM
    kill -9 `pgrep MRM` `pgrep mrm` 2>/dev/null

    #RMX1000
    killall -9 launcher sys mp audio_soft traced Proxy sys_status_moni ManageMcuMenu menu httpd mpproxy video sys_status_monitor

    # mfa
    killall -9 IpmcSim.x86 mfa 2>/dev/null
	killall -9 ice_manager 2>/dev/null

    #kill CS
    cd $CS_DIR
    killall -9 tarAndZip acloader calltask csman gkiftask h323LoadBalancer mcmsif siptask mcms 2>/dev/null

    # MCMS
    cd $MCMS_DIR
    Scripts/batchkill.sh 2>/dev/null
    killall -9 Startup.sh WaitForStartup.sh 2>/dev/null


    # clean files and shared memory (once)
    #############################################
    cd $MCMS_DIR
    Scripts/Cleanup.sh 2>/dev/null
}


#################################################################
#								#
#			MAIN				#
#								#
#################################################################
if [ $? != 0 ];then
	exit 1
fi

echo -e "\nRunning GesherStart.sh $1 $2:\n=================================="
        
case "$1" in
start)
	start $2
	;;
target)
	target $2
	;;
stop)
	stop	
	;;
*)
	echo "$1: Action not supported."
	;;
esac

