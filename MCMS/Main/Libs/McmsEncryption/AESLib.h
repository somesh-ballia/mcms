/*
********************************************************************************
*
* Copyright (C) 2005 Polycom Israel Ltd.
* This file contains confidential information proprietary to POLYCOM ISRAEL Ltd.
* The use or disclosure of any information contained In this file without the 
* written consent of an officer of POLYCOM ISRAEL Ltd is expressly forbidden.
*
********************************************************************************

********************************************************************************
  
	General Description: AES 128 encryption library include file
	
	Generated By:  Gil     Date: 20.9.05
	  
********************************************************************************/

#ifndef __AES_LIB_H__
#define __AES_LIB_H__

#include <RandomGenerator.h>

#define __LITTLE_ENDIAN__

//Source Code
#ifdef __LITTLE_ENDIAN__
#ifndef GETU32
#define GETU32(p) SWAP(*((Uint32 *)(p)))
#endif
#ifndef PUTU32
#define PUTU32(ct, st) { *((Uint32 *)(ct)) = SWAP((st)); }
#endif
#ifndef SWAP
#define SWAP(a)	((((Uint32)(a) & 0x000000FF)<<24)	| \
				(((Uint32)(a) & 0x0000FF00)<<8)		| \
				(((Uint32)(a) & 0x00FF0000)>>8)		| \
				(((Uint32)(a) & 0xFF000000)>>24))
#endif
#else
#define GETU32(pt) (*((Uint32*)(pt)))
#define PUTU32(Tgt, Src) {(*((Uint32*)(Tgt))) = (Src);}
#endif

#define CONVERT_HEX_STRING(a,b,val) \
{\
	Uint32	StringCtr = 0;\
	Uint32	ArrCtr = 0;\
	Uint32	size = val;\
	while(size)\
{\
	if(a[StringCtr] >= 'a') {a[StringCtr]=a[StringCtr]+10-'a';}\
	else {a[StringCtr]-='0';}\
	if(a[StringCtr + 1] >= 'a') {a[StringCtr + 1]=a[StringCtr + 1]+10-'a';}\
	else {a[StringCtr + 1]-='0';}\
	b[ArrCtr++]=((a[StringCtr]<<4)|a[StringCtr + 1]);\
	StringCtr += 2;\
	size--;\
}\
}

#define ENCRYPTION_MODULE_TABLE_SIZE	256
#define	CIPHER_BLOCK_LENGTH				16	//In Bytes
#define NUM_WORDS_FOR_EXPANDED_KEY		44
#define CIPHER_KEY_LENGTH				16	//In Bytes

void DumpBuffer(int len,Uint8* bufferToDump, char* buffer);
//Key expansion
extern FAR void RijndaelKeySetupEnc(	Uint32			*punExpandedRoundKey,
										const Uint8		*pucCipherKey);			//(Uint32 rk[/*4*(Nr + 1)*/], const Uint8 cipherKey[], int keyBits);

extern FAR void RijndaelKeySetupDec(	Uint32			*punExpandedRoundKey,
										const Uint8		*pucCipherKey);			//(Uint32 rk[/*4*(Nr + 1)*/], const Uint8 cipherKey[], int keyBits);

//AES 11 rounds on 128 bits
extern FAR void RijndaelEncryptRounds(	const Uint32	*punExpandedRoundKey,
										const Uint8		*pucInput,
										Uint8			*pucEncryptResult);

extern FAR void RijndaelDecryptRounds(	const Uint32	*punExpandedRoundKey,
										const Uint8		*pucInput,
										Uint8			*pucDecryptResult);

extern FAR void EncryptCBC(				Uint8			*pucPayload,
										Uint32			unByteCntr,
										Uint32			*punIVector,
										Uint32			*punExpRoundKeyStartPtr);

extern FAR void DecryptCBC(				Uint8			*pucPayload,
										Uint32			unByteCntr,
										Uint32			*punIVector,
										Uint32			*punExpRoundKeyStartPtr);

//Api for stack controler - generating and decryption of keys
extern FAR int CreateCipherKey(		const Uint8		*pucSharedSecret,
										Uint8			*pucCipherKey,
									Uint8			*pucEncryptedCipherKey);

extern FAR int CreateCipherKeyOpenSSL(	const Uint8		*pucSharedSecret,
										Uint8			*pucCipherKey,
										Uint8			*pucEncryptedCipherKey);

extern FAR void DecryptCipherKey(		const Uint8		*pucSharedSecret,
										Uint8			*pucCipherKey,
										Uint8			*pucDecryptedCipherKey);

extern FAR void DecryptCipherKeyOpenSSL(const Uint8		*pucSharedSecret,
											  Uint8		*pucCipherKey,
											  Uint8		*pucDecryptedCipherKey);

//Api for H320 - generating and decryption of keys
extern FAR int H320CreateCipherKey(	const Uint8		*pucSharedSecret,
										Uint32			*punIVector,
										Uint8			*pucCipherKey,
										Uint8			*pucEncryptedCipherKey);

extern FAR void H320DecryptCipherKey(	const Uint8		*pucSharedSecret,
										Uint32			*punIVector,
										const Uint8		*pucCipherKey,
										Uint8			*pucDecryptedCipherKey);

extern FAR int H320CreateCipherKeyOpenSSL(const Uint8 	*pucSharedSecret,
										  Uint8 		*pucIVectorOpenSSL,
										  Uint8 		*pucCipherKey,
										  Uint8 		*pucEncryptedCipherKey);

extern FAR void H320DecryptCipherKeyOpenSSL(const Uint8 *pucSharedSecret, 
											Uint8 		*pucIVector,
											const Uint8 *pucCipherKey,
											Uint8 		*pucDecryptedCipherKey);

//For H320 encryption
extern FAR void EncryptDecryptOFB(		Uint8			*pucDataBuff,
										Uint32			unByteCntr,
										Uint32			*punIVector,
										Uint32			*punExpRoundKeyStart);

extern FAR void DecryptCBCOpenSSL(const Uint8* pucSharedKey,
											Uint8 *pucIVector,
											const Uint8* pucInput,
											Uint8 *pucOutput);

//Initialize cache modes
extern FAR void InitEncryptionTables();

FAR void H320RijndaelEncryptRounds(Uint32 *punExpandedRoundKey,  Uint32 *punIVector, const Uint8 *pucInput, Uint8 *pucEncryptResult);
#endif

