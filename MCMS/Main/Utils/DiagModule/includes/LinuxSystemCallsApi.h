/*
*****************************************************************************
*
* Copyright (C) 2005 POLYCOM NETWORKS Ltd.
* This file contains confidential information proprietary to POLYCOM NETWORKSO
*  Ltd. The use or disclosure of any information contained
* in this file without the written consent of an officer of POLYCOM NETWORKS
* Ltd is expressly forbidden.
*
*****************************************************************************

*****************************************************************************

 Module Name: LinuxSystemCallsApi.h

 General Description:  Module "" contains:

      1. 

 Generated By:	Yigal Mizrahi       Date: 26.4.2005

*****************************************************************************/
#ifndef _LINUX_SYSTEM_CALLS_API_H_
#define _LINUX_SYSTEM_CALLS_API_H_

/***** Include Files *****/
#include <stdio.h>
#include <stdlib.h> 
#include <errno.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <pthread.h>
#include <sys/syscall.h>
#include <linux/unistd.h>


/* t.r  - check compatability later */
#include "DiagDataTypes.h"



static pid_t gettid()
{
	return syscall(__NR_gettid);
}

/***** Public Variables *****/

/***** Global Variables *****/

/***** Public Functions Declarations *****/

/***** Private Functions Declarations *****/

//typedef void (*pFunctionAddr);
typedef void (*FuncToRun)();



#define DATA 50
#define MAX_BUF 2048

typedef enum
{
	eMainThread,
	eWDThread, 
    eTimerMngrThread, 
	ePrintThread, 
	eCmdCardThread, 
	eNtpThread,   // unused
	eDispatcherThread, 
	eIpmiListenThread,  // unused
	eSwitchDiagListenThread, 
	eEmaListenThread, 
	eLanStatListenThread, 
	eEmaSimulationListenThread, 
	eMfaDiagListenThread,   // unused
	eMfaResetListenThread, 
	eTCPXmitThread, 
	eTCPrcvThread, 
	eLSPhyTask, 
	eLSPollStatistics, 
	eShelfRcvThread,  // unused
	eCpuDiagListenThread, 
	eEthMonitoringThread,
    eStart4boardServerThread,
    eLanTestConsultThread,
    eIsToStartTestsThread,
    eSwitchDiagTestsThread,
    eIpmiReadCacheThread,
    eIpmiHandleThread,
    eLanHandleThread,
	eMaxThread

}	TThreadNumber; 

typedef struct
{
	UINT32 ul_ThreadId;
	INT32  l_ThreadPriority;
	INT8   c_ThreadName[40];
#ifdef x86_ARCH
	INT32   b_IsStarted;
    	pthread_t pThreadId;//this is for pthread operation in x86
#endif
} ThreadIdStr; 

//Data base of all the threads in the process : 
typedef struct 
{
	pthread_t pThread;              //proocess id
	void*  vFuncToRun;     
	
}	TThreadDataBase;





typedef struct
{
	UINT32 nType;
	UINT8 pucData[16];
	  
}	TMessageType;

typedef struct
{
	UINT32 nType;
	UINT8 pucData[1];
	  
}	TMessageProcessType;


typedef struct
{
	UINT32 ulData;
	UINT32 ulSize;
	UINT32 ulStreamInfo;
	UINT32 ulDummy1;
	  
}	TMessageThreadType;




typedef struct
{
	UINT32 unMessageCounter;
	UINT32 unMessageQid; 
 
}	TMessageQueueParams;



typedef struct
{
	UINT32 unParam1;
	UINT32 unParam2;
	UINT32 unParam3;
	UINT32 unParam4;
	
}   TcrateThreadParams;





#define MAX_NUM_OF_MESSAGE_QUEUE   255
#define MAX_NUM_OF_CLIENTS         30



/* definitions for transfer type  */
#define LOCAL_TRANSFER 0xC0
#define REMOTE_TRANSFER 0xDD
#define UNKNOWN_TRANSFER_DESTINATION 0x33 


extern ThreadIdStr tThreadDesc[eMaxThread];
extern UINT8 ucThreadName[eMaxThread][20];


void EnrollInThreadList_internal(const char *funcName, UINT32 ulThreadIndex);


extern INT32 CreateMessageQueue();
extern INT32 RemoveMessageQueue(INT32 nQid);
extern INT32 SendMessage(INT32 nQid , TMessageThreadType *ptMessageThreadType , INT32 nMessageFlag);
extern INT32 ReceiveMessage(INT32 nQid , TMessageThreadType *ptMessageThreadType, INT32 nMessageFlag); //IPC_NOWAIT,0
extern INT32 CreateProcessMessageQueue(INT32 nCounter);
extern INT32 SendProcessMessage(INT32 nQid  ,INT32 nMessageFlag, UINT32 nType, TMessageProcessType *pSendPtr,UINT32 size);
extern INT32 ReceiveProcessMessage(INT32 nQid,INT32 nMessageFlag,UINT32 nType,TMessageProcessType *pRcvPtr,UINT32 size);
extern UINT8* CreateSharedMemory(UINT32 unSize , UINT8 *pucMemAddr ,  UINT32 *punShmemId);
extern INT32 RemoveSharedMemory(UINT32 unSmid);
extern pid_t CreateProcessWithFunc(void *pFuncAddr);
extern pid_t CreateProcessWithExeFile(char *pFile);
extern pid_t CreateProcess(void *pFuncAddr);
#define CreateThread(pFuncAddr,ulPriority) CreateThreadWrapper(pFuncAddr, #pFuncAddr, ulPriority);


//extern pthread_t CreateThread(void *pFuncAddr, UINT32	ulPriority);
#define CreateThreadOther(pFuncAddr,ulPriority) CreateThreadOtherWrapper(pFuncAddr, #pFuncAddr, ulPriority);
//extern pthread_t CreateThreadOther(void *pFuncAddr, UINT32	ulPriority);

extern void SetZeroMessageParam();
extern void RemoveAllMessageQueue();
extern INT32 getThreadPriority();

#define EnrollInThreadList(ulThreadIndex) EnrollInThreadList_internal(__FUNCTION__, ulThreadIndex)



#endif
