/*
********************************************************************************
*
* Copyright (C) 2003 Polycom Israel Ltd.
* This file contains confidential information proprietary to POLYCOM ISRAEL Ltd.
* The use or disclosure of any information contained In this file without the
* written consent of an officer of POLYCOM ISRAEL Ltd is expressly forbidden.
*
********************************************************************************

*****************************************************************************

 General Description:

 Generated By: Nir Brachel      Date: 7/11/2005

*****************************************************************************/

#ifndef __ART_AUD_REQUEST_STRUCTS_H
#define __ART_AUD_REQUEST_STRUCTS_H

/***** Include Files *****/
#include "SharedDefines.h"
#include "AudHostApiDefinitions.h"

/***** Constants *****/

/***** Macros *****/

/***** Type Definition *****/
#define  SSRC_LIST_SIZE  5

/***** Public Global Variables *****/

/***** Public Functions Prototypes *****/
typedef struct
{
    APIU32  numOfSSRC;                 // number of ssrc for relay party
    APIU32  ssrcList[SSRC_LIST_SIZE];  // list of ssrc
} TSsrcStruct;

// Call Generator SoftMCU audio parameters
typedef struct
{
	APIU8 bIsCallGenerator;
	APIU8 reserved[3];
} TCGAudioParams;

// Audio Opus Codec
typedef struct
{
	APIU32  nBitRate;

} OPUS_AUDIO_PARAM_S;


typedef struct
{
	// Port level parameters
	APIS32	enNetworkType;				// ENetworkType ename
	APIS32  enAudioConnectionStatus;	// EAudioConnectionStatus
	APIS32	enPartyMediaType;			// EPartyMediaType ename
	APIS32	enCallDirection;			// ECallDirection ename
	APIS32  bnVtxSupport;
	APIS32	nNumberOfChannels;
	APIS32	enConfSampleRate;			// ESampleRate ename

	// Decoder parameters
	APIS32  enDecoderAlgorithm;			// EAudioAlgorithm ename
	APIS32  bnDecoderMute;
	APIS32	enDecoderGain;				// EAudioGainPreset ename
	APIS32  bnStandalone;				//  Config  tGainPers.bMute = bnStandalone

	// Objects activity flags
	APIS32  bnErrorConcealment;
	APIS32  bnAgc;
	APIS32  bnToneRemove;
	APIS32  bnNoiseReduction;
	APIS32  bnT1CptDetection;
	APIS32  bnDtmfDetection;
	APIS32	bnNoiseDetection;
	APIS32	bnCompressedAudioDelay;  	// PCI bug patch (to be removed in V3.x)
	APIS32	nCompressedAudioDelayValue; // PCI bug patch (to be removed in V3.x)

	APIS32  bnEchoSuppression;
	APIS32  bnKeyboardSuppression;
	
	APIS32  bnAudioNewPLC;
	APIS32  bnAudioClarity;
	// Noise Detection Parameters
	APIS32	enNoiseDetectionThreshold;	// ENoiseDetectionThreshold ename
   	APIS32	nEchoDelayMsec;
	APIS32	unDecoderGain;              // Decoder Gain per Algorithm (GF729) (values 0 to 1000, default = 100 - means no change)
   	APIU32  nSSRC;
	
	APIS32  enConfSpeakerChangeMode; 	// 0 - default   1 - Fast
	APIS32  enSelectiveMixing; 			// 0 – default/off   1 – On
	APIS32  bnRelayToMix;  //was added for the SVC Cascade MFW feature.
	APIU32 unMsftClient;				// MSFT_CLIENT_ENUM for RTV, MSFT client

	OPUS_AUDIO_PARAM_S tOpusAudioParams; // for Opus Audio Codec
										 
	TCGAudioParams tCallGeneratorParams; // Call Generator SoftMCU audio parameters
} TAudioOpenDecoderReq;

typedef struct
{
//	// Port level parameters
//	APIS32	enNetworkType;				// ENetworkType ename
//	APIS32  enAudioConnectionStatus;	// EAudioConnectionStatus
	APIS32	enPartyMediaType;			// EPartyMediaType ename
//	APIS32	enCallDirection;			// ECallDirection ename
//	APIS32  bnVtxSupport;
//	APIS32	nNumberOfChannels;
//	APIS32	enConfSampleRate;			// ESampleRate ename
//
//	// Decoder parameters
//	APIS32  enDecoderAlgorithm;			// EAudioAlgorithm ename
//	APIS32  bnDecoderMute;
//	APIS32	enDecoderGain;				// EAudioGainPreset ename
//	APIS32  bnStandalone;				//  Config  tGainPers.bMute = bnStandalone
//
//	// Objects activity flags
//	APIS32  bnErrorConcealment;
//	APIS32  bnAgc;
//	APIS32  bnToneRemove;
//	APIS32  bnNoiseReduction;
//	APIS32  bnT1CptDetection;
//	APIS32  bnDtmfDetection;
//	APIS32	bnNoiseDetection;
//	APIS32	bnCompressedAudioDelay;  	// PCI bug patch (to be removed in V3.x)
//	APIS32	nCompressedAudioDelayValue; // PCI bug patch (to be removed in V3.x)
//
//	APIS32  bnEchoSuppression;
//	APIS32  bnKeyboardSuppression;
//
//	APIS32  bnAudioNewPLC;
//	APIS32  bnAudioClarity;
//	// Noise Detection Parameters
//	APIS32	enNoiseDetectionThreshold;	// ENoiseDetectionThreshold ename
//   	APIS32	nEchoDelayMsec;
//	APIS32	unDecoderGain;              // Decoder Gain per Algorithm (GF729) (values 0 to 1000, default = 100 - means no change)
//   	APIU32  nSSRC;
//
//	APIS32  enConfSpeakerChangeMode; 	// 0 - default   1 - Fast
//	APIS32  enSelectiveMixing; 			// 0 \u2013 default/off   1 \u2013 On
//
//	APIU32 unMsftClient;				// MSFT_CLIENT_ENUM for RTV, MSFT client
//
//	TCGAudioParams tCallGeneratorParams; // Call Generator SoftMCU audio parameters
} TAudioUpdateDecoderReq;

typedef enum
{
        E_MIX_MODE_GET_DUMMY,
        E_MIX_MODE_GET_OTHERS,                    // legacy audio encoder
        E_MIX_MODE_GET_MYSELF,                    // SAC encoder (transcoding from legacy audio protocol to SAC protocol)
        E_MIX_MODE_GET_NOTHING,                   // Not used
        E_MIX_MODE_GET_ALL,                       // Not used
        E_MIX_MODE_GET_LAST
}EMixModeGet;

typedef struct
{
	APIS32	enNetworkType;				// ENetworkType ename
	APIS32	enConfSampleRate;			// ESampleRate ename
	APIS32	nNumberOfChannels;
	APIS32	enEncoderAlgorithm;			// EAudioAlgorithm ename
	APIS32  bnEncoderMute;
	APIS32	enEncoderGain;				// EAudioGainPreset ename
	APIS32  bnStandalone;				//  Config  tGainPers.bMute = bnStandalone
	APIS32	unEncoderGain;      // Encoder Gain per Algorithm (GF729) (values 0 to 1000, default = 100 - means no change)

	TSsrcStruct  stSSRC;

    APIS32  enEMixModeGet;                          // 1. Config Encoder to legacy (traditional) mode(E_MIX_MODE_GET_OTHERS)
                                                   // 2. Config Encoder to relay  (now relevant for SAC only) mode (E_MIX_MODE_GET_MYSELF)
    APIU32 unIvrSsrc; //For the SVC IVR implementation on softMcu where the AMP writes the SVC RTP header
    APIU32 unIvrCsrc; //For the SVC IVR implementation on softMcu where the AMP writes the SVC RTP header

	APIUBOOL bUseSpeakerSsrcForTx;   // If ST EP – Audio Encoder will use Speaker SSRC as its SSRC for Tx

	TCGAudioParams tCallGeneratorParams; // Call Generator SoftMCU audio parameters
	APIS32   bnRelayToMix;  //was added for the SVC Cascade MFW feature.
	OPUS_AUDIO_PARAM_S tOpusAudioParams;	// for Opus Audio Codec

} TAudioOpenEncoderReq;

typedef struct
{
	APIS32	nDummy;
} TAudioCloseDecoderReq;

typedef struct
{
	APIS32	nDummy;
} TAudioCloseEncoderReq;

typedef struct
{
	APIS32  unNewConfSampleRate;		// ESampleRate ename
} TAudioMovePartyReq;

typedef struct
{
	APIS32  enAudioAlgorithm;			// EAudioAlgorithm ename
	APIS32	unCodecGain;      // Encoder/Decoder Gain per Algorithm (GF729) (values 0 to 1000, default = 100 - means no change)
	OPUS_AUDIO_PARAM_S tOpusAudioParams;	// for Opus Audio Codec
} TAudioUpdateAlgorithmReq;

typedef struct
{
	APIS32	bnCompressedAudioDelay;
	APIS32	nCompressedAudioDelayValue;
} TAudioUpdateCompressedAudioDelayReq;

typedef struct
{
	APIS32	enAudioChannelType;			// EAudioChannelType
	APIS32	enGain;						// EAudioGainPreset ename
} TAudioUpdateGainReq;


typedef struct
{
	APIUBOOL bUseSpeakerSsrcForTx;   // TRUE/FALSE (if it's SameTime EP: TRUE. Audio Encoder will use Speaker SSRC as its SSRC for Tx)
} TAudioUpdateUseSpeakerSsrcForTxReq;

typedef struct
{
	APIS32  enAudioChannelType;			// EAudioChannelType
	APIS32  bnMute;
} TAudioUpdateMuteReq;

typedef struct
{
	APIS32  enAudioConnectionStatus;	// EAudioConnectionStatus ename
} TAudioUpdateConnectionStatusReq;

typedef struct
{
	APIS32	bnErrorConcealment;
} TAudioUpdateErrorConcealmentReq;

typedef struct
{
	APIS32  bnAgc;
} TAudioUpdateAgcReq;

typedef struct
{
	APIS32  bnToneRemove;
} TAudioUpdateToneRemoveReq;

typedef struct
{
	APIS32  bnNoiseReduction;
} TAudioUpdateNoiseReductionReq;

typedef struct
{
	APIS32  bnDtmfDetection;
} TAudioUpdateDtmfDetectionReq;

typedef struct
{
	APIS32	bnNoiseDetection;
	APIS32	enNoiseDetectionThreshold;	// ENoiseDetectionThreshold ename
} TAudioUpdateNoiseDetectionReq;

typedef struct
{
	APIS32  bnEchoSuppression;
} TAudioUpdateEchoSuppressionReq;

typedef struct
{
	APIS32  bnKeyboardSuppression;
} TAudioUpdateKeyboardSuppressionReq;

typedef struct
{
	APIS32  bnStandalone;
} TAudioUpdateStandaloneReq;

typedef struct
{
	APIU32 unChannelType;              //kChannelType enum
	APIU32 unChannelDirection;     	   //cmCapDirection  enum
	TSsrcStruct  nSSRC;
	APIU32 unIvrSsrc; //For the SVC IVR implementation on softMcu where the AMP writes the SVC RTP header relevant in the AUDIO_UPDATE_RELAY_ENC_PARAMS_REQ
	APIU32 unIvrCsrc; //For the SVC IVR implementation on softMcu where the AMP writes the SVC RTP header relevant in the AUDIO_UPDATE_RELAY_ENC_PARAMS_REQ
} TRtpUpdateRelayReq;

typedef struct
{
	APIU32	tTone;			// Tone Type (EAudioTone)
	APIU32	duration;		// duration of note (in Hsyncs)
	APIU32	toneGain;		// Tone Volume
} TNoteObj, *pTNoteObj;

// struct for CG_PLAY_AUDIO_REQ, changing audio file/gain for Call Generator SoftMCU
typedef struct
{
	APIU32 enAudioGain;					// EAudioGainPreset enum
	APIU32 unNumOfRepetition;			// num of repetition of the file (0 for forever)
	APIU32 fileNameLength;				// file full pathname length
	char   fileName[MAX_FULL_PATHNAME];	// file full pathname
} TCGPlayAudioReqStruct;


typedef struct
{
	APIU32	numOfRepetition;			// number of repetition times (0 for playing once)
	APIU32	numOfTones;					// number of tones (including gaps)
 	TNoteObj tone[TONE_LIST_SIZE_MAX];	// list of tones

} SPlayToneStruct;


/*typedef struct
{
	APIU32	partyOrconfFlag;	// command to party or conf
	APIU32	channelType;		// encoder / decoder (for conf)
	APIU32	rsrv[2];			// reserve for future

} SIVRStopPlayToneStruct;
*/



// IVR section End


typedef struct
{
	APIU32 unSSRC;
} TAudioEncoderUpdateSeenImageSsrcReq; //part of SVC Cascade feature for MFW for A/V sync

// mainly created for Opus codec, but may not only
typedef struct
{
	APIU32 nBitRate;
} TAudioUpdateBitRateReq;


#endif

