/*
********************************************************************************
*
* Copyright (C) 2003 Polycom Israel Ltd.
* This file contains confidential information proprietary to POLYCOM ISRAEL Ltd.
* The use or disclosure of any information contained In this file without the
* written consent of an officer of POLYCOM ISRAEL Ltd is expressly forbidden.
*
********************************************************************************

*****************************************************************************

 General Description: File contains the definitions of the RTP requests structures

 Generated By: Eyal Leviav      Date: 7/25/2005

*****************************************************************************/

#ifndef __FWK_RTP_REQUEST_STRUCTS_H
#define __FWK_RTP_REQUEST_STRUCTS_H

/***** Include Files *****/
#include "DataTypes.h"
#include "IpSizeDefinitions.h"
#include "SrtpStructsAndDefinitions.h"
#include "../CardMngrTIP/TipStructs.h"
#include "PhysicalResource.h"
#include "IpChannelParams.h"

/***** Constants *****/

/***** Macros *****/

/***** Type Definition *****/

////////////////////////////////////
// TIP / Lync2013
////////////////////////////////////
typedef struct
{
	APIU32          			bnTipIsEnabled;
	ETipPartyTypeAndPosition  	eTipPosition;
} TOpenTipPortParams;

typedef enum 
{
	MSFT_CLIENT_DUMMY =0,
	MSFT_CLIENT_MOC,
	MSFT_CLIENT_LYNC,
	MSFT_CLIENT_AVMCU,
	MSFT_CLIENT_LYNC2013,
	MSFT_CLIENT_AVMCU2013,
	MSFT_CLIENT_NONE_MSFT,
	MSFT_CLIENT_LAST
} MSFT_CLIENT_ENUM;

////////////////////////////////////
//Update RTP channel specific params (according to media type) struct
////////////////////////////////////
typedef struct {
	APIU32							unBitRate;				// Channel's rate
	APIU32							unPayloadType;			// the channel negotiated PayLoad type (dynamic or standard)

	APIU32	                        unFecRedPayloadType;	// LYNC2013_FEC_RED: For MS SVC FEC and LYNC 2013 Audio Redundant packets

	APIU32							unDtmfPayloadType;

	//Video
	APIU32							bunIsH263Plus;
	APIU32							bunIsCCEnabled;			// 1 - close caption enabled, if != 1 close caption is disabled
	APIU32							bunIsFlipIntraBit; 		// for old MOC versions OC/2or LCC/1

	// Highest Common
	APIU32							unAnnexesMask;			// according to bit mask defined in an enum
	// Valid values for all resolutions are:0 - not active, 1-30 active: means video type/Mpi
	APIS32							nHcMpiQCif;
	APIS32							nHcMpiCif;
	APIS32							nHcMpi4Cif;
	APIS32							nHcMpi16Cif;
	APIS32							nHcMpiVga;
	APIS32							nHcMpiNtsc;
	APIS32							nHcMpiSvga;
	APIS32							nHcMpiXga;
	APIS32							nHcMpiSif;
	APIS32							nHcMpiQvga;
	APIU32							unCustomMaxMbpsValue;

	//Audio
	APIU32							unMaxFramesPerPacket;

	//FECC
	APIU32							unDestMcuId;
	APIU32							unDestTerminalId;
	//H239
	APIU32							bunContentEnabled; 			// 0 = No | 1 = Enabled
	APIU32							unPacketPayloadFormat;   	// EPacketPayloadFormat values

	// TRUE if Tandberg 6000E - add a 30msec delay
	APIU8							b32StreamRequiresEndOfFrameParsing;

	APIU8	                        bIsFecRedOn;  //LYNC2013_FEC_RED

	// TIP
	TOpenTipPortParams				openTipPortParams;
	
	APIU32							unMsftClient; // MSFT_CLIENT_ENUM for RTV, MSFT client


	// Traffic shaping params
	APIU32							b32TrafficShapingEnabled;
	APIU32							unTrafficShapingWindowSize;

} TUpdateRtpSpecificChannelParams;

////////////////////////////////////
// LPR Parameters
////////////////////////////////////
typedef struct
{
	APIU32							bunLprEnabled;
	APIU32							unVersionID;
	APIU32							unMinProtectionPeriod;
	APIU32							unMaxProtectionPeriod;
	APIU32							unMaxRecoverySet;
	APIU32							unMaxRecoveryPackets;
	APIU32							unMaxPacketSize;

} TLprSpecificParams;


////////////////////////////////////
//Update Port, Open RTP channel struct
// H323_RTP_UPDATE_PORT_OPEN_CHANNEL_REQ
// SIP_RTP_UPDATE_PORT_OPEN_CHANNEL_REQ
////////////////////////////////////
#define NON_SSRC 0xFFFFFFFF
 
typedef struct {
	APIU32							unMsFirstSyncSourceInRange;	// First Sync Source for Lync2013 - 
	APIU32							unMsLastSyncSourceInRange;	// Last Sync Source for Lync2013
    APIU32                          unUpdatedSSRC;
    APIU8                           bReplaceSSRC;
    APIU32                          unUpdatedCSRC;
    APIU8                           bReplaceCSRC;
	APIUBOOL                        bDoNotChangeSsrc;   // Default – FALSE. For ST client Audio Channel Tx – TRUE
} TUpdateSsrcParams;

typedef enum
{
    eMediaModeRelayNone = 0,
    eMediaModeRelayOnly,
    eMediaModeTranscoding,
    eMediaModeRelayAndTranscoding,
    eMediaModeVswMode,
    eMediaModeTranscodingAndVsw,
    eMediaModeLast
} mediaModeEnum;

typedef struct {
	// CM
	APIU32							bunIsRecovery;				//Indicates weather this request is sent during a recovery process for CM
	// Party
	APIU32							unChannelType;				// kChanneltype enam //Video/Audio/Content/FECC
	APIU32							unChannelDirection;			// cmCapDirection ename
	APIU32							unCapTypeCode;				//Specific Alg

	APIU32							unEncryptionType;			// EenMediaType ename
	APIU8							aucSessionKey[sizeOf128Key];//32 bit aligned

	APIU32							unSequenceNumber;			//CM - For Recovery
	APIU32							unTimeStamp;				//CM - For Recovery
	APIU32							unSyncSource;				//CM - For Recovery
	APIU32    						bMuteStream;				// Only relevant for Tx – Do not output packets until Stream_ON_Req
	APIU8							useRtcp;					// VNGFE-4273

	TUpdateRtpSpecificChannelParams	tUpdateRtpSpecificChannelParams;
	TLprSpecificParams				tLprSpecificParams;			// LPR specific parameters (Remote EP declarations)
	sdesCapSt						sdesCap;					// Only relevant for Tx – Do not output packets until Stream_ON_Req
	TUpdateSsrcParams               updateSsrcParams;
    APIU32                          mediaMode;                  // mediaModeEnum
} TUpdatePortOpenRtpChannelReq;

////////////////////////////////////
//Update RTP channel mode struct
// H323_RTP_UPDATE_CHANNEL_REQ
// SIP_RTP_UPDATE_CHANNEL_REQ
////////////////////////////////////
typedef struct {
	APIU32							unChannelType;				// kChanneltype enam //Video/Audio/Content/FECC
	APIU32							unChannelDirection;			// cmCapDirection ename

	TUpdateRtpSpecificChannelParams	tUpdateRtpSpecificChannelParams;

	APIU32							unEncryptionType;			// EenMediaType ename
	APIU8							aucSessionKey[sizeOf128Key];//32 bit aligned
	sdesCapSt						sdesCap;

    APIU32                          mediaMode;                  // mediaModeEnum
	
	APIU32    						bMuteStream;				// Only relevant for Tx – Do not output packets until Stream_ON_Req
} TUpdateRtpChannelReq;

////////////////////////////////////
//RTP channel new rate
// H323_RTP_UPDATE_CHANNEL_RATE_REQ
// SIP_RTP_UPDATE_CHANNEL_RATE_REQ
////////////////////////////////////
typedef struct  {
	APIU32							unChannelType;				// kChanneltype ename //Video/Audio/Content/FECC
	APIU32							unChannelDirection;			// cmCapDirection ename
	APIU32							unNewChannelRate;
} TUpdateRtpChannelRateReq;

////////////////////////////////////
//FECC token response struct
// H323_RTP_FECC_TOKEN_RESPONSE_REQ
////////////////////////////////////
typedef struct {
	APIU32							unResponse;					//Response (accept, reject etc.)
	APIU32							unDestMcuId;
	APIU32							unDestTerminalId;
	APIU32							unIsCameraControl;			//0 false , 1 - true
	MCMS_MPL_PHYSICAL_RESOURCE_INFO_S                     	tDestTerminalPhysicalRtp;
} TFeccTokenResponseReq;


////////////////////////////////////
//Update MT pair
// H323_RTP_UPDATE_MT_PAIR_REQ
////////////////////////////////////
typedef struct  {
	APIU32							unDestMcuId;
	APIU32							unDestTerminalId;
} TUpdateMtPairReq;

////////////////////////////////////
//Stream on struct (relevant for content only)
// H323_RTP_STREAM_ON_REQ
// SIP_RTP_STREAM_ON_REQ
////////////////////////////////////
typedef struct {
	APIU32							unChannelType;				// kChanneltype ename //Video/Audio/Content/FECC
	APIU32							unChannelDirection;			// cmCapDirection ename
} TStreamOnReq;

////////////////////////////////////
//Stream off struct (relevant for content only)
// H323_RTP_STREAM_OFF_REQ
// SIP_RTP_STREAM_OFF_REQ
////////////////////////////////////
typedef struct {
	APIU32							unChannelType;				// kChanneltype ename //Video/Audio/Content/FECC
	APIU32							unChannelDirection;			// cmCapDirection ename
} TStreamOffReq;


//this number is illegal as a partyID and hence can be used as a default (illegal) value for the ulTipChannelPartyID (below)
//when sending monitoring requests for NON TIP connections.
//the number was approved by RonL who is the numbers master ;)
#define ILEGAL_PARTY_ID (0xffffffff)

////////////////////////////////////
//Party monitoring request
// H323_RTP_PARTY_MONITORING_REQ
// SIP_RTP_PARTY_MONITORING_REQ
////////////////////////////////////
typedef struct {
	APIU32    ulTipChannelPartyID; //this is PartyID of the TIP channel for which the monitoring req is for (can be of the CENTER/LEFT/RIGHT/AUX)
	APIUBOOL  bIsWebRtc;
} TPartyMonitoringReq;

/*TBD
////////////////////////////////////
//DBC2 on
////////////////////////////////////
typedef struct  {
	APIU32							unChannelType;				//Video/Audio/Content/FECC
	APIU32							unChannelDirection;
	APIU32							unRefreshRate;
	APIU32							unInterLeave;
	APIU32							unMpiLimit;
	APIU32							unMotionVector;
	APIU32							unNoEncapsulation;
	APIU32							unOverlap;
} TDbc2OnReq;

////////////////////////////////////
//DBC2 off
////////////////////////////////////
typedef struct  {
	APIU32							unChannelType;				//Video/Audio/Content/FECC
	APIU32							unChannelDirection;
} TDbc2OffReq;

////////////////////////////////////
//Start video IVR struct
////////////////////////////////////
typedef struct  {
TBD
} TStartVidIvrReq;

////////////////////////////////////
//Stop video IVR struct
////////////////////////////////////
typedef struct  {
TBD
} TStopVidIvrReq;
*/

////////////////////////////////////
//Content On/Off struct
//ART_CONTENT_ON_REQ
//ART_CONTENT_OFF_REQ
////////////////////////////////////
typedef struct  {
	APIU32							unChannelDirection;			// cmCapDirection ename
	APIU32							bunIsOnOff; 				// 0 = OFF | 1 = ON
} TContentOnOffReq;

////////////////////////////////////
//Evacuate stream struct
//ART_EVACUATE_REQ
////////////////////////////////////
typedef struct  {
	APIU32							unChannelType;				// kChanneltype enam //Video/Audio/Content/FECC
	APIU32							unChannelDirection;			// cmCapDirection ename
} TEvacuateReq;

////////////////////////////////////
// LPR Mode Change Command Struct
////////////////////////////////////
typedef struct
{
	APIU32							unChannelType;				// kChanneltype enam //Video/Audio/Content/FECC
	APIU32							unChannelDirection;			// cmCapDirection ename
	APIU16							usLossProtection;
	APIU32							unMTBF;
	APIU32							unCongestionCeiling;
	APIU16							usFill;
	APIU16							usModeTimeout;
	APIU16							usAlignment;

} TLprModeChangeReq;

//////////////////////////////////////////
//		FeccPartyType
///////////////////////////////////////
typedef enum
{
	eFeccPartyTypeNone = 0,            					//COP regular party
	eFeccPartyTypeRegular,
	eFeccPartyTypeChairperson,
	eFeccPartyTypeLast //  must be last
} feccPartyTypeEnum;
///////////////////////////////////////
#ifndef CARD_TYPE_MPM_PLUS
static const char* feccPartyTypeStr[] =
{
	"FeccPartyTypeNone",
	"FeccPartyTypeRegular",
	"FeccPartyTypeChairperson"
};
#endif
/////////////////////////////////////
typedef struct
{
    APIU32		uFeccPartyType;       					//values from feccPartyTypeEnum
} FECC_PARTY_TYPE_S;
//////////////////////////////////

typedef struct
{
	APIU32  	    bunIsOnOff;						// 0 = OFF | 1 = ON
	APIU32          FecFrameRatio;   				//Num of Frames for FEC -  The default is 1.
	kChanneltype	eMediaType;	// Media type: audio or video
	UINT32  		unDspFractionLoss; //currently will not be in use
}TFEC_RED_OnOffReq;
//////////////////////////////////
//ACTIVATE_PACKET_LOSS_REQ
typedef struct{
    APIU32       channelType;        // video or audio
    APIU32       channelDirection;  
    APIU32       bIsIce;  
}TActivePacketLossReq;
///
typedef struct
{
  APIS32		enMediaType;				
  APIS32 		nAdditionalTimeIntervalMsec;	//signed interval to delay by
  APIS32 		nTimeToPerformMsec;				//Time to perform the previous delay

} TJitterBufferControlInd;

typedef struct
{
  APIS32		enMediaType;
  APIS32 		nProcessTimeMsec;				//overwhole latency for media
  APIS32 		nInternalJitterBufferSizeMsec;  // internal delay
  APIS32 		nMinRequiredJitterBufferSizeMsec;  
} TJitterBufferInfoInd;



/***** Public Global Variables *****/

/***** Public Functions Prototypes *****/


#endif

